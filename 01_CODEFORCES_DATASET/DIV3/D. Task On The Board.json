{"link": "https://codeforces.com//contest/1367/problem/D", "problemId": "650996", "shortId": "1367D", "contest_number": "1367", "name": "D. Task On The Board", "statement": "Polycarp wrote on the board a string  containing only lowercase Latin letters (''-''). This string is known for you and given in the input.After that, he erased some letters from the string , and he rewrote the remaining letters in  order. As a result, he got some new string . You have to find it with some additional information.Suppose that the string  has length  and the characters are numbered from left to right from  to . You are given a sequence of  integers: , where  is the sum of the distances  from the index  to all such indices  that  (consider that ''<''<...<''). In other words, to calculate , Polycarp finds all such indices  that the index  contains a letter that is later in the alphabet than  and sums all the values .For example, if  = \"\", then:  since ='', all other indices contain letters which are later in the alphabet, that is: ;  since ='', only the index  contains the letter, which is later in the alphabet, that is: ;  since ='', then there are no indexes  such that , thus ;  since ='', only the index  contains the letter, which is later in the alphabet, that is: . Thus, if  = \"\", then .Given the string  and the array , find any possible string  for which the following two requirements are fulfilled simultaneously:   is obtained from  by erasing some letters (possibly zero) and then writing the rest in  order;  the array, constructed from the string  according to the rules above, equals to the array  specified in the input data. ", "input": "The first line contains an integer  ()\u00a0\u2014 the number of test cases in the test. Then  test cases follow. Each test case consists of three lines:   the first line contains string , which has a length from  to  and consists of lowercase English letters;  the second line contains positive integer  (), where  is the length of the string , and  is the length of the array ;  the third line contains the integers  ().  It is guaranteed that in each test case an answer exists.", "output": "Output  lines: the -th of them should contain the answer (string ) to the -th test case. It is guaranteed that an answer to each test case exists. If there are several answers, output any.", "tutorial": "We will construct the string , starting with the largest letters. Note that if , then the -th letter of the string  is maximal, so we know that the -th letter affect all . While the string  is not completely constructed, we will do the following:   Find all  such that  and the -th character of string  is not placed;  Put on all these positions  in the string  the maximum letter not used in the string  (there should be a sufficient number of letters in the string );  Subtract  from all . ", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define forn(i, n) for (int i = 0; i < int(n); i++)\n\nint main() {\n    int q;\n    cin >> q;\n    forn(qq, q) {\n        string s;\n        cin >> s;\n        int n;\n        cin >> n;\n        vector<int> b(n);\n        forn(i, n)\n            cin >> b[i];\n        vector<vector<int>> groups;\n        while (true) {\n            vector<int> pos;\n            forn(i, n)\n                if (b[i] == 0)\n                    pos.push_back(i);\n            if (pos.empty())\n                break;\n            groups.push_back(pos);\n            forn(i, n)\n                if (b[i] == 0)\n                    b[i] = INT_MAX;\n                else\n                    for (int pp: pos)\n                        b[i] -= abs(i - pp);\n        }\n        map<char, int> cnts;\n        forn(i, s.size())\n            cnts[s[i]]++;\n        auto j = cnts.rbegin();\n        string t(n, '?');\n        for (auto g: groups) {\n            while (j->second < g.size())\n                j++;\n            for (int pp: g)\n                t[pp] = j->first;\n            j++;\n        }\n        cout << t << endl;\n    }\n}\n", "interactive": false, "noSolution": false, "noTutorial": false}