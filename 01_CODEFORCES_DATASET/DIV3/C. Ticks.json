{"link": "https://codeforces.com//contest/1579/problem/C", "problemId": "1123868", "shortId": "1579C", "contest_number": "1579", "name": "C. Ticks", "statement": "Casimir has a rectangular piece of paper with a checkered field of size . Initially, all cells of the field are white.Let us denote the cell with coordinates  vertically and  horizontally by . The upper left cell will be referred to as  and the lower right cell as .Casimir draws  of different sizes on the field. A tick of size  () with its center in cell  is drawn as follows:   First, the center cell  is painted black.  Then exactly  cells on the top-left diagonally to the center and exactly  cells on the top-right diagonally to the center are also painted black.  That is all the cells with coordinates  for all  between  and  are painted. In particular, a tick consists of  black cells. An already painted cell will remain black if painted again. Below you can find an example of the  box, with two ticks of sizes  and .  You are given a description of a checkered field of size . Casimir claims that this field came about after he drew some (possibly ) ticks on it. The ticks could be of different sizes, but the size of each tick is at least  (that is,  for all the ticks).Determine whether this field can indeed be obtained by drawing some (possibly none) ticks of sizes  or not.", "input": "The first line contains an integer  ()\u00a0\u2014 the number test cases. The following lines contain the descriptions of the test cases.  The first line of the test case description contains the integers , , and  (; )\u00a0\u2014 the field size and the minimum size of the ticks that Casimir drew. The following  lines describe the field: each line consists of  characters either being '' if the corresponding cell is not yet painted or '' otherwise.", "output": "Print  lines, each line containing the answer to the corresponding test case. The answer to a test case should be  if the given field can be obtained by drawing ticks of at least the given size and  otherwise. You may print every letter in any case you want (so, for example, the strings , , , and  will all be recognized as positive answers).", "tutorial": "For each painted cell, we will determine whether it can be part of some tick of the allowed size. If some of the cells cannot be a part of any tick, the answer is obviously . Otherwise, let's match each colored cell with an arbitrary valid (entirely contained in the field under consideration and of size ) tick containing it. Let's draw all such ticks, then the following holds:   no empty (white) cell of the field will be painted, since only ticks that do not contradict the field in question have been considered;  every colored cell of the field will be covered by at least one drawn tick (at least the one we matched it with).  Basically, this process gives us a field in which the set of painted cells matches the data in the input, which means that the field given in the input could have been obtained, in particular, in the way described above, and the answer is .In order to check that all painted cells are parts of some ticks, let's go through all possible ticks of size  and for each tick mark all the cells included in it. If there is at least one unmarked painted cell in the end, it can't be a part of any valid tick, and the answer is .To consider all possible ticks, we can iterate through all their possible center cells, that is, all the painted cells. Since smaller ticks are subsets of larger ticks with the same center cell it is sufficient to find the maximal size tick that can be constructed from that center cell. So for each painted cell we aim to find the maximal possible size of a tick with its center in this very cell. Let us now consider a painted cell  as a possible center of some tick. By the definition of a tick, this cell can be a center of a tick of size  if for all  from  to  both cells  and  exist (are not out of bounds) and are painted. Let's iterate through  from  to , and stop when the described condition is no longer satisfied. The largest  for which the condition is still satisfied gives us \u00a0\u2014 the maximum possible size of a tick with its center in . Now if , then such a tick is valid, and all the cells included in it should be marked. Otherwise, it could not have been drawn, and none of its cells should be marked.After a complete check of all possible ticks in a given field, either there will be no unchecked painted cells and then the answer is , or at least one painted cell is not covered by any valid checkbox and then the answer is .The time complexity is .", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n    int t;\n    cin >> t;\n    while (t--) {\n        int n, m, k;\n        cin >> n >> m >> k;\n        vector<vector<int>> status(n, vector<int>(m, 0));\n        for (int i = 0; i < n; i++) {\n            string s;\n            cin >> s;\n            for (int j = 0; j < m; j++)\n                if (s[j] == '*')\n                    status[i][j] = 1;\n        }\n        for (int i = n - 1; i > -1; i--) {\n            for (int j = 0; j < m; j++) {\n                if (status[i][j] == 0)\n                    continue;\n                int len = 0;\n                while (j > len && j + len + 1 < m && i > len) {\n                    if (status[i - len - 1][j - len - 1] == 0 || status[i - len - 1][j + len + 1] == 0)\n                        break;\n                    len++;\n                }\n                if (len >= k) {\n                    for (int d = 0; d <= len; d++) {\n                        status[i - d][j - d] = 2;\n                        status[i - d][j + d] = 2;\n                    }\n                }\n            }\n        }\n        bool ok = true;\n        for (int i = 0; i < n; i++)\n            for (int j = 0; j < m; j++)\n                if (status[i][j] == 1)\n                    ok = false;\n\n        cout << (ok ? \"YES\" : \"NO\") << '\\n';\n    }\n}", "interactive": false, "noSolution": false, "noTutorial": false}