{"link": "https://codeforces.com//contest/1296/problem/B", "problemId": "531583", "shortId": "1296B", "contest_number": "1296", "name": "B. Food Buying", "statement": "Mishka wants to buy some food in the nearby shop. Initially, he has  burles on his card. Mishka can perform the following operation any number of times (possibly, zero): choose some  , buy food that costs exactly  burles and obtain  burles as a cashback (in other words, Mishka spends  burles and obtains  back). The operation  means  divided by  rounded down.It is guaranteed that you can always buy some food that costs  for any possible value of .Your task is to say the maximum number of burles Mishka can spend if he buys food optimally.For example, if Mishka has  burles then the maximum number of burles he can spend is . Firstly, he can spend  burles, obtain  burle as a cashback. Now he has  burles, so can spend  burles, obtain  burle as a cashback and spend it too.You have to answer  independent test cases.", "input": "The first line of the input contains one integer  () \u2014 the number of test cases. The next  lines describe test cases. Each test case is given on a separate line and consists of one integer  () \u2014 the number of burles Mishka initially has.", "output": "For each test case print the answer on it \u2014 the maximum number of burles Mishka can spend if he buys food optimally.", "tutorial": "Let's do the following greedy solution: it is obvious that when we buy food that costs exactly  for , we don't lose any burles because of rounding. Let's take the maximum power of  that is not greater than  (let it be ), buy food that costs  (and add this number to the answer) and add  to . Apply this process until  and then add  to the answer.Time complexity:  per test case.", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n#ifdef _DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n#endif\n\t\n\tint t;\n\tcin >> t;\n\twhile (t--) {\n\t\tint s;\n\t\tcin >> s;\n\t\tint ans = 0;\n\t\tint pw = 1000 * 1000 * 1000;\n\t\twhile (s > 0) {\n\t\t\twhile (s < pw) pw /= 10;\n\t\t\tans += pw;\n\t\t\ts -= pw - pw / 10;\n\t\t}\n\t\tcout << ans << endl;\n\t}\n\t\n\treturn 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}