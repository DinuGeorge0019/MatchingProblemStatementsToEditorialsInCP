{"link": "https://codeforces.com//contest/1690/problem/A", "problemId": "1423049", "shortId": "1690A", "contest_number": "1690", "name": "A. Print a Pedestal  Codeforces logo  ", "statement": "Given the integer \u00a0\u2014 the number of available blocks. You must use  blocks to build a . The  consists of  platforms for -nd, -st and -rd places respectively. The platform for the -st place must be  higher than for the -nd place, and the platform for the -nd place must be  higher than for the -rd place. Also, the height of each platform must be greater than zero (that is, each platform must contain at least one block).    Among all possible pedestals of  blocks, deduce one such that the platform height for the -st place  as possible. If there are several of them, output any of them.", "input": "The first line of input data contains an integer  ()\u00a0\u2014 the number of test cases. Each test case contains a single integer  ()\u00a0\u2014 the total number of blocks for the pedestal. All  blocks must be used. It is guaranteed that the sum of  values over all test cases does not exceed .", "output": "For each test case, output  numbers \u00a0\u2014 the platform heights for -nd, -st and -rd places on a pedestal consisting of  blocks (, ).  Among all possible pedestals, output the one for which the value of  . If there are several of them, output any of them.", "tutorial": "In the  constraints, the problem can be solved by brute force: we will go through the value for  (the height for the first place), and then select suitable values for  and . Since , we divide the remaining  blocks equally between  and . If it turns out that , then we try to decrease  by  and increase  by 1. If we get the right answer (), output the heights and stop the process. We will go through the value of  in order of increasing.", "solution": "#include <bits/stdc++.h>\n \nusing namespace std;\n \n#define forn(i, n) for (int i = 0; i < int(n); i++)\n#define sz(v) (int)v.size()\n#define all(v) v.begin(),v.end()\n#define eb emplace_back\n \n \n \nvoid solve() {\n    int n; \n    cin >> n;\n    for (int a = 3; a < n; a++) {\n        int c = (n - a) / 2;\n        int b = n - a - c;\n        if (c > 1 && b+1 < a) {\n            c--;\n            b++;\n        }\n        if (a > b && b > c) {\n            cout << b << ' ' << a << ' ' << c << endl;\n            return;\n        }\n    }\n}\n \nint main() {\n    int t;\n    cin >> t;\n \n    forn(tt, t) {\n        solve();\n    }\n}", "interactive": false, "noSolution": false, "noTutorial": false}