{"link": "https://codeforces.com//contest/1141/problem/B", "problemId": "316171", "shortId": "1141B", "contest_number": "1141", "name": "B. Maximal Continuous Rest", "statement": "Each day in Berland consists of  hours. Polycarp likes time management. That's why he has a fixed schedule for each day \u2014 it is a sequence  (each  is either  or ), where  if Polycarp works during the -th hour of the day and  if Polycarp rests during the -th hour of the day.Days go one after another endlessly and Polycarp uses the same schedule for each day.What is the maximal number of continuous hours during which Polycarp rests? It is guaranteed that there is at least one working hour in a day.", "input": "The first line contains  () \u2014 number of hours per day. The second line contains  integer numbers  (), where  if the -th hour in a day is working and  if the -th hour is resting. It is guaranteed that  for at least one .", "output": "Print the maximal number of continuous hours during which Polycarp rests. Remember that you should consider that days go one after another endlessly and Polycarp uses the same schedule for each day.", "tutorial": "At first consider we process the only day. In this case just iterate over hours and maintain  \u2014 the length of the current rest block (i.e. if the element equals  then increase , if the element equals  then reset  to ). The maximum intermediate value of  is the answer.In case of multiple days, consider the given sequence as a cyclic sequence. Concatenate the sequence twice and solve the previous case. Sure, not it is no necessary to concatenate it in explicit way, just use  instead of  and process . \n", "solution": "int n;\ncin >> n;\nvector<int> a(n);\nfor (int i = 0; i < n; i++)\n    cin >> a[i];\nint result = 0;\nint len = 0;\nfor (int i = 0; i < 2 * n; i++) {\n    if (a[i % n] == 1) {\n        len++;\n        result = max(result, len);\n    } else {\n        len = 0;\n    }\n}\ncout << result << endl;", "interactive": false, "noSolution": false, "noTutorial": false}