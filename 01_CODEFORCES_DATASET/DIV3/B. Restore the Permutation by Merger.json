{"link": "https://codeforces.com//contest/1385/problem/B", "problemId": "675199", "shortId": "1385B", "contest_number": "1385", "name": "B. Restore the Permutation by Merger", "statement": "A permutation of length  is a sequence of integers from  to  of length  containing each number exactly once. For example, , ,  are permutations, and , ,  are not.There was a permutation . It was merged with itself. In other words, let's take two instances of  and insert elements of the second  into the first maintaining relative order of elements. The result is a sequence of the length .For example, if  some possible results are: , , . The following sequences are not possible results of a merging: ], [, .For example, if  the possible results are: , . The following sequences are not possible results of a merging: ], [, .Your task is to restore the permutation  by the given resulting sequence . It is guaranteed that the answer .You have to answer  independent test cases.", "input": "The first line of the input contains one integer  () \u2014 the number of test cases. Then  test cases follow. The first line of the test case contains one integer  () \u2014 the length of permutation. The second line of the test case contains  integers  (), where  is the -th element of . It is guaranteed that the array  represents the result of merging of some permutation  with the same permutation .", "output": "For each test case, print the answer:  integers  (), representing the initial permutation. It is guaranteed that the answer .", "tutorial": "The solution is pretty simple: it's obvious that the first element of $$$a$$$ is the first element of the permutation $$$p$$$. Let's take it to $$$p$$$, remove it and its its copy from $$$a$$$. So we just have the smaller problem and can solve it in the same way. It can be implemented as \"go from left to right, if the current element isn't used, take it and mark it's used\".", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n#ifdef _DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n#endif\n\t\n\tint t;\n\tcin >> t;\n\twhile (t--) {\n\t\tint n;\n\t\tcin >> n;\n\t\tvector<int> a(2 * n);\n\t\tfor (auto &it : a) cin >> it;\n\t\tvector<int> used(n);\n\t\tvector<int> p;\n\t\tfor (int i = 0; i < 2 * n; ++i) {\n\t\t\tif (!used[a[i] - 1]) {\n\t\t\t\tused[a[i] - 1] = true;\n\t\t\t\tp.push_back(a[i]);\n\t\t\t}\n\t\t}\n\t\tfor (auto it : p) cout << it << \" \";\n\t\tcout << endl;\n\t}\n\t\n\treturn 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}