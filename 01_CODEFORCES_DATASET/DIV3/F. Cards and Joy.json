{"link": "https://codeforces.com//contest/999/problem/F", "problemId": "192345", "shortId": "999F", "contest_number": "999", "name": "F. Cards and Joy", "statement": "There are  players sitting at the card table. Each player has a favorite number. The favorite number of the -th player is .There are  cards on the table. Each card contains a single integer: the -th card contains number . Also, you are given a sequence . Its meaning will be explained below.The players have to distribute all the cards in such a way that each of them will hold exactly  cards. After all the cards are distributed, each player counts the number of cards he has that contains his favorite number. The joy level of a player equals  if the player holds  cards containing his favorite number. If a player gets no cards with his favorite number (i.e., ), his joy level is .Print the maximum possible total joy levels of the players after the cards are distributed. Note that the sequence  is the same for all the players.", "input": "The first line of input contains two integers  and  () \u2014 the number of players and the number of cards each player will get. The second line contains  integers  () \u2014 the numbers written on the cards. The third line contains  integers  () \u2014 the favorite numbers of the players. The fourth line contains  integers  (), where  is the joy level of a player if he gets exactly  cards with his favorite number written on them. It is guaranteed that the condition  holds for each .", "output": "Print one integer \u2014 the maximum possible total joy levels of the players among all possible card distributions.", "tutorial": "It is obvious that we can solve the problem separately for each favorite number because each player has only one favorite number, and if the player gets a card not having his favorite number, his joy will not change.Let  be the maximum possible total joy of  players with the same favorite number (it doesn't matter which one) and  cards (containing their favorite number) if the cards are distributed among the players optimally. Note that  and . At the beginning, all entries of the  table are zeroes. The transition in this dynamic programming depends on how many cards the -th player will receive (which is between  and ). In other words, the dynamic programming transition will look like: for (int i = 0; i <= k; ++i) dp[x + 1][y + i] = max(dp[x + 1][y + i], dp[x][y] + h[i]),where  is the joy of the player if he receives exactly  cards containing his favorite number. Note that .After filling the  table, the answer can be calculated very easily: , where  is the number of players with favorite number  and  is the number of cards containing the number .Time complexity is .", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int N = 520;\nconst int K = 12;\nconst int C = 100 * 1000 + 11;\n\nint n, k;\nint c[C];\nint f[C];\nvector<int> h;\n\nint dp[N][K * N];\n\nint main() {\n#ifdef _DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n#endif\n\t\n\tcin >> n >> k;\n\th = vector<int>(k + 1);\n\tfor (int i = 0; i < n * k; ++i) {\n\t\tint x;\n\t\tcin >> x;\n\t\t++c[x];\n\t}\n\tfor (int i = 0; i < n; ++i) {\n\t\tint x;\n\t\tcin >> x;\n\t\t++f[x];\n\t}\n\tfor (int i = 1; i <= k; ++i)\n\t\tcin >> h[i];\n\t\t\n\tfor (int i = 0; i < n; ++i) {\n\t\tfor (int j = 0; j <= n * k; ++j) {\n\t\t\tfor (int cur = 0; cur <= k; ++cur) {\n\t\t\t\tdp[i + 1][j + cur] = max(dp[i + 1][j + cur], dp[i][j] + h[cur]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tint ans = 0;\n\tfor (int i = 0; i < C; ++i) {\n\t\tif (f[i] != 0) ans += dp[f[i]][c[i]];\n\t}\n\t\n\tcout << ans << endl;\n\t\n\treturn 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}