{"link": "https://codeforces.com//contest/1141/problem/D", "problemId": "316172", "shortId": "1141D", "contest_number": "1141", "name": "D. Colored Boots", "statement": "There are  left boots and  right boots. Each boot has a color which is denoted as a lowercase Latin letter or a question mark (''). Thus, you are given two strings  and , both of length . The character  stands for the color of the -th left boot and the character  stands for the color of the -th right boot.A lowercase Latin letter denotes a specific color, but the question mark ('') denotes an indefinite color. Two specific colors are  if they are exactly the same. An indefinite color is  with any (specific or indefinite) color.For example, the following pairs of colors are compatible: ('', ''), ('', ''), ('', '') and ('', ''). The following pairs of colors are  compatible: ('', '') and ('', '').Compute the maximum number of pairs of boots such that there is one left and one right boot in a pair and their colors are compatible.Print the maximum number of such pairs and the pairs themselves. A boot can be part of at most one pair.", "input": "The first line contains  (), denoting the number of boots for each leg (i.e. the number of left boots and the number of right boots). The second line contains the string  of length . It contains only lowercase Latin letters or question marks. The -th character stands for the color of the -th left boot. The third line contains the string  of length . It contains only lowercase Latin letters or question marks. The -th character stands for the color of the -th right boot.", "output": "Print  \u2014 the maximum number of compatible left-right pairs of boots, i.e. pairs consisting of one left and one right boot which have compatible colors. The following  lines should contain pairs  (). The -th of these lines should contain the index  of the left boot in the -th pair and index  of the right boot in the -th pair. All the numbers  should be distinct (unique), all the numbers  should be distinct (unique). If there are many optimal answers, print any of them.", "tutorial": "Use greedy approach in this problem. At first, match such pairs that colors are exactly the same (and they are specific, not indefinite). After it match each indefinite colored left boot (if any) with any specific colored right boot. Possibly, some indefinite colored left boots stay unmatched. Similarly, match each indefinite colored right boot (if any) with any specific colored left boot. And finally match indefinite colored left and right boots (if any).\n", "solution": "#define forn(i, n) for (int i = 0; i < int(n); i++)\nconst int A = 26;\n...\nint n;\ncin >> n;\nstring l;\ncin >> l;\nvector<vector<int>> left(A);\nvector<int> wl;\nforn(i, n)\n    if (l[i] != '?')\n        left[l[i] - 'a'].push_back(i);\n    else\n        wl.push_back(i);\nstring r;\ncin >> r;\nvector<vector<int>> right(A);\nvector<int> wr;\nforn(i, n)\n    if (r[i] != '?')\n        right[r[i] - 'a'].push_back(i);\n    else\n        wr.push_back(i);\nvector<pair<int,int>> p;\nvector<int> cl(A), cr(A);\nforn(i, A) {\n    forn(j, min(left[i].size(), right[i].size()))\n        p.push_back(make_pair(left[i][j] + 1, right[i][j] + 1));\n    cl[i] = cr[i] = min(left[i].size(), right[i].size());\n}\nforn(i, A)\n    while (cl[i] < left[i].size() && !wr.empty()) {\n        p.push_back(make_pair(left[i][cl[i]] + 1, wr[wr.size() - 1] + 1));\n        cl[i]++;\n        wr.pop_back();\n    }\nforn(i, A)\n    while (cr[i] < right[i].size() && !wl.empty()) {\n        p.push_back(make_pair(wl[wl.size() - 1] + 1, right[i][cr[i]] + 1));\n        wl.pop_back();\n        cr[i]++;\n    }\nforn(j, min(wl.size(), wr.size()))\n    p.push_back(make_pair(wl[j] + 1, wr[j] + 1));\ncout << p.size() << endl;\nfor (auto pp: p)\n    cout << pp.first << \" \" << pp.second << endl;", "interactive": false, "noSolution": false, "noTutorial": false}