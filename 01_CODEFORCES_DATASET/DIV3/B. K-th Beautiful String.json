{"link": "https://codeforces.com//contest/1328/problem/B", "problemId": "573968", "shortId": "1328B", "contest_number": "1328", "name": "B. K-th Beautiful String", "statement": "For the given integer  () let's write down all the strings of length  which contain  letters '' and two letters '' in  (alphabetical) order.Recall that the string  of length  is lexicographically less than string  of length , if there exists such  (), that , and for any  () . The lexicographic comparison of strings is implemented by the operator  in modern programming languages.For example, if  the strings are (the order does matter):                     It is easy to show that such a list of strings will contain exactly  strings.You are given  () and  (). Print the -th string from the list.", "input": "The input contains one or more test cases. The first line contains one integer  () \u2014 the number of test cases in the test. Then  test cases follow. Each test case is written on the the separate line containing two integers  and  (. The sum of values  over all test cases in the test doesn't exceed .", "output": "For each test case print the -th string from the list of all described above strings of length . Strings in the list are sorted lexicographically (alphabetically).", "tutorial": "Let's try to find the position of the leftmost occurrence of '' (iterate over all positions from  to ). If  then this is the required position of the leftmost occurrence of ''. Then the position of rightmost occurrence is  so we can print the answer. Otherwise, let's decrease  by  (remove all strings which have the leftmost '' at the current position) and proceed to the next position. It is obvious that in such a way we consider all possible strings in lexicographic order.", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define forn(i, n) for (int i = 0; i < int(n); i++)\n\nint main() {\n    int t;\n    cin >> t;\n    forn(tt, t) {\n        int n, k;\n        cin >> n >> k;\n        string s(n, 'a');\n        for (int i = n - 2; i >= 0; i--) {\n            if (k <= (n - i - 1)) {\n                s[i] = 'b';\n                s[n - k] = 'b';\n                cout << s << endl;\n                break;\n            }\n            k -= (n - i - 1);\n        }\n    }\n}\n", "interactive": false, "noSolution": false, "noTutorial": false}