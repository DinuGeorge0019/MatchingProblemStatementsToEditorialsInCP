{"link": "https://codeforces.com//contest/1472/problem/D", "problemId": "854354", "shortId": "1472D", "contest_number": "1472", "name": "D. Even-Odd Game", "statement": "During their New Year holidays, Alice and Bob play the following game using an array  of  integers:   Players take turns, Alice moves first.  Each turn a player chooses any element and removes it from the array.  If Alice chooses , then she adds it to her score. If the chosen value is odd, Alice's score does not change.  Similarly, if Bob chooses , then he adds it to his score. If the chosen value is even, then Bob's score does not change. If there are no numbers left in the array, then the game ends. The player with the highest score wins. If the scores of the players are equal, then a draw is declared.For example, if  and , then the game could go as follows (there are other options):   On the first move, Alice chooses  and get two points. Her score is now . The array  is now .  On the second move, Bob chooses  and get five points. His score is now . The array  is now .  On the third move, Alice chooses  and get no points. Her score is now . The array  is now .  On the last move, Bob chooses  and get three points. His score is now . The array  is empty now.  Since Bob has more points at the end of the game, he is the winner. You want to find out who will win if both players play optimally. .", "input": "The first line contains an integer  ()\u00a0\u2014 the number of test cases. Then  test cases follow. The first line of each test case contains an integer  ()\u00a0\u2014 the number of elements in the array . The next line contains  integers  ()\u00a0\u2014 the array  used to play the game. It is guaranteed that the sum of  over all test cases does not exceed .", "output": "For each test case, output on a separate line:    \"\" if Alice wins with the optimal play;  \"\" if Bob wins with the optimal play;  \"\", if a tie is declared during the optimal play. ", "tutorial": "Let's look at an analogy for this game.   If Alice takes an even number , she adds  points to the global result, otherwise ;  If Bob takes an odd number , he adds  points to the global result, otherwise ;  Alice wants to maximize the global result and Bob wants to minimize it. Obviously, this game is completely equivalent to the conditional game.Suppose now it's Alice's move. Let's look at some number  in the array.   If this number is even, then taking it will add  points, and giving it to Bob will add  points.  If this number is odd, then taking it will add  points, and giving it to Bob will add  points. So taking the number  by  points is more profitable than not taking it (regardless of the parity). To maximize the result, Alice should always take the maximum number in the array.Similar reasoning can be done for Bob. In the task, it was necessary to sort the array and simulate the game.", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\nusing ll = long long;\n\nvoid solve() {\n  int n;\n  cin >> n;\n  vector<int> v(n);\n  for (int &e : v) {\n    cin >> e;\n  }\n  sort(v.rbegin(), v.rend());\n  ll ans = 0;\n  for (int i = 0; i < n; i++) {\n    if (i % 2 == 0) {\n      if (v[i] % 2 == 0) {\n        ans += v[i];\n      }\n    } else {\n      if (v[i] % 2 == 1) {\n        ans -= v[i];\n      }\n    }\n  }\n  if (ans == 0) {\n    cout << \"Tie\\n\";\n  } else if (ans > 0) {\n    cout << \"Alice\\n\";\n  } else {\n    cout << \"Bob\\n\";\n  }\n}\n\nint main() {\n  int t;\n  cin >> t;\n  while (t--) {\n    solve();\n  }\n  return 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}