{"link": "https://codeforces.com//contest/1029/problem/A", "problemId": "211256", "shortId": "1029A", "contest_number": "1029", "name": "A. Many Equal Substrings", "statement": "You are given a string  consisting of  lowercase Latin letters and an integer number .Let's define a substring of some string  with indices from  to  as .Your task is to construct such string  of minimum possible length that there are exactly  positions  such that . In other words, your task is to construct such string  of minimum possible length that there are exactly  substrings of  equal to .It is guaranteed that the answer is always unique.", "input": "The first line of the input contains two integers  and  () \u2014 the length of the string  and the number of substrings. The second line of the input contains the string  consisting of exactly  lowercase Latin letters.", "output": "Print such string  of minimum possible length that there are exactly  substrings of  equal to . It is guaranteed that the answer is always unique.", "tutorial": "Let's carry the current answer as , the last position we're checked as  and the number of occurrences as . Initially, the answer is ,  is  and  is  (0-indexed). We don't need to check the position  because there is the beginning of the occurrence of  at this position. Also  is  by the same reason. Let's repeat the following algorithm while : if , where |ans| is the length of the answer, let's add  to the answer, increase  and  by . In the other case let's check if there is a prefix of  starting from . If it is, let  be its length. Then we need to add the suffix of  starting from  till the end of , increase  and  by . If there is no prefix of  starting from  the we just increase .The other idea is the following: we have to find the period of the string . Let this period will be . Then the answer is  repeated  times and . The period of the string  is the minimum prefix of this string such that we can repeat this prefix infinite number of times so the prefix of this infinite string will be . For example, the period of the string  is , the period of the string  is  and the period of the string  is . The period of the string can be found using prefix-function of the string or in  naively.", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define sz(a) int((a).size())\n\nint main() {\n#ifdef _DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n#endif\n\t\n\tint n, k;\n\tstring t;\n\tcin >> n >> k >> t;\n\t\n\tint cnt = 1;\n\tint pos = 1;\n\tstring ans = t;\n\twhile (cnt < k) {\n\t\tif (pos >= sz(ans)) {\n\t\t\tans += t;\n\t\t\t++cnt;\n\t\t} else {\n\t\t\tbool ok = true;\n\t\t\tint len = 0;\n\t\t\tfor (int i = 0; i < sz(t); ++i) {\n\t\t\t\tif (pos + i >= sz(ans)) break;\n\t\t\t\t++len;\n\t\t\t\tif (ans[pos + i] != t[i]) ok = false;\n\t\t\t}\n\t\t\tif (ok) {\n\t\t\t\tans += t.substr(len);\n\t\t\t\t++cnt;\n\t\t\t}\n\t\t}\n\t\t++pos;\n\t}\n\t\n\tcout << ans << endl;\n\t\n\treturn 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}