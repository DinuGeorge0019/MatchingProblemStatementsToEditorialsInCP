{"link": "https://codeforces.com//contest/1144/problem/B", "problemId": "322483", "shortId": "1144B", "contest_number": "1144", "name": "B. Parity Alternated Deletions", "statement": "Polycarp has an array  consisting of  integers.He wants to play a game with this array. The game consists of several moves. On the first move he chooses any element and deletes it (after the first move the array contains  elements). For each of the next moves he chooses any element with the only restriction: its parity should differ from the parity of the element deleted on the previous move. In other words, he alternates parities (even-odd-even-odd-... or odd-even-odd-even-...) of the removed elements. Polycarp stops if he can't make a move.Formally:   If it is the first move, he chooses any element and deletes it;  If it is the second or any next move:   if the last deleted element was , Polycarp chooses any  element and deletes it;  if the last deleted element was , Polycarp chooses any  element and deletes it.   If after some move Polycarp cannot make a move, the game ends. Polycarp's goal is to  the sum of  elements of the array after end of the game. If Polycarp can delete the whole array, then the sum of  elements is zero.Help Polycarp find this value.", "input": "The first line of the input contains one integer  () \u2014 the number of elements of . The second line of the input contains  integers  (), where  is the -th element of .", "output": "Print one integer \u2014 the  possible sum of  elements of the array after end of the game.", "tutorial": "Let's calculate the sum of the whole array  and then divide all its elements into two arrays  and  by their parity ( for odd,  for even). Sort both of them in non-increasing order. Then what can we see? We always can delete first  elements from both arrays (where  is the size of ). So let's decrease  by the sum of first  elements of the array  and the same for the array . If one the arrays has more than  elements (both arrays cannot have more than  elements because if it is so then  should be greater) then let's decrease  by the -th element of this array (because this is the maximum possible element we can remove). Now  is the answer for the problem.", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n#ifdef _DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n#endif\n\t\n\tint n;\n\tcin >> n;\n\tint sum = 0;\n\tvector<int> even, odd;\n\tfor (int i = 0; i < n; ++i) {\n\t\tint x;\n\t\tcin >> x;\n\t\tsum += x;\n\t\tif (x & 1) odd.push_back(x);\n\t\telse even.push_back(x);\n\t}\n\t\n\tsort(odd.rbegin(), odd.rend());\n\tsort(even.rbegin(), even.rend());\n\tint k = min(odd.size(), even.size());\n\tint rem = sum;\n\trem -= accumulate(odd.begin(), odd.begin() + k, 0);\n\trem -= accumulate(even.begin(), even.begin() + k, 0);\n\tif (int(odd.size()) > k) {\n\t\trem -= odd[k];\n\t}\n\tif (int(even.size()) > k) {\n\t\trem -= even[k];\n\t}\n\t\n\tcout << rem << endl;\n\t\n\treturn 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}