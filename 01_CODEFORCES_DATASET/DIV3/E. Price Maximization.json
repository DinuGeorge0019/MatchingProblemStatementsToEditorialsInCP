{"link": "https://codeforces.com//contest/1690/problem/E", "problemId": "1423053", "shortId": "1690E", "contest_number": "1690", "name": "E. Price Maximization", "statement": "A batch of  goods (\u00a0\u2014 an even number) is brought to the store, -th of which has weight . Before selling the goods, they must be packed into packages. After packing, the following will be done:   There will be  packages, each package contains exactly two goods;  The weight of the package that contains goods with indices  and  () is . With this, the cost of a package of weight  is always  burles (rounded down), where \u00a0\u2014 a fixed and given value.Pack the goods to the packages so that the revenue from their sale is maximized. In other words, make such  pairs of given goods that the sum of the values , where  is the weight of the package number  (), is .For example, let , weights of goods . Let's pack them into the following packages.   In the first package we will put the third and sixth goods. Its weight will be . The cost of the package will be  burles.  In the second package put the first and fifth goods, the weight is . The cost of the package is  burles.  In the third package put the second and fourth goods, the weight is . The cost of the package is  burle. With this packing, the total cost of all packs would be  burles.", "input": "The first line of the input contains an integer  ()\u00a0\u2014the number of test cases in the test. The descriptions of the test cases follow. The first line of each test case contains two integers  () and  (). The number \u00a0\u2014 is even. The second line of each test case contains exactly  integers  (). It is guaranteed that the sum of  over all the test cases does not exceed .", "output": "For each test case, print on a separate line a single number \u2014 the maximum possible total cost of all the packages.", "tutorial": "Note that we do not need to consider the numbers , we are only interested in the remainder of the division of  by , and we simply add the value  to the answer. We get an array , where . Let's sort it and greedily type index pairs  such that . This can be done with two pointers. Then add the number of matching pairs to the answer counter. This will be the answer to the problem.", "solution": "#include<bits/stdc++.h>\n#define len(s) (int)s.size()\nusing namespace std;\nusing ll = long long;\n \nvoid solve(){\n    int n, k;\n    cin >> n >> k;\n    vector<ll>a(n);\n    ll sum = 0;\n    for(int i = 0; i < n; i++) {\n        cin >> a[i];\n        sum += a[i] / k;\n        a[i] = a[i] % k;\n    }\n    sort(a.begin(), a.end(), [] (int x, int y){\n        return x > y;\n    });\n \n    for(int i = 0, j = n - 1; i < j; i++, j--){\n        while(a[i] + a[j] < k && i < j) j--;\n        if(i == j) break;\n        sum++;\n    }\n    cout << sum << endl;\n}\n \nint main(){\n    int t;\n    cin >> t;\n    while(t--){\n        solve();\n    }\n    return 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}