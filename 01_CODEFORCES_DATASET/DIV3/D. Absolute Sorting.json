{"link": "https://codeforces.com//contest/1772/problem/D", "problemId": "1699971", "shortId": "1772D", "contest_number": "1772", "name": "D. Absolute Sorting", "statement": "You are given an array  consisting of  integers. The array is sorted if .You want to make the array  sorted by applying the following operation :  choose an integer , then for every , replace  by . Find any value of  that will make the array sorted, or report that there is no such value.", "input": "The first line contains one integer  () \u2014 the number of test cases. Each test case consists of two lines. The first line contains one integer  (). The second line contains  integers  (). Additional constraint on the input: the sum of  over all test cases does not exceed .", "output": "For each test case, print any integer  () that makes the array sorted. It can be shown that if such an integer  exists, there is at least one such integer between  and . If there is no such integer, then print . If there are multiple suitable values of , print any of them.", "tutorial": "What does it actually mean for an array  to be sorted? That means  and  and so on.For each pair of adajacent elements, let's deduce which values  put them in the correct order. Any value of  that puts all pairs in the correct order will be the answer.Consider any  and  and solve the inequality . If , then any value of  works. Let  be smaller than .If  is smaller than or equal to , then the inequality becomes . Thus, they don't change their order, and any  works.If  is greater than or equal to , then the inequality becomes . Thus, they always change their order, and none of  work.If  is between  and , then the inequality becomes . Thus, they only remain in the same order for any integer  such that .In union, that tells us that all values of  that work for such a pair are .The similar analysis can be applied to , which results in the required  being  for such pairs.Finally, how to find out if some value of  passes all conditions? Among all conditions of form , in order for some  to work, it should be less than or equal to even the smallest of them. Similarly, among all conditions of form , in order for some  to work, it should be greater than or equal to even the largest of them.Thus, take the minimum over the pairs of one type. Take the maximum over the pairs of another type. If two resulting values are contradictory, then there is no answer. Otherwise, any value inside the resulting range of  works.Overall complexity:  per testcase.", "solution": "#include <bits/stdc++.h>\n \nusing namespace std;\n\nint main()\n{\n    int t;\n    cin >> t;\n    for(int i = 0; i < t; i++)\n    {\n        int n;\n        cin >> n;\n        vector<int> a(n);\n        for(int j = 0; j < n; j++)\n            cin >> a[j];\n        int mn = 0, mx = int(1e9);\n        for(int j = 0; j + 1 < n; j++)\n        {\n            int x = a[j];\n            int y = a[j + 1];\n            int midL = (x + y) / 2;\n            int midR = (x + y + 1) / 2;\n            if(x < y)\n                mx = min(mx, midL);\n            if(x > y)\n                mn = max(mn, midR);\n        }\n        if(mn <= mx) cout << mn << endl;\n        else cout << -1 << endl;\n    }\n}", "interactive": false, "noSolution": false, "noTutorial": false}