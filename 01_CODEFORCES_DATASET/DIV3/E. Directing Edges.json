{"link": "https://codeforces.com//contest/1385/problem/E", "problemId": "675202", "shortId": "1385E", "contest_number": "1385", "name": "E. Directing Edges", "statement": "You are given a graph consisting of  vertices and  edges. It is not guaranteed that the given graph is connected. Some edges are already directed and you can't change their direction. Other edges are undirected and you have to choose some direction for all these edges.You have to direct undirected edges in such a way that the resulting graph is directed and acyclic (i.e. the graph with all edges directed and having no directed cycles). Note that you have to direct  undirected edges.You have to answer  independent test cases.", "input": "The first line of the input contains one integer  () \u2014 the number of test cases. Then  test cases follow. The first line of the test case contains two integers  and  (, ) \u2014 the number of vertices and the number of edges in the graph, respectively. The next  lines describe edges of the graph. The -th edge is described with three integers ,  and  (, ) \u2014 the type of the edge ( if the edge is undirected and  if the edge is directed) and vertices this edge connects (the undirected edge connects vertices  and  and directed edge is going from the vertex  to the vertex ). It is guaranteed that the graph do not contain self-loops (i.e. edges from the vertex to itself) and multiple edges (i.e. for each pair () there are no other pairs () or ()). It is guaranteed that both sum  and sum  do not exceed  (; ).", "output": "For each test case print the answer \u2014 \"\" if it is impossible to direct undirected edges in such a way that the resulting graph is directed and acyclic, otherwise print \"\" on the first line and  lines describing edges of the resulted directed acyclic graph (). Note that you cannot change the direction of the already directed edges. If there are several answers, you can print any.", "tutorial": "Firstly, if the graph consisting of initial vertices and only directed edges contains at least one cycle then the answer is \"\". Otherwise, the answer is always \"\". Let's build it. Let's build the topological sort of the graph without undirected edges. Then let's check for each directed edge if it's going from left to right (in order of topological sort). If it isn't true then there is a cycle and the answer is \"\". Otherwise, let's direct each edge from left to right in order of the topological sort.", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nvector<int> ord;\nvector<int> used;\nvector<vector<int>> g;\n\nvoid dfs(int v) {\n\tused[v] = 1;\n\tfor (auto to : g[v]) {\n\t\tif (!used[to]) dfs(to);\n\t}\n\tord.push_back(v);\n}\n\nint main() {\n#ifdef _DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n#endif\n\t\n\tint t;\n\tcin >> t;\n\twhile (t--) {\n\t\tint n, m;\n\t\tcin >> n >> m;\n\t\tg = vector<vector<int>>(n);\n\t\tvector<pair<int, int>> edges;\n\t\tfor (int i = 0; i < m; ++i) {\n\t\t\tint t, x, y;\n\t\t\tcin >> t >> x >> y;\n\t\t\t--x, --y;\n\t\t\tif (t == 1) {\n\t\t\t\tg[x].push_back(y);\n\t\t\t}\n\t\t\tedges.push_back({x, y});\n\t\t}\n\t\t\n\t\tord.clear();\n\t\tused = vector<int>(n);\n\t\tfor (int i = 0; i < n; ++i) {\n\t\t\tif (!used[i]) dfs(i);\n\t\t}\n\t\tvector<int> pos(n);\n\t\treverse(ord.begin(), ord.end());\n\t\tfor (int i = 0; i < n; ++i) {\n\t\t\tpos[ord[i]] = i;\n\t\t}\n\t\tbool bad = false;\n\t\tfor (int i = 0; i < n; ++i) {\n\t\t\tfor (auto j : g[i]) {\n\t\t\t\tif (pos[i] > pos[j]) bad = true;\n\t\t\t}\n\t\t}\n\t\tif (bad) {\n\t\t\tcout << \"NO\" << endl;\n\t\t} else {\n\t\t\tcout << \"YES\" << endl;\n\t\t\tfor (auto [x, y] : edges) {\n\t\t\t\tif (pos[x] < pos[y]) {\n\t\t\t\t\tcout << x + 1 << \" \" << y + 1 << endl;\n\t\t\t\t} else {\n\t\t\t\t\tcout << y + 1 << \" \" << x + 1 << endl;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}