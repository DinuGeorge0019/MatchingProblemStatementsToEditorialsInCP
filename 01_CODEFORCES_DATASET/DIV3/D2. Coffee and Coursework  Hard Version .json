{"link": "https://codeforces.com//contest/1118/problem/D2", "problemId": "300359", "shortId": "1118D2", "contest_number": "1118", "name": "D2. Coffee and Coursework  Hard Version ", "statement": ".Polycarp has to write a coursework. The coursework consists of  pages.Polycarp also has  cups of coffee. The coffee in the -th cup Polycarp has  caffeine in it. Polycarp can drink some cups of coffee (each one no more than once). He can drink cups in . Polycarp drinks each cup  and  (i.e. he cannot split any cup into several days).Surely, courseworks are not being written in a single day (in a perfect world of Berland, at least).Let's consider some day of Polycarp's work. Consider Polycarp drinks  cups of coffee during this day and caffeine dosages of cups Polycarp drink during this day are . Then the first cup he drinks gives him energy to write  pages of coursework, the second cup gives him energy to write  pages, the third cup gives him energy to write  pages, ..., the -th cup gives him energy to write  pages.If Polycarp doesn't drink coffee during some day, he cannot write coursework at all that day.Polycarp has to finish his coursework as soon as possible (spend the minimum number of days to do it). Your task is to find out this number of days or say that it is impossible.", "input": "The first line of the input contains two integers  and  (, ) \u2014 the number of cups of coffee and the number of pages in the coursework. The second line of the input contains  integers  (), where  is the caffeine dosage of coffee in the -th cup.", "output": "If it is impossible to write the coursework, print . Otherwise print the minimum number of days Polycarp needs to do it.", "tutorial": "Well, the main idea is described in the previous (D1) problem editorial. Read it firstly.So, now we have to improve our solution somehow. How can we do it? Wait... What is it? We iterate over all numbers of days... And the number of pages Polycarp can write when we consider  days instead of  is strictly increases... (because we always can drink any cup even with the minimum value of  as a first during the new day, and the number of pages will increase). So, what is it? Oh, this is binary search!So all we need is to replace linear search to binary search, submit the written code and get AC.", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint n, m;\nvector<int> a;\n\nbool can(int i) {\n\tlong long sum = 0; // there can be a bug\n\tfor (int j = 0; j < n; ++j) {\n\t\tsum += max(a[j] - j / i, 0);\n\t}\n\treturn sum >= m;\n}\n\nint main() {\n#ifdef _DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n#endif\n\t\n\tcin >> n >> m;\n\t\n\ta = vector<int>(n);\n\tfor (int i = 0; i < n; ++i) {\n\t\tcin >> a[i];\n\t}\n\tsort(a.rbegin(), a.rend());\n\t\n\tint l = 1, r = n;\n\twhile (r - l > 1) {\n\t\tint mid = (l + r) >> 1;\n\t\tif (can(mid)) r = mid;\n\t\telse l = mid;\n\t}\n\t\n\tif (can(l)) cout << l << endl;\n\telse if (can(r)) cout << r << endl;\n\telse cout << -1 << endl;\n\t\n\treturn 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}