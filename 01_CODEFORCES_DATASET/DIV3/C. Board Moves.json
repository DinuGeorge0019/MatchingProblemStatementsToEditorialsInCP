{"link": "https://codeforces.com//contest/1353/problem/C", "problemId": "620789", "shortId": "1353C", "contest_number": "1353", "name": "C. Board Moves", "statement": "You are given a board of size , where  is  (not divisible by ). Initially, each cell of the board contains one figure.In one move, you can select  presented in some cell and move it to one of the cells , i.e. from the cell  you can move the figure to cells:   ;  ;  ;  ;  ;  ;  ;  ; Of course, you  move figures to cells out of the board. It is allowed that after a move there will be several figures in one cell.Your task is to find the minimum number of moves needed to get  into  cell (i.e.  cells should contain  figures and one cell should contain  figures).You have to answer  independent test cases.", "input": "The first line of the input contains one integer  () \u2014 the number of test cases. Then  test cases follow. The only line of the test case contains one integer  () \u2014 the size of the board. It is guaranteed that  is odd (not divisible by ). It is guaranteed that the sum of  over all test cases does not exceed  ().", "output": "For each test case print the answer \u2014 the minimum number of moves needed to get  into  cell.", "tutorial": "It is intuitive (and provable) that the best strategy is to move each figure to the center cell . Now, with some paperwork or easy observations, we can notice that we have exactly  cells with the shortest distance ,  cells with the shortest distance ,  cells with the shortest distance  and so on. So we have  cells with the shortest distance . So the answer is . It can be rewritten as  so we can just calculate the sum of squares of all integers from  to  using loop (or formula ) and multiply the answer by .Time complexity:  or .", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n#ifdef _DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n#endif\n\t\n\tint t;\n\tcin >> t;\n\twhile (t--) {\n\t\tint n;\n\t\tcin >> n;\n\t\tlong long ans = 0;\n\t\tfor (int i = 1; i <= n / 2; ++i) {\n\t\t\tans += i * 1ll * i;\n\t\t}\n\t\tcout << ans * 8 << endl;\n\t}\n\t\n\treturn 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}