{"link": "https://codeforces.com//contest/1729/problem/B", "problemId": "1538783", "shortId": "1729B", "contest_number": "1729", "name": "B. Decode String", "statement": "Polycarp has a string  consisting of lowercase Latin letters.He encodes it using the following algorithm.He goes through the letters of the string  from left to right and for each letter Polycarp considers its number in the alphabet:  if the letter number is single-digit number (less than ), then just writes it out;  if the letter number is a two-digit number (greater than or equal to ), then it writes it out and adds the number  after. For example, if the string  is , then Polycarp will encode this string as follows:  ''\u00a0\u2014 is the -rd letter of the alphabet. Consequently, Polycarp adds  to the code (the code becomes equal to );  ''\u00a0\u2014 is the -th letter of the alphabet. Consequently, Polycarp adds  to the code and also  (the code becomes );  ''\u00a0\u2014 is the -th letter of the alphabet. Consequently, Polycarp adds  to the code (the code becomes );  ''\u00a0\u2014 is the -th letter of the alphabet. Therefore, Polycarp adds  to the code (the code becomes ). Thus, code of string  is .You are given a string  resulting from encoding the string . Your task is to decode it (get the original string  by ).", "input": "The first line of the input contains an integer  () \u2014 the number of test cases in the input. The descriptions of the test cases follow. The first line of description of each test case contains one integer  () \u2014 the length of the given code. The second line of the description of each test case contains a string  of length  \u2014 the given code. It is guaranteed that there exists such a string of lowercase Latin letters, as a result of encoding which the string  is obtained.", "output": "For each test case output the required string  \u2014 the string that gives string  as the result of encoding. It is guaranteed that such a string always exists. It can be shown that such a string is always unique.", "tutorial": "The idea is as follows: we will go from the end of the string  and get the original string .Note that if the current digit is , then a letter with a two-digit number has been encoded. Then we take a substring of length three from the end, discard  and get the number of the original letter.Otherwise, the current number , then a letter with a one-digit number was encoded. We easily reconstruct the original letter.Next, discard the already processed characters and repeat the process until the encoded string is complete.", "solution": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <set>\n#include <queue>\n\nusing namespace std;\n\nchar get(int i) {\n    return 'a' + i - 1;\n}\n\nvoid solve() {\n    int n;\n    string s;\n    cin >> n >> s;\n    int i = n - 1;\n    string res;\n    while (i >= 0) {\n        if (s[i] != '0') {\n            res += get(s[i] - '0');\n            i--;\n        } else {\n            res += get(stoi(s.substr(i - 2, 2)));\n            i -= 3;\n        }\n    }\n    reverse(res.begin(), res.end());\n    cout << res << '\\n';\n}\n\nint main() {\n    int t = 1;\n    cin >> t;\n    for (int it = 0; it < t; ++it) {\n        solve();\n    }\n    return 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}