{"link": "https://codeforces.com//contest/1660/problem/F2", "problemId": "1349761", "shortId": "1660F2", "contest_number": "1660", "name": "F2. Promising String  hard version ", "statement": "We will call a non-empty string  if it contains the same number of plus and minus signs. For example: strings \"\" and \"\" are balanced, and strings \"\", \"\" and \"\" are not balanced.We will call a string  if the string can be made balanced by several (possibly zero) uses of the following operation:  replace two  minus signs with one plus sign. In particular, every balanced string is promising. However, the converse is not true: not every promising string is balanced.For example, the string \"\" is promising, because you can replace two adjacent minuses with plus and get a balanced string \"\", or get another balanced string \"\".How many non-empty substrings of the given string  are promising? Each non-empty promising substring must be counted in the answer as many times as it occurs in string .Recall that a substring is a sequence of consecutive characters of the string. For example, for string \"\" its substring are: \"\", \"\", \"\", \"\" (the string is a substring of itself) and some others. But the following strings are not its substring: \"\", \"\", \"\".", "input": "The first line of the input contains an integer  ()\u00a0\u2014the number of test cases in the test. Then the descriptions of test cases follow. Each test case of input data consists of two lines. The first line consists of the number  (): the length of . The second line of the test case contains the string  of length , consisting only of characters \"\" and \"\". It is guaranteed that the sum of values  over all test cases does not exceed .", "output": "For each test case, print a single number: the number of the promising non-empty substrings of string . Each non-empty promising substring must be counted in the answer as many times as it occurs in string .", "tutorial": "Now we need to quickly find for a given balance value (on the prefix), the number of matching left boundaries. The boundary is suitable if the balance on the boundary is comparable modulo  to the current balance and the current balance is less than the balance on the boundary, since we need the balance on the segment to be non-positive. That is, we need to be able to find a number of numbers for each value of the balance that is not less than ours. This can be done either by data structure, or notice that the balance takes only  different values, then you can find the number of numbers not less on the prefix for .", "solution": "tst = int(input())\nfor _ in range(tst):\n    n = int(input())\n    s = input()\n    f = [0 for i in range(3)]\n    cur_bal = n\n    cnt_bal = [0 for i in range(2 * n + 1)]\n    cnt_bal[cur_bal] += 1\n    f[cur_bal % 3] += 1\n    ans = 0\n    for i in range(n):\n        #print(f)\n        #print(cur_bal, ans)\n        new_bal = cur_bal\n        if s[i] == '-':\n            new_bal -= 1\n            f[new_bal % 3] += cnt_bal[new_bal]\n            ans += f[new_bal % 3]\n            cnt_bal[new_bal] += 1\n            f[new_bal % 3] += 1\n        else:\n            f[new_bal % 3] -= cnt_bal[new_bal]\n            new_bal += 1\n            ans += f[new_bal % 3]\n            cnt_bal[new_bal] += 1\n            f[new_bal % 3] += 1\n        cur_bal = new_bal\n    print(ans)", "interactive": false, "noSolution": false, "noTutorial": false}