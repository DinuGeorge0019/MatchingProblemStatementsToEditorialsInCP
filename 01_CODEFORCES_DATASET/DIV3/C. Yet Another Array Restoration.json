{"link": "https://codeforces.com//contest/1409/problem/C", "problemId": "716927", "shortId": "1409C", "contest_number": "1409", "name": "C. Yet Another Array Restoration", "statement": "We have a secret array. You don't know this array and you have to restore it. However, you know some facts about this array:  The array consists of   (greater than ) integers.  The array contains two elements  and  (these elements are  for you) such that .  If you sort the array in increasing order (such that ), differences between all adjacent (consecutive) elements are equal (i.e. . It can be proven that such an array always exists under the constraints given below.Among all possible arrays that satisfy the given conditions, we ask you to restore one which has the  maximum element. In other words, you have to minimize .You have to answer  independent test cases.", "input": "The first line of the input contains one integer  () \u2014 the number of test cases. Then  test cases follow. The only line of the test case contains three integers ,  and  (; ) \u2014 the length of the array and two elements that are present in the array, respectively.", "output": "For each test case, print the answer:  integers  (), where  is the -th element of the required array. If there are several answers, you can print any (it also means that the order of elements doesn't matter). It can be proven that such an array always exists under the given constraints.", "tutorial": "The only fact required to solve this problem is just to notice that the answer array is just an arithmetic progression. After that, we can fix the first element , fix the difference , construct the array , check if  and  are in this array and, if yes, update the answer with . This is  solution.There are faster solutions, though. Other author's solution is  but I didn't want to make this problem harder, so I allowed  solutions.It is obvious that the difference of the progression is some divisor of . Let it be . Let's add some elements starting from  \"to the left\" ( and so on) and stop if we reach  elements or the next element is less than . If we didn't find  among these elements, just skip this difference, it is useless for us. Otherwise, if we have less than  elements, let's add  and so on until we get  elements. And then update the answer with the maximum element of the array.There is also a solution in  with some greedy observations :)", "solution": "// Author: Ivan Kazmenko (gassa@mail.ru)\nmodule solution;\nimport std.algorithm;\nimport std.conv;\nimport std.range;\nimport std.stdio;\nimport std.string;\n\nvoid main ()\n{\n\tauto tests = readln.strip.to !(int);\n\tforeach (test; 0..tests)\n\t{\n\t\tint n, x, y;\n\t\treadf !(\" %s %s %s\") (n, x, y);\n\t\tauto answer = int.max.repeat (n).array;\n\t\tforeach (start; 1..51)\n\t\t{\n\t\t\tforeach (d; 1..51)\n\t\t\t{\n\t\t\t\tauto a = iota (start, start + d * n, d).array;\n\t\t\t\tif (a.canFind (x) && a.canFind (y))\n\t\t\t\t{\n\t\t\t\t\tif (answer.back > a.back)\n\t\t\t\t\t{\n\t\t\t\t\t\tanswer = a;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\twritefln !(\"%(%s %)\") (answer);\n\t}\n}", "interactive": false, "noSolution": false, "noTutorial": false}