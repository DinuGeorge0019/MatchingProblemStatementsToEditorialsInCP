{"link": "https://codeforces.com//contest/1512/problem/A", "problemId": "953474", "shortId": "1512A", "contest_number": "1512", "name": "A. Spy Detected ", "statement": "You are given an array  consisting of  () positive integers. It is known that in this array, all the numbers except one are the same (for example, in the array  all numbers except one are equal to ).Print the index of the element that does not equal others. The numbers in the array are numbered from one.", "input": "The first line contains a single integer  (). Then  test cases follow. The first line of each test case contains a single integer  ()\u00a0\u2014 the length of the array . The second line of each test case contains  integers  (). It is guaranteed that all the numbers except one in the  array are the same.", "output": "For each test case, output a single integer\u00a0\u2014 the index of the element that is not equal to others.", "tutorial": "To find a number that differs from the rest of the numbers in the array, you need to iterate through the array, maintaining two pairs of numbers $$$(x_1, c_1)$$$ and $$$(x_2, c_2)$$$, where $$$x_i$$$ is a number from the array, $$$c_i$$$ is how many times the number $$$x_i$$$ occurs in the array.Then, to get an answer, you need to find the position of the $$$x_i$$$ that occurs in the array exactly once (i.e. $$$c_i = 1$$$).", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long ll;\n\nvoid solve() {\n    int n;\n    cin >> n;\n    vector<int> v(n);\n    for (int &e : v) {\n        cin >> e;\n    }\n    vector<int> a = v;\n    sort(a.begin(), a.end());\n    for (int i = 0; i < n; i++) {\n        if (v[i] != a[1]) {\n            cout << i + 1 << \"\\n\";\n        }\n    }\n}\n\nint main() {\n    int n;\n    cin >> n;\n    while (n--) {\n        solve();\n    }\n    return 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}