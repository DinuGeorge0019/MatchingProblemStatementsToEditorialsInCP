{"link": "https://codeforces.com//contest/978/problem/G", "problemId": "182882", "shortId": "978G", "contest_number": "978", "name": "G. Petya's Exams", "statement": "Petya studies at university. The current academic year finishes with  special days. Petya needs to pass  exams in those special days. The special days in this problem are numbered from  to .There are three values about each exam:   \u2014 the day, when questions for the -th exam will be published,   \u2014 the day of the -th exam (),   \u2014 number of days Petya needs to prepare for the -th exam. For the -th exam Petya should prepare in days between  and , inclusive. There are three types of activities for Petya in each day: to spend a day doing nothing (taking a rest), to spend a day passing exactly one exam or to spend a day preparing for exactly one exam. So he can't pass/prepare for multiple exams in a day. He can't mix his activities in a day. If he is preparing for the -th exam in day , then .It is allowed to have breaks in a preparation to an exam and to alternate preparations for different exams in consecutive days. So preparation for an exam is not required to be done in consecutive days.Find the schedule for Petya to prepare for all exams and pass them, or report that it is impossible.", "input": "The first line contains two integers  and   \u2014 the number of days and the number of exams. Each of the following  lines contains three integers , ,   \u2014 the day, when questions for the -th exam will be given, the day of the -th exam, number of days Petya needs to prepare for the -th exam.  Guaranteed, that all the exams will be in different days. Questions for different exams can be given in the same day. It is possible that, in the day of some exam, the questions for other exams are given.", "output": "If Petya can not prepare and pass all the exams, print . In case of positive answer, print  integers, where the -th number is:   , if the -th day is a day of some exam (recall that in each day no more than one exam is conducted),  zero, if in the -th day Petya will have a rest,   (), if Petya will prepare for the -th exam in the day  (the total number of days Petya prepares for each exam should be  equal to the number of days needed to prepare for it).Assume that the exams are numbered in order of appearing in the input, starting from .If there are multiple schedules, print any of them.", "tutorial": "If in the current day there is no exam, we should prepare for an exam, for which questions already given, for which we prepare less than needed and which will be before other remaining exams.For this we will use array , where  equals to the number of days, which we already prepared for exam . Initially, array  consists of zeroes.Let's iterate through the days. Suppose exam  is in the current day. If , we did not have time to prepare for it and we should print . In the other case, in this day we will pass the exam .In the other case, let iterate through all exams and choose exam , for which we need still to prepare (i. e. ), for which already given the questions, and which will be before other remaining exams. If there is no such exam, we should relax in this day, else, in this day we should prepare for exam . Also, we should increase  by one.", "solution": "#include <bits/stdc++.h>\n#define DIM 107\nusing namespace std;\n\nlong long n,m,d[DIM],c[DIM],k[DIM],is[DIM];\n\nvector<long long> blt[DIM];\n\npriority_queue<pair<long long,long long>,vector<pair<long long,long long> >,greater<pair<long long,long long> > > q;\n\nint main()\n{\n    cin>>n>>m;\n\n    for(int i = 1;i <= m;++i)\n    {\n        long long s;\n        cin>>s>>d[i]>>c[i];\n        blt[s].push_back(i);\n        is[d[i]] = i;\n    }\n\n    vector<long long> ans;\n    for(int i = 1; i <= n; ++i)\n    {\n       // cout<<i<<' ';\n        for(auto j:blt[i])\n            q.push({d[j],j});\n\n      //  cout<<q.size()<<' ';\n        if(is[i]!=0)\n        {\n            if(k[is[i]]<c[is[i]]) return cout<<-1,0;\n           // cout<<m+1<<\"     \";\n            ans.push_back(m+1);\n           // q.pop();\n            continue;\n        }\n\n        while(q.size() && k[q.top().second] == c[q.top().second])\n            q.pop();\n\n        if(q.size() == 0) {ans.push_back(0);\n        //cout<<0<<\"         \";\n        }\n        else\n        {\n            k[q.top().second]++;\n            ans.push_back(q.top().second);\n           // cout<<q.top().second<<\"     \";\n        }\n\n        while(q.size() && k[q.top().second] == c[q.top().second])\n            q.pop();\n    }\n\n    for(auto i:ans) cout<<i<<' ';\n    return 0;\n}\n", "interactive": false, "noSolution": false, "noTutorial": false}