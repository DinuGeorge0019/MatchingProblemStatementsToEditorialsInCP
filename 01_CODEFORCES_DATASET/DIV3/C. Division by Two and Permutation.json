{"link": "https://codeforces.com//contest/1624/problem/C", "problemId": "1256439", "shortId": "1624C", "contest_number": "1624", "name": "C. Division by Two and Permutation", "statement": "You are given an array  consisting of  positive integers. You can perform operations on it.In one operation you can replace any element of the array  with , that is, by an integer part of dividing  by  (rounding down).See if you can apply the operation some number of times (possible ) to make the array  become a permutation of numbers from  to \u00a0\u2014that is, so that it contains all numbers from  to , each exactly once.For example, if , , then the answer is yes. You could do the following:  Replace  with , then .  Replace  with , then .  Replace  with , then .  Replace  with , then . ", "input": "The first line of input data contains an integer  ()\u00a0\u2014the number of test cases. Each test case contains exactly two lines. The first one contains an integer  (), the second one contains integers  ().", "output": "For each test case, output on a separate line:    if you can make the array  become a permutation of numbers from  to ,   otherwise.  You can output  and  in any case (for example, strings , ,  and  will be recognized as a positive response).", "tutorial": "Let's sort the array  in descending order of the values of its elements. Then let's create a logical array , where  will have the value  if we already got element  of the permutation we are looking for, and the value  otherwise.We loop through the elements of the array  and assign . We'll divide  by  as long as it exceeds  or as long as  is .   If it turns out that , then all the numbers that could be obtained from  have already been obtained before. Since each element of the array  must produce a new value from  to , the answer cannot be constructed \u2014 output .  Otherwise, assign  a value of  \u2014 this means that the number , which is an element of the permutation, we will get exactly from the original number . After processing all elements of the array  we can output .", "solution": "#include<bits/stdc++.h>\nusing namespace std;\n\nvoid solve(){\n    int n;\n    cin >> n;\n    vector<int>a(n), used(n + 1, false);\n    for(auto &i : a) cin >> i;\n    sort(a.begin(), a.end(), [] (int a, int b) {\n        return a > b;\n    });\n    bool ok = true;\n    for(auto &i : a){\n        int x = i;\n        while(x > n or used[x])  x /= 2;\n        if(x > 0) used[x] = true;\n        else ok = false;\n    }\n    cout << (ok ? \"YES\" : \"NO\") << '\\n';\n\n}\n\nint main(){\n    ios_base :: sync_with_stdio(false);\n    cin.tie(nullptr);\n    int t;\n    cin >> t;\n    while(t--){\n        solve();\n    }\n    return 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}