{"link": "https://codeforces.com//contest/1702/problem/G1", "problemId": "1456432", "shortId": "1702G1", "contest_number": "1702", "name": "G1. Passable Paths  easy version ", "statement": "Polycarp grew a tree from  vertices. We remind you that a tree of  vertices is an undirected connected graph of  vertices and  edges that does not contain cycles.He calls a set of vertices  if there is such a path in the tree that passes through each vertex of this set without passing through any edge twice. The path can visit other vertices (not from this set).In other words, a set of vertices is called  if there is a simple path that passes through all the vertices of this set (and possibly some other).For example, for a tree below sets , ,  are , and ,  are not.  Polycarp asks you to answer  queries. Each query is a set of vertices. For each query, you need to determine whether the corresponding set of vertices is .", "input": "The first line of input contains a single integer  () \u2014 number of vertices. Following  lines a description of the tree.. Each line contains two integers  and  (, ) \u2014 indices of vertices connected by an edge. Following line contains single integer  ()\u00a0\u2014 number of queries. The following  lines contain descriptions of sets. The first line of the description contains an integer  () \u2014 the size of the set. The second line of the description contains  of distinct integers  () \u2014 indices of the vertices of the set. It is guaranteed that the sum of  values for all queries does not exceed .", "output": "Output  lines, each of which contains the answer to the corresponding query. As an answer, output \"\" if the set is , and \"\" otherwise. You can output the answer in any case (for example, the strings \"\", \"\", \"\" and \"\" will be recognized as a positive answer).", "tutorial": "If the answer is , then we can choose a subset of the tree vertices forming a simple path and containing all the vertices of our set. Let's choose the minimum possible path, its ends\u00a0\u2014 vertices from the set. The constraints allow us to answer the query in , hang the tree by one of the ends and check if it is true that there is only one selected vertex that does not have any selected ones in the subtree, if there is one such vertex, then it is \u00a0\u2014 the second end. To make it easier to search for one of the ends, we will hang the tree by any vertex before the queries, calculate their depths and take the deepest of the set.", "solution": "#include <bits/stdc++.h>\n\n#define int long long\n#define pb emplace_back\n#define mp make_pair\n#define x first\n#define y second\n#define all(a) a.begin(), a.end()\n#define rall(a) a.rbegin(), a.rend()\n\ntypedef long double ld;\ntypedef long long ll;\n\nusing namespace std;\n\nmt19937 rnd(143);\n\nconst int inf = 1e15;\nconst int M = 1e9 + 7;\nconst ld pi = atan2(0, -1);\nconst ld eps = 1e-6;\n\nvoid depth(int v, int p, vector<vector<int>> &sl, vector<int> &d){\n    if(p >= 0) d[v] = d[p] + 1;\n    for(int u: sl[v]){\n        if(u == p) continue;\n        depth(u, v, sl, d);\n    }\n}\n\nint dfs(int v, int p, vector<vector<int>> &sl, vector<bool> &chosen){\n    int res = 0;\n    bool lower = false;\n    for(int u: sl[v]){\n        if(u == p) continue;\n        res += dfs(u, v, sl, chosen);\n        lower = lower || chosen[u];\n    }\n    chosen[v] = chosen[v] || lower;\n    if(chosen[v] && !lower) res = 1;\n    return res;\n}\n\nvoid solve(){\n    int n;\n    cin >> n;\n    vector<vector<int>> sl(n);\n    for(int i = 1; i < n; ++i){\n        int u, v;\n        cin >> u >> v;\n        sl[--u].push_back(--v);\n        sl[v].push_back(u);\n    }\n    vector<int> d(n);\n    depth(0, -1, sl, d);\n    int q;\n    cin >> q;\n    for(; q; --q){\n        int k;\n        cin >> k;\n        vector<bool> chosen(n);\n        int mx = 0;\n        for(int i = 0; i < k; ++i){\n            int p;\n            cin >> p;\n            --p;\n            if(d[p] > d[mx]) mx = p;\n            chosen[p] = true;\n        }\n        int leaves = dfs(mx, -1, sl, chosen);\n        if(leaves == 1) cout << \"YES\\n\";\n        else cout << \"NO\\n\";\n    }\n}\n\nbool multi = false;\n\nsigned main() {\n    int t = 1;\n    if (multi)cin >> t;\n    for (; t; --t) {\n        solve();\n        //cout << endl;\n    }\n    return 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}