{"link": "https://codeforces.com//contest/1690/problem/F", "problemId": "1423054", "shortId": "1690F", "contest_number": "1690", "name": "F. Shifting String", "statement": "Polycarp found the string  and the permutation . Their lengths turned out to be the same and equal to .A permutation of  elements\u00a0\u2014 is an array of length , in which every integer from  to  occurs exactly once. For example,  and  are permutations, but ,  and  are not.In one operation he can multiply  by , so he replaces  with string , in which for any  from  to  it is true that . For example, with  and , after operation the string will turn to .Polycarp wondered after how many operations the string would become equal to its initial value for the first time. Since it may take too long, he asks for your help in this matter.It can be proved that the required number of operations always exists. It can be very large, so use a 64-bit integer type. ", "input": "The first line of input contains one integer  () \u2014 the number of test cases in input. The first line of each case contains single integer  () \u2014 the length of string and permutation. The second line of each case contains a string  of length , containing lowercase Latin letters. The third line of each case contains  integers\u00a0\u2014 permutation  (), all  are different.", "output": "Output  lines, each of which contains the answer to the corresponding test case of input. As an answer output single integer\u00a0\u2014 the minimum number of operations, after which the string  will become the same as it was before operations.", "tutorial": "To begin with, let's understand why the string will return to its original form. In fact, the graph that the permutation sets consists of simple cycles and it turns out that after a certain number of operations, each character will return to its place.Consider each cycle as a string that is cyclically shifted every turn. It may seem that the answer is \u00a0\u2014  (the smallest common multiple) of the cycle lengths, but to become equal to the initial string, it is not necessary to go through the entire cycle. The constraints allow us to calculate the length of the minimum suitable shift  in , where  is the length of the cycle, so just iterate over the desired shift. Note that after  operations, the cycle will return to its original form and this will happen again after  operations.The answer will be  of all , since each cycle individually comes to its original form after the number of operations is a multiple of its . ", "solution": "def gcd(a, b):\n    if b == 0:\n        return a;\n    return gcd(b, a % b)\n    \n    \ndef shift(s):\n    for i in range(1, len(s) + 1):\n        if s == s[i:] + s[:i]:\n            return i\n    \n \ndef solve():\n    n = int(input())\n    s = input()\n    p = [int(x)-1 for x in input().split()]\n    used = [False] * n\n    ans = 1\n    i = 0\n    while i < n:\n        ss = ''\n        while not used[i]:\n            ss += s[i]\n            used[i] = True\n            i = p[i];\n        i += 1\n        if len(ss) == 0:\n            continue\n        ln = shift(ss)\n        ans = ans * ln // gcd(ans, ln)\n    print(ans)\n    \n \nt = int(input())\nfor _ in range(t):\n    solve()", "interactive": false, "noSolution": false, "noTutorial": false}