{"link": "https://codeforces.com//contest/1772/problem/E", "problemId": "1699972", "shortId": "1772E", "contest_number": "1772", "name": "E. Permutation Game", "statement": "Two players are playing a game. They have a permutation of integers , , ...,  (a permutation is an array where each element from  to  occurs exactly once). The permutation is not sorted in either ascending or descending order (i.\u2009e. the permutation does not have the form  or ).Initially, all elements of the permutation are colored red. The players take turns. On their turn, the player can do one of three actions:  rearrange the elements of the permutation in such a way that all  elements keep their positions (note that  elements can be swapped with each other, but it's not obligatory);  change the color of one red element to blue;  skip the turn. The first player wins if the permutation is sorted in ascending order (i.\u2009e. it becomes ). The second player wins if the permutation is sorted in descending order (i.\u2009e. it becomes ). If the game lasts for  turns and nobody wins, it ends in a draw.Your task is to determine the result of the game if both players play optimally.", "input": "The first line contains a single integer  ()\u00a0\u2014 the number of test cases. The first line of each test case contains a single integer  ()\u00a0\u2014 the size of the permutation. The second line contains  integers \u00a0\u2014 the permutation itself. The permutation  is not sorted in either ascending or descending order. The sum of  over all test cases does not exceed .", "output": "For each test case, print  if the first player wins,  if the second player wins, and  if the result is a draw.", "tutorial": "Note that it makes no sense to use the first type of operation if it does not lead to an instant win, because the opponent can return the previous state of the array with their next move.So the winner is the one who has time to color \"their\" elements in blue first. Let's denote  as the number of elements that only the first player needs to color,  as the number of elements only the second player needs to color, \u00a0\u2014 both players needs to color.To win, the first player needs to have time to paint  elements, and they have no more than  moves to do it, because otherwise the second player can prevent the win of the first player. So the winning condition for the first player is . Similarly, for the second player, with the only difference that they have  move less (because they go second), which means the condition is . If none of these conditions are met, then neither player has a winning strategy, which means they will both reduce the game to a draw.", "solution": "for tc in range(int(input())):\n  n = int(input())\n  p = list(map(int, input().split()))\n  a, b, c = 0, 0, 0\n  for i in range(n):\n    if p[i] != i + 1 and p[i] != n - i:\n      c += 1\n    elif p[i] != i + 1:\n      a += 1\n    elif p[i] != n - i:\n      b += 1\n  if a + c <= b:\n    print(\"First\")\n  elif b + c < a:\n    print(\"Second\")\n  else:\n    print(\"Tie\")", "interactive": false, "noSolution": false, "noTutorial": false}