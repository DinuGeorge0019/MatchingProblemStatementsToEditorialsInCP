{"link": "https://codeforces.com//contest/1335/problem/C", "problemId": "592973", "shortId": "1335C", "contest_number": "1335", "name": "C. Two Teams Composing", "statement": "You have  students under your control and you have to compose  consisting of some subset of your students. Each student had his own skill, the -th student skill is denoted by an integer  (different students can have the same skills).So, about the teams. Firstly, these two teams should have the same size. Two more constraints:  The first team should consist of students with  skills (i.e. all skills in the first team are unique).  The second team should consist of students with  skills (i.e. all skills in the second team are equal). Note that it is permissible that some student of the first team has the same skill as a student of the second team.Consider some examples (skills are given):  ,  is not a good pair of teams because sizes should be the same;  ,  is not a good pair of teams because the first team should not contain students with the same skills;  ,  is not a good pair of teams because the second team should contain students with the same skills;  ,  is a good pair of teams;  ,  is a good pair of teams. Your task is to find the maximum possible size  for which it is possible to compose a valid pair of teams, where each team size is  (skills in the first team needed to be unique, skills in the second team should be the same between them). A student cannot be part of more than one team.You have to answer  independent test cases.", "input": "The first line of the input contains one integer  () \u2014 the number of test cases. Then  test cases follow. The first line of the test case contains one integer  () \u2014 the number of students. The second line of the test case contains  integers  (), where  is the skill of the -th student. Different students can have the same skills. It is guaranteed that the sum of  over all test cases does not exceed  ().", "output": "For each test case, print the answer \u2014 the maximum possible size  for which it is possible to compose a valid pair of teams, where each team size is .", "tutorial": "Let the number of students with the skill  is  and the number of different skills is . Then the size of the first team can not exceed  and the size of the second team can not exceed . So the answer is not greater than the minimum of these two values. Moreover, let's take a look at the skill with a maximum value of . Then there are two cases: all students with this skill go to the second team then the sizes of teams are at most  and  correspondingly. Otherwise, at least one student with this skill goes to the first team and the sizes are at most  and  correspondingly. So the answer is .Time complexity: .", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n#ifdef _DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n#endif\n\t\n\tint t;\n\tcin >> t;\n\twhile (t--) {\n\t\tint n;\n\t\tcin >> n;\n\t\tvector<int> cnt(n + 1);\n\t\tfor (int i = 0; i < n; ++i) {\n\t\t\tint x;\n\t\t\tcin >> x;\n\t\t\t++cnt[x];\n\t\t}\n\t\tint mx = *max_element(cnt.begin(), cnt.end());\n\t\tint diff = n + 1 - count(cnt.begin(), cnt.end(), 0);\n\t\tcout << max(min(mx - 1, diff), min(mx, diff - 1)) << endl;\n\t}\n\t\n\treturn 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}