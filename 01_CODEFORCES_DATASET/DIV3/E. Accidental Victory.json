{"link": "https://codeforces.com//contest/1490/problem/E", "problemId": "898527", "shortId": "1490E", "contest_number": "1490", "name": "E. Accidental Victory", "statement": "A championship is held in Berland, in which  players participate. The player with the number  has  () tokens.The championship consists of  games, which are played according to the following rules:  in each game, two random players with non-zero tokens are selected;  the player with more tokens is considered the winner of the game (in case of a tie, the winner is chosen randomly);  the winning player takes all of the loser's tokens; The last player with non-zero tokens is the winner of the championship.All random decisions that are made during the championship are made equally probable and independently.For example, if , , then one of the options for the game (there could be other options) is:   during the first game, the first and fourth players were selected. The fourth player has more tokens, so he takes the first player's tokens. Now ;  during the second game, the fourth and third players were selected. They have the same number of tokens, but in a random way, the third player is the winner. Now ;  during the third game, the second and third players were selected. The third player has more tokens, so he takes the second player's tokens. Now ;  the third player is declared the winner of the championship. Championship winners will receive personalized prizes. Therefore, the judges want to know in advance which players have a chance of winning, i.e have a non-zero probability of winning the championship. You have been asked to find all such players. ", "input": "The first line contains one integer  ()\u00a0\u2014 the number of test cases. Then  test cases follow. The first line of each test case consists of one positive integer  ()\u00a0\u2014 the number of players in the championship. The second line of each test case contains  positive integers  ()\u00a0\u2014 the number of tokens the players have. It is guaranteed that the sum of  over all test cases does not exceed . ", "output": "For each test case, print the number of players who have a nonzero probability of winning the championship. On the next line print the numbers of these players in  order. Players are numbered starting from one in the order in which they appear in the input. ", "tutorial": "How can a player be checked if he can win the championship? Obviously, he must participate in all the games (otherwise we will increase the number of tokens of the opponents). So you can sort out all the people and play greedily with the weakest ones. Such a check will work in linear time after sorting, so we got a solution for .The simplest solution to this problem is\u00a0\u2014 binary search for the answer. We will sort all the players by the number of tokens they have. Let's prove that if player  can win, then player  can also win (the numbers are dealt after sorting). If the player  was able to win, then based on the strategy above, he was able to defeat all the players on the prefix . The player  can also defeat all these players since he has at least as many tokens. Now both players have to defeat all opponents with numbers  and the number of chips both players have is equal to the sum of the first  numbers in the array. So if the player  has a strategy, then the player  can use the same strategy.Hence the answer to the problem is\u00a0\u2014 sorted suffix of the input array. You can find this suffix using binary search and linear time checking.Bonus: this problem also has a fully linear (after sorting) solution.", "solution": "def win(pos : int, a : list):\n    power = a[pos]\n    for i in range(len(a)):\n        if i == pos:\n            continue\n        if power < a[i]:\n            return False\n        power += a[i]\n    return True\n\nt = int(input())\n\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    b = a.copy()\n    a.sort()\n\n    l = -1\n    r = n - 1\n    while r - l > 1:\n        m = (l + r) // 2\n        if (win(m, a)):\n            r = m\n        else:\n            l = m\n\n    winIds = []\n    for i in range(n):\n        if b[i] >= a[r]:\n            winIds.append(i + 1)\n\n    print(len(winIds))\n    print(*winIds)", "interactive": false, "noSolution": false, "noTutorial": false}