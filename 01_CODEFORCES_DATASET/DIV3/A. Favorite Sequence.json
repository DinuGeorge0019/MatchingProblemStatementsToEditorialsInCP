{"link": "https://codeforces.com//contest/1462/problem/A", "problemId": "833569", "shortId": "1462A", "contest_number": "1462", "name": "A. Favorite Sequence", "statement": "Polycarp has a favorite sequence  consisting of  integers. He wrote it out on the whiteboard as follows:  he wrote the number  to the left side (at the beginning of the whiteboard);  he wrote the number  to the right side (at the end of the whiteboard);  then as far to the left as possible (but to the right from ), he wrote the number ;  then as far to the right as possible (but to the left from ), he wrote the number ;  Polycarp continued to act as well, until he wrote out the entire sequence on the whiteboard.      For example, if  and , then Polycarp will write a sequence on the whiteboard .You saw the sequence written on the whiteboard and now you want to restore Polycarp's favorite sequence.", "input": "The first line contains a single positive integer  ()\u00a0\u2014 the number of test cases in the test. Then  test cases follow. The first line of each test case contains an integer  ()\u00a0\u2014 the length of the sequence written on the whiteboard. The next line contains  integers  ()\u00a0\u2014 the sequence written on the whiteboard.", "output": "Output  answers to the test cases. Each answer\u00a0\u2014 is a sequence  that Polycarp wrote out on the whiteboard.", "tutorial": "In this problem, you can implement an algorithm opposite to that given in the condition. Let's maintain two pointers to the left-most and right-most unhandled element. Then, restoring the original array, you:   put the left-most unhandled item in the first position  put the right-most unhandled item in the second position  put the left-most unhandled item in the third position  put the right-most unhandled item in the fourth position  ...  That is, in general, you put the leftmost elements on all odd positions, and the rightmost ones on all even positions. After processing each element, you either move the left pointer forward by one, or the right one backward by one.", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nvoid solve() {\n  int n;\n  cin >> n;\n  vector<int> v(n);\n  for (int &e : v) {\n    cin >> e;\n  }\n  int left = 0, right = n - 1;\n  vector<int> ans(n);\n  for (int i = 0; i < n; i++) {\n    if (i % 2 == 0) {\n      ans[i] = v[left++];\n    } else {\n      ans[i] = v[right--];\n    }\n  }\n  for (int i : ans) {\n    cout << i << \" \";\n  }\n  cout << \"\\n\";\n}\n\nint main() {\n  int t;\n  cin >> t;\n  while (t--) {\n    solve();\n  }\n}", "interactive": false, "noSolution": false, "noTutorial": false}