{"link": "https://codeforces.com//contest/1551/problem/D2", "problemId": "1055224", "shortId": "1551D2", "contest_number": "1551", "name": "D2. Domino  hard version ", "statement": "There's a table of  cells ( rows and  columns). The value of  is even.A domino is a figure that consists of two cells having a common side. It may be horizontal (one of the cells is to the right of the other) or vertical (one of the cells is above the other).You need to place  dominoes on the table so that exactly  of them are horizontal and all the other dominoes are vertical. The dominoes cannot overlap and must fill the whole table.", "input": "The first line contains one integer  () \u2014 the number of test cases. Then  test cases follow. Each test case consists of a single line. The line contains three integers , ,  (, ,  is even) \u2014 the count of rows, columns and horizontal dominoes, respectively.", "output": "For each test case:   print \"\" if it's not possible to place the dominoes on the table in the described way;  otherwise, print \"\" on a separate line, then print  lines so that each of them contains  lowercase letters of the Latin alphabet \u2014 the layout of the dominoes on the table. Each cell of the table must be marked by the letter so that for every two cells having a common side, they are marked by the same letters if and only if they are occupied by the same domino. I.e. both cells of the same domino must be marked with the same letter, but two dominoes that share a side must be marked with different letters. If there are multiple solutions, print any of them. ", "tutorial": "Suppose  and  are even. A necessary and sufficient condition of existence of the answer is that  is even.Let's prove the sufficient condition. If the count of the horizontal dominoes is even, then we can combine them and vertical dominoes to blocks of size  (the number of the vertical dominoes is even, too, if  is even). If  and  are even, we can fill the table with these blocks. The description of the locations of the dominoes may be printed as follows: consider the table is a chessboard where a cell is a block of two dominoes. Consider the leftmost topmost cell of the board is black. If a cell of the board is black, let's mark one of the dominoes of the block with the letter \"\" and the other one with the letter \"\". If a cell of the board is white, let's mark one of the dominoes of the block with the letter \"\" and the other one with the letter \"\". There will be no situation that some two cells of the table are marked with one letter but belong to different dominoes.Let's prove the necessary condition. The number of cells in a column () is even, so the number of cells that belong to vertical dominoes is even because cells of each vertical domino may be either belong to the column or not belong at the same time. So the number of cells that belong to horizontal dominoes is even. Let's cross out all cells that belong to vertical dominoes and let's find the leftmost column having cells that haven't been crossed out. It's the leftmost column with such cells so the pairwise cells of the non-crossed out cells belong to the column to the right of the found one. The number of such cells in the right column is equal to the number of found cells so it's even and the number of found horizontal dominoes is even, too. Let's cross out the found cells and the pairwise cells. The number of non-crossed out cells in the right column will be even. The number of crossed-out horizontal dominoes will be even, too. Let's repeat this procedure until all the dominoes will be crossed out. In every step, we have crossed out the even number of horizontal dominoes, hence the total count of horizontal dominoes is even.Suppose  is odd, hence  is even. In this case, every column contains an odd number of cells, whereas the number of cells that belong to vertical dominoes is even. So the number of cells that belong to horizontal dominoes is odd. Consider the leftmost column and find a cell of it that belongs to a horizontal domino (it must be found because the number of such cells is odd so it isn't equal to ). Let's find the pairwise cell and cross out both cells. Currently, the two columns will have an even number of non-crossed-out cells. Let's repeat the procedure until all columns will have even non-crossed-out cells. We will cross out  cells and  dominoes. So the necessary condition is that the number of horizontal dominoes () is at least .Let's extend the necessary condition with the following condition: the value of  is even. Consider the table that we've become after the previous procedure where each column has exactly one crossed-out cell. Let's start the procedure we've done in the case of even both  and . The procedure can be started on our table because each column of the table has an even number of non-crossed-out cells. As a result of the procedure, we will cross out an even count of horizontal dominoes, so the value of  is even.Let's build an answer if the conditions  and  is even are met. Let's place in the topmost row  horizontal dominoes and mark their cells as follows: the first domino will be marked with \"\", the second one \u2014 with \"\", the third one \u2014 with \"\", and so on. As the result, the region of  rows and  columns will be unfilled. Both values are even, and the value of  is even, too. So let's fill the region as if it's a separate table having even numbers of rows and columns. As it was proved above, it's possible to do. The set of letters used for the region and set of the letters used for the topmost row don't have common elements, so there will be no cells that are marked with one letter but belong to different dominoes.The case of odd  (hence,  is even) is similar to the previous one \u2014 let's transpose the table (it will have  rows and  columns), swap the values of  and , solve the case above and transpose the table back to have  rows and  columns.", "solution": "#include <bits/stdc++.h>\nusing namespace std;\n\nchar field[128][128];\n\nint main()\n{\n\tint t;\n\tcin >> t;\n\twhile (t--)\n\t{\n\t\tint n, m, kh;\n\t\tcin >> n >> m >> kh;\n\t\tint kv = n * m / 2 - kh;\n\t\tif (n & 1)\n\t\t{\n\t\t\tkh -= m / 2;\n\t\t\tif (kh < 0)\n\t\t\t{\n\t\t\t\tcout << \"NO\\n\";\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tfor (int i = 0; i < m / 2; i++)\n\t\t\t\tfield[n - 1][i * 2] = field[n - 1][i * 2 + 1] = ((i & 1) ? 'x' : 'y');\n\t\t}\n\t\telse if (m & 1)\n\t\t{\n\t\t\tkv -= n / 2;\n\t\t\tif (kv < 0)\n\t\t\t{\n\t\t\t\tcout << \"NO\\n\";\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tfor (int i = 0; i < n / 2; i++)\n\t\t\t\tfield[i * 2][m - 1] = field[i * 2 + 1][m - 1] = ((i & 1) ? 'x' : 'y');\n\t\t}\n\t\tif ((kh & 1) || (kv & 1))\n\t\t{\n\t\t\tcout << \"NO\\n\";\n\t\t\tcontinue;\n\t\t}\n\t\tfor(int i = 0; i < n / 2; i++)\n\t\t\tfor (int j = 0; j < m / 2; j++)\n\t\t\t{\n\t\t\t\tif (kh)\n\t\t\t\t{\n\t\t\t\t\tkh -= 2;\n\t\t\t\t\tfield[2 * i][2 * j] = field[2 * i][2 * j + 1] = (((i + j) & 1) ? 'a' : 'b');\n\t\t\t\t\tfield[2 * i + 1][2 * j] = field[2 * i + 1][2 * j + 1] = (((i + j) & 1) ? 'c' : 'd');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tfield[2 * i][2 * j] = field[2 * i + 1][2 * j] = (((i + j) & 1) ? 'a' : 'b');\n\t\t\t\t\tfield[2 * i][2 * j + 1] = field[2 * i + 1][2 * j + 1] = (((i + j) & 1) ? 'c' : 'd');\n\t\t\t\t}\n\t\t\t}\n\n\t\tcout << \"YES\\n\";\n\t\tfor (int i = 0; i < n; i++)\n\t\t{\n\t\t\tfield[i][m] = 0;\n\t\t\tcout << field[i] << '\\n';\n\t\t}\n\t}\n\treturn 0;\n}\n", "interactive": false, "noSolution": false, "noTutorial": false}