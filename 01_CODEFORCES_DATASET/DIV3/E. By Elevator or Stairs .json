{"link": "https://codeforces.com//contest/1249/problem/E", "problemId": "447564", "shortId": "1249E", "contest_number": "1249", "name": "E. By Elevator or Stairs ", "statement": "You are planning to buy an apartment in a -floor building. The floors are numbered from  to  from the bottom to the top. At first for each floor you want to know the minimum total time to reach it from the first (the bottom) floor.Let:   for all  from  to  be the time required to go from the -th floor to the -th one (and from the -th to the -th as well) using the ;   for all  from  to  be the time required to go from the -th floor to the -th one (and from the -th to the -th as well) using the , also there is a value  \u2014 time overhead for elevator usage (you need to wait for it, the elevator doors are too slow!). In one , you can go from the floor you are staying at  to any floor  () in two different ways:  If you are using the stairs, just sum up the corresponding values of . Formally, it will take  time units.  If you are using the elevator, just sum up  and the corresponding values of . Formally, it will take  time units. You can perform as many  as you want (possibly zero).So your task is for each  to determine the minimum total time it takes to reach the -th floor from the -st (bottom) floor.", "input": "The first line of the input contains two integers  and  () \u2014 the number of floors in the building and the time overhead for the elevator rides. The second line of the input contains  integers  (), where  is the time required to go from the -th floor to the -th one (and from the -th to the -th as well) using the stairs. The third line of the input contains  integers  (), where  is the time required to go from the -th floor to the -th one (and from the -th to the -th as well) using the elevator.", "output": "Print  integers , where  is the minimum total time to reach the -th floor from the first floor if you can perform as many  as you want.", "tutorial": "This is easy dynamic programming problem. It is easy to understand that we don't need to go down at all (otherwise your solution will be Dijkstra's algorithm, not dynamic programming). Let  be the minimum required time to reach the floor  if we not in the elevator right now and  be the minimum required time to reach the floor  if we in the elevator right now.Initially, all values  are , except  and .Transitions are pretty easy:    (we was not in the elevator and going to the next floor using stairs);   (we was in the elevator and going to the next floor using stairs);   (we was not in the elevator and going to the next floor using elevator);   (we was in the elevator and going to the next floor using elevator). The answer for the -th floor is .Time complexity: .", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int INF = 1e9;\n\nint main() {\n#ifdef _DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n#endif\n\t\n\tint n, c;\n\tcin >> n >> c;\n\tvector<int> a(n - 1), b(n - 1);\n\tfor (int i = 0; i < n - 1; ++i) {\n\t\tcin >> a[i];\n\t}\n\tfor (int i = 0; i < n - 1; ++i) {\n\t\tcin >> b[i];\n\t}\n\tvector<vector<int>> dp(n, vector<int>(2, INF));\n\tdp[0][0] = 0, dp[0][1] = c;\n\tfor (int i = 0; i < n - 1; ++i) {\n\t\tdp[i + 1][0] = min(dp[i + 1][0], dp[i][1] + a[i]);\n\t\tdp[i + 1][0] = min(dp[i + 1][0], dp[i][0] + a[i]);\n\t\tdp[i + 1][1] = min(dp[i + 1][1], dp[i][1] + b[i]);\n\t\tdp[i + 1][1] = min(dp[i + 1][1], dp[i][0] + b[i] + c);\n\t}\n\t\n\tfor (int i = 0; i < n; ++i) {\n\t\tcout << min(dp[i][0], dp[i][1]) << \" \";\n\t}\n\tcout << endl;\n\t\n\treturn 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}