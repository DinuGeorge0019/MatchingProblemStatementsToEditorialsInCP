{"link": "https://codeforces.com//contest/1619/problem/H", "problemId": "1234629", "shortId": "1619H", "contest_number": "1619", "name": "H. Permutation and Queries", "statement": "You are given a permutation  of  elements. A permutation of  elements is an array of length  containing each integer from  to  exactly once. For example,  and  are permutations, but  and  are not permutations. You should perform  queries.There are two types of queries:     \u2014 swap  and .     \u2014 print the number that  will become if we assign   times. ", "input": "The first line contains two integers  and  (). The second line contains  integers . Each of the next  lines contains three integers. The first integer is  () \u2014 type of query. If , then the next two integers are  and  (; ) \u2014 first-type query. If , then the next two integers are  and  () \u2014 second-type query. It is guaranteed that there is at least one second-type query.", "output": "For every second-type query, print one integer in a new line \u2014 answer to this query.", "tutorial": "Let's compute an array  of  integers \u2014 answers to all possible second-type queries with , . Now, if we have to perform any second-type query, we can split it into at most  queries with  and at most  queries with .Let's also compute an array  of  integers \u2014 reverse permutation. If , then .To perform any first-type query, we should recompute ,  and . We can swap  and  in the array  and  and  in the array  No more than  elements will be changed in the array . These are elements with indexes ( elements) and ( elements). We can recompute  and then assign  and   times. Similarly for .Time complexity: .", "solution": "#include <bits/stdc++.h>\n//#define int long long\n#define ld long double\n#define x first\n#define y second\n#define pb push_back\n \nusing namespace std;\nconst int Q = 100;\n \nint n, q, p[100005], r[100005], a[100005];\n \nint32_t main()\n{\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.tie(0);\n \n    cin >> n >> q;\n \n    for(int i = 0; i < n; i++)\n    {\n        cin >> p[i];\n        p[i]--;\n    }\n \n    for(int i = 0; i < n; i++)\n        r[p[i]] = i;\n \n    for(int i = 0; i < n; i++)\n    {\n        int x = i;\n \n        for(int j = 0; j < Q; j++)\n            x = p[x];\n \n        a[i] = x;\n    }\n \n    while(q--)\n    {\n        int t, x, y;\n        cin >> t >> x >> y;\n \n        if(t == 2)\n        {\n            x--;\n \n            while(y >= Q)\n            {\n                y -= Q;\n                x = a[x];\n            }\n \n            while(y--)\n                x = p[x];\n \n            cout << x + 1 << \"\\n\";\n        }\n        else\n        {\n            x--;\n            y--;\n \n            swap(r[p[x]], r[p[y]]);\n            swap(p[x], p[y]);\n \n            int ax = x;\n \n            for(int i = 0; i < Q; i++)\n                ax = p[ax];\n \n            int x2 = x;\n \n            for(int i = 0; i < Q; i++)\n            {\n                a[x] = ax;\n                x = r[x];\n                ax = r[ax];\n            }\n \n            swap(x, y);\n \n            ax = x;\n \n            for(int i = 0; i < Q; i++)\n                ax = p[ax];\n \n            x2 = x;\n \n            for(int i = 0; i < Q; i++)\n            {\n                a[x] = ax;\n                x = r[x];\n                ax = r[ax];\n            }\n        }\n    }\n}", "interactive": false, "noSolution": false, "noTutorial": false}