{"link": "https://codeforces.com//contest/1144/problem/A", "problemId": "322482", "shortId": "1144A", "contest_number": "1144", "name": "A. Diverse Strings", "statement": "A string is called  if it contains consecutive (adjacent) letters of the Latin alphabet and each letter occurs exactly once. For example, the following strings are diverse: \"\", \"\", \"\" and \"\". The following string are  diverse: \"\", \"\", \"\" and \"\". Note that the letters '' and '' are not adjacent.Formally, consider positions of all letters in the string in the alphabet. These positions should form contiguous segment, i.e. they should come one by one without any gaps. And all letters in the string should be distinct (duplicates are not allowed).You are given a sequence of strings. For each string, if it is diverse, print \"\". Otherwise, print \"\".", "input": "The first line contains integer  (), denoting the number of strings to process. The following  lines contains strings, one string per line. Each string contains only lowercase Latin letters, its length is between  and , inclusive.", "output": "Print  lines, one line per a string in the input. The line should contain \"\" if the corresponding string is diverse and \"\" if the corresponding string is not diverse. You can print each letter in any case (upper or lower). For example, \"\", \"\" and \"\" are all acceptable.", "tutorial": "The string is diverse if it is a permutation of some substring of the Latin alphabet (\"\").In other words, the string is diverse if all letters in it are distinct (we can check it using some structure like  or array of used elements) and if the number of letters between the letter with the maximum alphabet position and the letter with the minimum alphabet position plus one is exactly the length of the string. For example, the position in alphabet of letter '' is one, the position of letter '' is six and so on.", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define forn(i, n) for (int i = 0; i < int(n); i++)\n\nint main() {\n    int n;\n    cin >> n;\n    forn(i, n) {\n        string s;\n        cin >> s;\n        if (set<char>(s.begin(), s.end()).size() == s.length()\n                && *max_element(s.begin(), s.end()) == char(*min_element(s.begin(), s.end()) + (s.length() - 1)))\n            cout << \"Yes\" << endl;\n        else\n            cout << \"No\" << endl;\n    }\n}\n", "interactive": false, "noSolution": false, "noTutorial": false}