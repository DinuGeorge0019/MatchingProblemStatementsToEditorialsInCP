{"link": "https://codeforces.com//contest/1154/problem/C", "problemId": "331479", "shortId": "1154C", "contest_number": "1154", "name": "C. Gourmet Cat", "statement": "Polycarp has a cat and his cat is a real gourmet! Dependent on a day of the week he eats certain type of food:  on Mondays, Thursdays and Sundays he eats ;  on Tuesdays and Saturdays he eats ;  on other days of week he eats . Polycarp plans to go on a trip and already packed his backpack. His backpack contains:   daily rations of ;   daily rations of ;   daily rations of . Polycarp has to choose such day of the week to start his trip that his cat can eat without additional food purchases as long as possible. Print the maximum number of days the cat can eat in a trip without additional food purchases, if Polycarp chooses the day of the week to start his trip optimally.", "input": "The first line of the input contains three positive integers ,  and  () \u2014 the number of daily rations of ,  and  in Polycarps backpack correspondingly.", "output": "Print the maximum number of days the cat can eat in a trip without additional food purchases, if Polycarp chooses the day of the week to start his trip optimally.", "tutorial": "Let the number of rations of fish food be , the number of rations of rabbit stew be  and the number of rations of chicken stakes be  (so we have an array  consisting of  elements).Let  be the maximum number of full weeks cat can eat if the starting day of the trip can be any day of the week. The value of  is .Let's subtract the value  from , and  from  and . We can see that we cannot feed the cat at least one more full week. So the final answer is , where .Now it's time for some good implementation! Of course, you can try to analyze all cases and handle them using ifs or something similar, but I will try to suggest you a good enough way to implement the remaining part of the problem:Let's create an array  of length , where  means the type of the food cat eats during the -th day of the week ( for fish food,  for rabbit stew and  for chicken stake). It will be .Now let's iterate over the day we will start our trip. Let it be . For the current starting day let  be the number of rations cat has eaten already (initially it is zero),  be the current day of the trip (initially it is ) and the array  be the copy of the array . Then let's do the following sequence of the operations, while  is greater than zero: decrease  by one, increase  by one and set  (take it modulo  and add one). After this cycle we can update the answer with the value of .", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n#ifdef _DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n#endif\n\t\n\tvector<int> a(3);\n\tcin >> a[0] >> a[1] >> a[2];\n\t\n\tvector<int> idx({0, 1, 2, 0, 2, 1, 0});\n\t\n\tint full = min({a[0] / 3, a[1] / 2, a[2] / 2});\n\ta[0] -= full * 3;\n\ta[1] -= full * 2;\n\ta[2] -= full * 2;\n\t\n\tint ans = 0;\n\tfor (int start = 0; start < 7; ++start) {\n\t\tint day = start;\n\t\tvector<int> b = a;\n\t\tint cur = 0;\n\t\twhile (b[idx[day]] > 0) {\n\t\t\t--b[idx[day]];\n\t\t\tday = (day + 1) % 7;\n\t\t\t++cur;\n\t\t}\n\t\tans = max(ans, full * 7 + cur);\n\t}\n\t\n\tcout << ans << endl;\n\t\n\treturn 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}