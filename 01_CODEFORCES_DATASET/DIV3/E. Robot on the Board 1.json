{"link": "https://codeforces.com//contest/1607/problem/E", "problemId": "1168762", "shortId": "1607E", "contest_number": "1607", "name": "E. Robot on the Board 1", "statement": "The robot is located on a checkered rectangular board of size  ( rows,  columns). The rows in the board are numbered from  to  from top to bottom, and the columns\u00a0\u2014 from  to  from left to right.The robot is able to move from the current cell to one of the four cells adjacent by side.The sequence of commands  executed by the robot is given. Each command is denoted by one of the symbols '', '', '' or '', and triggers the movement to left, right, down or up, respectively.The robot can start its movement in  cell. The robot executes the commands starting from the first one, strictly in the order in which they are listed in . If the robot moves beyond the edge of the board, it falls and breaks. A command that causes the robot to break is  successfully executed.The robot's task is to execute as many commands as possible without falling off the board. For example, on board , if the robot starts a sequence of actions \"\" (\"right\", \"right\", \"down\", \"left\", \"up\", \"up\") from the central cell, the robot will perform one command, then the next command will force him to cross the edge. If the robot starts moving from the cell  (second row, first column) then all commands will be executed successfully and the robot will stop at the cell  (first row, second column).     Determine the cell from which the robot should start its movement in order to execute as many commands as possible.", "input": "The first line contains an integer  ()\u00a0\u2014 the number of test cases. The next  lines contain descriptions of the test cases. In the description of each test case, the first line contains two integers  and  ()\u00a0\u2014 the height and width of the field that the robot is located on. The second line of the description is a string  consisting solely of characters '', '', '' and ''\u00a0\u2014 the sequence of commands the robot executes. The string has a length from  to  commands. It is guaranteed that the total length of  over all test cases does not exceed .", "output": "Print  lines, each of which contains the answer to the corresponding test case. The answer to the test case are two integers  () and  (), separated by a space\u00a0\u2014 the coordinates of the cell (row number and column number) from which the robot should start moving to perform as many commands as possible. If there are several such cells, you may output any of them.", "tutorial": "Let's look at the answer . Let's see how many commands the robot can execute. Since the robot breaks  goes outside the field, if any command causes it to break, it either leads to its total shift relative to  of exactly  to the left or exactly  to the right, or, similarly, of exactly  up or exactly  down.Denote by  and  the sum of the maximum positive (right, down) and maximum negative (left, up) shifts in the corresponding direction. By adding up the above constraints, we get the fact that the robot will not fall off the board only if  and .Note that the reverse is also true: if both these conditions are satisfied, then starting from the point  where  is the maximum shift along the direction , the robot will not pass any of the board's edges. Thus, it is sufficient to find the number of commands which, when executed, hold the following invariant: The horizontal shift can be calculated as the difference between the number of letters '' and the number of letters '' encountered. Similarly, the vertical shift\u00a0\u2014 as the difference of the numbers of '' and ''. Let's iterate over the sequence of commands, maintaining relevant values of  for all . After executing each command, if the robot goes farther in some direction than ever before, we update the corresponding .Either we reach the end of , or we meet a command after which either  becomes equal to , or  becomes equal to  and the robot breaks, so the previous command was the last one successfully executed. The possible answer is , where the  values are calculated one command before the robot broke.", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n    int t;\n    cin >> t;\n    while (t--) {\n        int n, m;\n        cin >> n >> m;\n        string s;\n        cin >> s;\n\n        int bx = 0, by = 0;\n        int min_bx = 0, max_bx = 0, min_by = 0, max_by = 0;\n        for (char c: s) {\n            if      (c == 'L') min_by = min(min_by, --by);\n            else if (c == 'R') max_by = max(max_by, ++by);\n            else if (c == 'U') min_bx = min(min_bx, --bx);\n            else               max_bx = max(max_bx, ++bx);\n\n            if (max_bx - min_bx >= n) {\n                if (bx == min_bx) min_bx++;\n                break;\n            }\n            if (max_by - min_by >= m) {\n                if (by == min_by) min_by++;\n                break;\n            }\n        }\n\n        cout << 1 - min_bx << ' ' << 1 - min_by << '\\n';\n    }\n}", "interactive": false, "noSolution": false, "noTutorial": false}