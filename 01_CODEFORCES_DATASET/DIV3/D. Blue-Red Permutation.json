{"link": "https://codeforces.com//contest/1607/problem/D", "problemId": "1168761", "shortId": "1607D", "contest_number": "1607", "name": "D. Blue-Red Permutation", "statement": "You are given an array of integers  of length . The elements of the array can be either different or the same. Each element of the array is colored either blue or red. There are no unpainted elements in the array. One of the two operations described below can be applied to an array in a single step:  either you can select any blue element and decrease its value by ;  or you can select any red element and increase its value by . Situations in which there are no elements of some color at all are also possible. For example, if the whole array is colored blue or red, one of the operations becomes unavailable.Determine whether it is possible to make  or more steps such that the resulting array is a permutation of numbers from  to ?In other words, check whether there exists a sequence of steps (possibly empty) such that after applying it, the array  contains in some order all numbers from  to  (inclusive), each exactly once.", "input": "The first line contains an integer  ()\u00a0\u2014 the number of input data sets in the test. The description of each set of input data consists of three lines. The first line contains an integer  ()\u00a0\u2014 the length of the original array . The second line contains  integers , , ...,  ()\u00a0\u2014 the array elements themselves. The third line has length  and consists exclusively of the letters '' and/or '': th character is '' if  is colored blue, and is '' if colored red. It is guaranteed that the sum of  over all input sets does not exceed .", "output": "Print  lines, each of which contains the answer to the corresponding test case of the input. Print  as an answer if the corresponding array can be transformed into a permutation, and  otherwise. You can print the answer in any case (for example, the strings , , , and  will be recognized as a positive answer).", "tutorial": "Note the following fact: if a number  in a permutation was obtained from a blue number and a number  in a permutation was obtained from a red number, and , then by decreasing the blue number and increasing the red number exactly  times each, we will obtain the same permutation in which the two numbers have swapped places. Thus, if a permutation can be obtained at all, some permutation can be obtained by making all the red numbers equal to , and the blue ones equal to , where  is the total count of red numbers.Now consider separately two red numbers  and  such that . If  is produced by increasing  and  is produced by increasing , and in the same time  then , and the following is also true:  and . So we just showed that if an answer exists, it also exists if greater numbers are produced by greater values from the input. The same holds for the blue numbers.Let us sort all elements  by the key , where  the color of -th element (and blue comes before red). It remains to check that for any  from  to  we can get the number  from the -th element of the obtained sorted array. To do this, we iterate through it and check that either '' and  so it can be reduced to , or, symmetrically, '' and .", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define forn(i, n) for (int i = 0; i < int(n); i++)\n\nint main() {\n    int t;\n    cin >> t;\n    forn(tt, t) {\n        int n;\n        cin >> n;\n        vector<int> a(n);\n        forn(i, n)\n            cin >> a[i];\n\n        string c;\n        cin >> c;\n\n        vector<int> l, r;\n        forn(i, n)\n            (c[i] == 'B' ? l : r).push_back(a[i]);\n        sort(l.begin(), l.end());\n        sort(r.begin(), r.end(), greater<int>());\n\n        bool ok = true;\n        forn(i, l.size())\n            if (l[i] < i + 1)\n                ok = false;\n        forn(i, r.size())\n            if (r[i] > n - i)\n                ok = false;\n\n        cout << (ok ? \"YES\" : \"NO\") << '\\n';\n    }\n}", "interactive": false, "noSolution": false, "noTutorial": false}