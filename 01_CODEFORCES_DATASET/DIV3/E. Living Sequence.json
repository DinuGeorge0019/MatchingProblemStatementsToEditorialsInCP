{"link": "https://codeforces.com//contest/1811/problem/E", "problemId": "1864327", "shortId": "1811E", "contest_number": "1811", "name": "E. Living Sequence", "statement": "In Japan, the number  reads like death, so Bob decided to build a .   contains all natural numbers that do not contain the digit . .For example, the number  is part of the sequence , but the numbers ,  are not part of the sequence .Bob realized that he does not know how to quickly search for a particular number by the position  in the sequence, so he asks for your help.For example, if Bob wants to find the number at position  (indexing from ), you need to answer .", "input": "The first line of input data contains a single integer  ()\u00a0\u2014 the number of test cases. In the only line of each test case, there is a single integer  ()\u00a0\u2014 the position Bob is interested in.", "output": "For each test case, print on a separate line the number  in indexing with .", "tutorial": "Note that any number in the sequence can be made up of  possible digits (all digits except ). Then let's find the first digit of the answer, notice that it is just  or , where  (where \u00a0\u2014 the length of the number we're looking for) and \u00a0\u2014 the maximum. Note that  simply corresponds to a digit in the base- numeral system. Why is this so? Because without the first digit we can assemble any numbers with  possible digits, and we can put the digits  except  in the first place. Thus, in the answer, the first digit will be  if  and  if .Note that once the first digit is determined, the rest can be found the same way, since the prefix does not affect anything.", "solution": "#include <iostream>\n#include <cmath>\n#include <cctype>\n#include <vector>\n#include <algorithm>\n#include <set>\n#include <map>\n#include <deque>\n#include <stack>\n#include <unordered_set>\n#include <sstream>\n#include <cstring>\n#include <iomanip>\n#include <queue>\n#include <unordered_map>\n#include <random>\n#include <cfloat>\n#include <chrono>\n#include <bitset>\n#include <complex>\n#include <immintrin.h>\n\nint main() {\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(0);\n\n    int32_t num_tests;\n    std::cin >> num_tests;\n\n    for(int32_t t = 0; t < num_tests; t++) {\n        int64_t k;\n        std::cin >> k;\n\n        std::vector<int32_t> digits;\n        while(k > 0) {\n            digits.push_back(k % 9);\n            k /= 9;\n        }\n        std::reverse(digits.begin(), digits.end());\n\n        for(int32_t i = 0; i < digits.size(); i++)\n            std::cout << (char)(digits[i] < 4 ? (digits[i] + '0') : (digits[i] + '1'));\n        std::cout << \"\\n\";\n    }\n    return 0;\n}\n", "interactive": false, "noSolution": false, "noTutorial": false}