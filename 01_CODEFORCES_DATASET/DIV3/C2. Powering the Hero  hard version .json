{"link": "https://codeforces.com//contest/1800/problem/C2", "problemId": "1805845", "shortId": "1800C2", "contest_number": "1800", "name": "C2. Powering the Hero  hard version ", "statement": ".There is a deck of  cards, each of which is characterized by its power. There are two types of cards:  a hero card, the power of such a card is always equal to ;  a bonus card, the power of such a card is always positive. You can do the following with the deck:  take a card from the top of the deck;  if this card is a bonus card, you can put it  of your bonus deck or discard;  if this card is a hero card, then the power of  card from your bonus deck is added to his power (if it is not empty), after that the hero is added to your army, and the used bonus discards. Your task is to use such actions to gather an army with the maximum possible total power.", "input": "The first line of input data contains single integer  ()\u00a0\u2014 the number of test cases in the test. The first line of each test case contains one integer  ()\u00a0\u2014 the number of cards in the deck. The second line of each test case contains  integers  ()\u00a0\u2014 card powers in top-down order. It is guaranteed that the sum of  over all test cases does not exceed .", "output": "Output  numbers, each of which is the answer to the corresponding test case \u2014 the maximum possible total power of the army that can be achieved.", "tutorial": "To solve it, it should be noted that despite the way the deck with bonuses works, the order in which they will be applied is not important. Then, when we meet the hero card, we just need to add to the answer the maximum of the available bonuses.Constraints make you use structures such as a priority queue to quickly find and extract the maximum.", "solution": "from queue import PriorityQueue\n\n\ndef solve():\n    n = int(input())\n    s = [int(x) for x in input().split()]\n    ans = 0\n    buffs = PriorityQueue()\n    for e in s:\n        if e > 0:\n            buffs.put(-e)\n        elif not buffs.empty():\n            ans -= buffs.get()\n    print(ans)\n\n\nt = int(input())\nfor _ in range(t):\n    solve()", "interactive": false, "noSolution": false, "noTutorial": false}