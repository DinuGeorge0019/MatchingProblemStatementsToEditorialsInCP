{"link": "https://codeforces.com//contest/1118/problem/D1", "problemId": "300358", "shortId": "1118D1", "contest_number": "1118", "name": "D1. Coffee and Coursework  Easy version ", "statement": ".Polycarp has to write a coursework. The coursework consists of  pages.Polycarp also has  cups of coffee. The coffee in the -th cup has  caffeine in it. Polycarp can drink some cups of coffee (each one no more than once). He can drink cups in . Polycarp drinks each cup  and  (i.e. he cannot split any cup into several days).Surely, courseworks are not usually being written in a single day (in a perfect world of Berland, at least). Some of them require multiple days of hard work.Let's consider some day of Polycarp's work. Consider Polycarp drinks  cups of coffee during this day and caffeine dosages of cups Polycarp drink during this day are . Then the first cup he drinks gives him energy to write  pages of coursework, the second cup gives him energy to write  pages, the third cup gives him energy to write  pages, ..., the -th cup gives him energy to write  pages.If Polycarp doesn't drink coffee during some day, he cannot write coursework at all that day.Polycarp has to finish his coursework as soon as possible (spend the minimum number of days to do it). Your task is to find out this number of days or say that it is impossible.", "input": "The first line of the input contains two integers  and  (, ) \u2014 the number of cups of coffee and the number of pages in the coursework. The second line of the input contains  integers  (), where  is the caffeine dosage of coffee in the -th cup.", "output": "If it is impossible to write the coursework, print . Otherwise print the minimum number of days Polycarp needs to do it.", "tutorial": "Since the number of days doesn't exceed , let's iterate over this value (from  to ). So now we have to check (somehow), if the current number of days is enough to write a coursework.Let the current number of days be . The best way to distribute first cups of coffee for each day is to take  maximums in the array. Then we have to distribute second cups for each day. Let's also take the next  maximums in the remaining array, and so on.How do we can calculate such a thing easily? Let's sort the array  in the reversed order (before iterating over all numbers of days), then the following formula will work fine for the current number of days : .So if the value of the formula above is greater than or equal to  then the current number of days is enough. If there is no any suitable number of days, the answer is .", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n#ifdef _DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n#endif\n\t\n\tint n, m;\n\tcin >> n >> m;\n\t\n\tvector<int> a(n);\n\tfor (int i = 0; i < n; ++i) {\n\t\tcin >> a[i];\n\t}\n\tsort(a.rbegin(), a.rend());\n\t\n\tfor (int i = 1; i <= n; ++i) {\n\t\tint sum = 0;\n\t\tfor (int j = 0; j < n; ++j) {\n\t\t\tsum += max(a[j] - j / i, 0);\n\t\t}\n\t\tif (sum >= m) {\n\t\t\tcout << i << endl;\n\t\t\treturn 0;\n\t\t}\n\t}\n\t\n\tcout << -1 << endl;\n\t\n\treturn 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}