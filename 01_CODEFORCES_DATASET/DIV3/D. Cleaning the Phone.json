{"link": "https://codeforces.com//contest/1475/problem/D", "problemId": "877136", "shortId": "1475D", "contest_number": "1475", "name": "D. Cleaning the Phone", "statement": "Polycarp often uses his smartphone. He has already installed  applications on it. Application with number  takes up  units of memory.Polycarp wants to free at least  units of memory (by removing some applications).Of course, some applications are more important to Polycarp than others. He came up with the following scoring system\u00a0\u2014 he assigned an integer  to each application:   \u00a0\u2014 regular application;  \u00a0\u2014 important application. According to this rating system, his phone has  convenience points.Polycarp believes that if he removes applications with numbers , then he will free  units of memory and lose  convenience points.For example, if , , , , then Polycarp can uninstall the following application sets (not all options are listed below):   applications with numbers  and . In this case, it will free  units of memory and lose  convenience points;  applications with numbers  and . In this case, it will free  units of memory and lose  convenience points.  applications with numbers  and . In this case, it will free  memory units and lose  convenience points. Help Polycarp, choose a set of applications, such that if removing them will free at least  units of memory and lose the minimum number of convenience points, or indicate that such a set does not exist.", "input": "The first line contains one integer  ()\u00a0\u2014 the number of test cases. Then  test cases follow. The first line of each test case contains two integers  and  (, )\u00a0\u2014 the number of applications on Polycarp's phone and the number of memory units to be freed. The second line of each test case contains  integers  ()\u00a0\u2014 the number of memory units used by applications. The third line of each test case contains  integers  ()\u00a0\u2014 the convenience points of each application. It is guaranteed that the sum of  over all test cases does not exceed .", "output": "For each test case, output on a separate line:    , if there is no set of applications, removing which will free at least  units of memory;  the minimum number of convenience points that Polycarp will lose if such a set exists. ", "tutorial": "Let's say we remove  applications with  and  applications with . Obviously, among all the applications with , it was necessary to take  maximum in memory (so we will clear the most memory).Let's split all the applications into two arrays with  and  and sort them. Then you need to take a prefix from each array.Let's iterate over which prefix we take from the first array. For it, we can uniquely find the second prefix (we remove applications until the sum exceeds ). If we now increase the first prefix by taking a new application, then we don't need to take any applications in the second array. This means that when the first prefix is increased, the second one can only decrease.To solve the problem, you can use the two-pointer method.", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\nusing ll = long long;\nusing ld = long double;\n\nvoid solve() {\n  int n, m;\n  cin >> n >> m;\n  vector<int> a, b;\n  vector<int> v(n);\n  for (int &e : v) {\n    cin >> e;\n  }\n  for (int &e : v) {\n    int x;\n    cin >> x;\n    if (x == 1) {\n      a.push_back(e);\n    } else {\n      b.push_back(e);\n    }\n  }\n  sort(a.rbegin(), a.rend());\n  sort(b.rbegin(), b.rend());\n  ll curSumA = 0;\n  int r = (int)b.size();\n  ll curSumB = accumulate(b.begin(), b.end(), 0ll);\n  int ans = INT_MAX;\n  for (int l = 0; l <= a.size(); l++) {\n    while (r > 0 && curSumA + curSumB - b[r - 1] >= m) {\n      r--;\n      curSumB -= b[r];\n    }\n    if (curSumB + curSumA >= m) {\n      ans = min(ans, 2 * r + l);\n    }\n    if (l != a.size()) {\n      curSumA += a[l];\n    }\n  }\n  cout << (ans == INT_MAX ? -1 : ans) << \"\\n\";\n}\n\nint main() {\n  int t;\n  cin >> t;\n  while (t--) {\n    solve();\n  }\n}", "interactive": false, "noSolution": false, "noTutorial": false}