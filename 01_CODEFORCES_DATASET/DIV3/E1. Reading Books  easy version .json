{"link": "https://codeforces.com//contest/1374/problem/E1", "problemId": "659588", "shortId": "1374E1", "contest_number": "1374", "name": "E1. Reading Books  easy version ", "statement": ".Summer vacation has started so Alice and Bob want to play and joy, but... Their mom doesn't think so. She says that they have to read some amount of books before all entertainments. Alice and Bob will read each book  to end this exercise faster.There are  books in the family library. The -th book is described by three integers:  \u2014 the amount of time Alice and Bob need to spend to read it,  (equals  if Alice likes the -th book and  if not), and  (equals  if Bob likes the -th book and  if not).So they need to choose some books from the given  books in such a way that:  Alice likes   books from the chosen set and Bob likes   books from the chosen set;  the total reading time of these books is  (they are children and want to play and joy as soon a possible). The set they choose is  for both Alice an Bob (it's shared between them) and they read all books , so the total reading time is the sum of  over all books that are in the chosen set.Your task is to help them and find any suitable set of books or determine that it is impossible to find such a set.", "input": "The first line of the input contains two integers  and  (). The next  lines contain descriptions of books, one description per line: the -th line contains three integers ,  and  (, ), where:    \u2014 the amount of time required for reading the -th book;   equals  if Alice likes the -th book and  otherwise;   equals  if Bob likes the -th book and  otherwise. ", "output": "If there is no solution, print only one integer . Otherwise print one integer  \u2014 the minimum total reading time of the suitable set of books.", "tutorial": "Let's divide all books into four groups:   \u2014 both Alice and Bob doesn't like these books;   \u2014 only Alice likes these books;   \u2014 only Bob likes these books;   \u2014 both ALice and Bob like these books. Obviously, -group is useless now. So, how to solve the problem? Let's iterate over the number of books we take from -group. Let it be . Then we obviously need to take exactly  books from groups  and . Among all books in these three groups we have to choose the cheapest ones. To calculate sum of times in each group fast enought, we can sort each group independently and implement prefix sums on these arrays. If  is less than zero or greater than the size of  or -group for each possible  then the answer is .And don't forget that the answer can be up to .Time complexity: .", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int INF = 2e9 + 1;\n\nint main() {\n#ifdef _DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n#endif\n\t\n\tint n, k;\n\tcin >> n >> k;\n\tvector<int> times[4];\n\tvector<int> sums[4];\n\tfor (int i = 0; i < n; ++i) {\n\t\tint t, a, b;\n\t\tcin >> t >> a >> b;\n\t\ttimes[a * 2 + b].push_back(t);\n\t}\n\tfor (int i = 0; i < 4; ++i) {\n\t\tsort(times[i].begin(), times[i].end());\n\t\tsums[i].push_back(0);\n\t\tfor (auto it : times[i]) {\n\t\t\tsums[i].push_back(sums[i].back() + it);\n\t\t}\n\t}\n\t\n\tint ans = INF;\n\tfor (int cnt = 0; cnt < min(k + 1, int(sums[3].size())); ++cnt) {\n\t\tif (k - cnt < int(sums[1].size()) && k - cnt < int(sums[2].size())) {\n\t\t\tans = min(ans, sums[3][cnt] + sums[1][k - cnt] + sums[2][k - cnt]);\n\t\t}\n\t}\n\t\n\tif (ans == INF) ans = -1;\n\tcout << ans << endl;\n\t\n\treturn 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}