{"link": "https://codeforces.com//contest/1367/problem/E", "problemId": "650997", "shortId": "1367E", "contest_number": "1367", "name": "E. Necklace Assembly", "statement": "The store sells  beads. The color of each bead is described by a lowercase letter of the English alphabet (\"\"\u2013\"\"). You want to buy some beads to assemble a necklace from them.A necklace is a set of beads connected in a circle.For example, if the store sells beads \"\", \"\", \"\", \"\", \"\", \"\", then you can assemble the following necklaces (these are not all possible options):  And the following necklaces cannot be assembled from beads sold in the store:   We call a necklace -beautiful if, when it is turned clockwise by  beads, the necklace remains unchanged. For example, here is a sequence of three turns of a necklace.    As you can see, this necklace is, for example, -beautiful, -beautiful, -beautiful, and so on, but it is not -beautiful or -beautiful.In particular, a necklace of length  is -beautiful for any integer . A necklace that consists of beads of the same color is also beautiful for any .You are given the integers  and , and also the string  containing  lowercase letters of the English alphabet\u00a0\u2014 each letter defines a bead in the store. You can buy any subset of beads and connect them in any order. Find the maximum length of a -beautiful necklace you can assemble.", "input": "The first line contains a single integer  ()\u00a0\u2014 the number of test cases in the test. Then  test cases follow. The first line of each test case contains two integers  and  (). The second line of each test case contains the string  containing  lowercase English letters\u00a0\u2014 the beads in the store. It is guaranteed that the sum of  for all test cases does not exceed .", "output": "Output  answers to the test cases. Each answer is a positive integer\u00a0\u2014 the maximum length of the -beautiful necklace you can assemble.", "tutorial": "Let's iterate over the \u00a0\u2014 length of the -beautiful necklace. For each position , make an edge to the position , where \u00a0\u2014 is the remainder of dividing  by . What is a cyclic shift by  in this construction? A bead located at position  will go along the edge to position . Consider all the cycles of a graph constructed on . You may notice that if only equal letters are found in each cycle, then with a cyclic shift by  the graph and the string will remain unchanged. Thus, in order to check whether it is possible to make a -beautiful necklace of length , you need to make a graph , find the cycles in it and check whether it is possible to distribute the letters from the string  in cycles such that each cycle have equal letters. The last part of the solution can be done with simple greedy.", "solution": "#include <bits/stdc++.h>\nusing namespace std;\n\nint main() {\n\tint test;\n\tcin >> test;\n\n\twhile (test--) {\n\t\tint n, k;\n\t\tcin >> n >> k;\n\t\tstring s;\n\t\tcin >> s;\n\n\t\tvector<int> cnt(26);\n\n\t\tfor (char c : s) {\n\t\t\tcnt[c - 'a']++;\n\t\t}\n\n\t\tfor (int len = n; len >= 1; len--) {\n\t\t\tvector<bool> used(len);\n\t\t\tvector<int> cycles;\n\n\t\t\tfor (int i = 0; i < len; i++) {\n\t\t\t\tif (used[i]) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tint j = (i + k) % len;\n\t\t\t\tused[i] = true;\n\t\t\t\tcycles.push_back(0);\n\t\t\t\tcycles.back()++;\n\n\t\t\t\twhile (!used[j]) {\n\t\t\t\t\tcycles.back()++;\n\t\t\t\t\tused[j] = true;\n\t\t\t\t\tj = (j + k) % len;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvector<int> cur_cnt(cnt);\n\n\t\t\tsort(cycles.begin(), cycles.end());\n\t\t\tsort(cur_cnt.begin(), cur_cnt.end());\n\n\t\t\tbool can_fill = true;\n\n\t\t\twhile (!cycles.empty()) {\n\t\t\t\tif (cur_cnt.back() < cycles.back()) {\n\t\t\t\t\tcan_fill = false;\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\tcur_cnt.back() -= cycles.back();\n\t\t\t\t\tcycles.pop_back();\n\t\t\t\t\tsort(cur_cnt.begin(), cur_cnt.end());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (can_fill) {\n\t\t\t\tcout << len << endl;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}", "interactive": false, "noSolution": false, "noTutorial": false}