{"link": "https://codeforces.com//contest/1213/problem/E", "problemId": "399404", "shortId": "1213E", "contest_number": "1213", "name": "E. Two Small Strings", "statement": "You are given two strings  and   and both consisting only of characters '', '' and ''.Possible examples of strings  and : \"\", \"\", \"\".You have to find a string  consisting of  characters,  characters should be '',  characters should be '' and  characters should be '' and  and  should not occur in  as substrings.A substring of a string is a contiguous subsequence of that string. So, the strings \"\", \"\" and \"\" are substrings of the string \"\", but the strings \"\", \"\" and \"\" are not substrings of the string \"\".If there are multiple answers, you can print any of them.", "input": "The first line of the input contains one integer  () \u2014 the number of characters '', '' and '' in the resulting string. The second line of the input contains one string  of length  consisting of characters '', '' and ''. The third line of the input contains one string  of length  consisting of characters '', '' and ''.", "output": "If it is impossible to find the suitable string, print \"\" on the first line.  Otherwise print \"\" on the first line and string  on the second line.  should consist of  characters,  characters should be '',  characters should be '' and  characters should be '' and  and  should not occur in  as substrings. If there are multiple answers, you can print any of them.", "tutorial": "We can check the following solution by stress-testing (or maybe prove it somehow): let's iterate over all possible permutations of the string \"\". Let the first character of the current permutation be , the second one be  and the third one be . Then let's add the following two candidates to the answer: \"\" (the string consisting of  copies of \"\") and \"\" (exactly  copies of  then exactly  copies of  and exactly  copies of ). Then the answer will be among these  strings and we can check each of them naively.", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n#ifdef _DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n#endif\n\t\n\tint n;\n\tstring s, t;\n\tcin >> n >> s >> t;\n\tstring abc = \"abc\";\n\tvector<string> res;\n\tdo {\n\t\tstring cur;\n\t\tfor (int i = 0; i < n; ++i) cur += abc;\n\t\tres.push_back(cur);\n\t\tres.push_back(string(n, abc[0]) + string(n, abc[1]) + string(n, abc[2]));\n\t} while (next_permutation(abc.begin(), abc.end()));\n\t\n\tfor (auto str : res) {\n\t\tif (str.find(s) == string::npos && str.find(t) == string::npos) {\n\t\t\tcout << \"YES\" << endl << str << endl;\n\t\t\treturn 0;\n\t\t}\n\t}\n\t\n\tassert(false);\n\tcout << \"NO\" << endl;\n\t\n\treturn 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}