{"link": "https://codeforces.com//contest/1800/problem/E1", "problemId": "1805847", "shortId": "1800E1", "contest_number": "1800", "name": "E1. Unforgivable Curse  easy version ", "statement": "The chief wizard of the Wizengamot once caught the evil wizard Drahyrt, but the evil wizard has returned and wants revenge on the chief wizard. So he stole   from his student Harry.The \u00a0\u2014 is a -length string of lowercase Latin letters.Drahyrt wants to replace  with an unforgivable curse\u00a0\u2014 string .Drahyrt, using ancient magic, can swap letters at a distance  or  in  as many times as he wants.  In other words, Drahyrt can change letters in positions  and  in   if  or .For example, if  \"\" and  \"\", Drahyrt can act as follows:  swap the letters at positions  and  to get  \"\".  swap the letters at positions  and  to get  \"\". You are given   and . Can Drahyrt change   to ?", "input": "The first line of input gives a single integer  ()\u00a0\u2014 the number of test cases in the test. Descriptions of the test cases are follow. The first line contains two integers  (, )\u00a0\u2014 the length  and the number  such that Drahyrt can change letters in a spell at a distance  or . The second line gives  \u00a0\u2014 a string of length  consisting of lowercase Latin letters. The third line gives  \u00a0\u2014 a string of length  consisting of lowercase Latin letters. It is guaranteed that the sum of  values over all test cases does not exceed . Note that there is no limit on the sum of  values over all test cases.", "output": "For each test case, output on a separate line \"\" if Drahyrt can change   to  and \"\" otherwise. You can output the answer in any case (for example, lines \"\", \"\", \"\" and \"\" will be recognized as positive answer).", "tutorial": "In these constraints , the problem could be solved as follows:Note that for strings of length  and more, it is enough to check that the strings  and  match character by character, that is, up to permutation, since each character can be moved to the desired half, and then moved to the desired side by length  by applying two operations on the length is  and .For example, there was a string \"\" and we want to shift the  character to the left, then we can first get the string \"\" and then the string \"\". Well, we can restore the used symbols by putting them in their place \"\". That is, we were able to simply swap two adjacent characters.Thus, with such a clipping, it was possible to solve the problem by brute force for . To iterate, it was possible to store  of strings, which we can get and iterate through all the strings using .", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define sz(v) (int)v.size()\n#define all(v) v.begin(),v.end()\n#define eb emplace_back\n\n\nvoid slow_solve(int n, int k, string s, string t) {\n    set<string> was;\n\n    queue<string> q;\n    q.push(s);\n    was.insert(s);\n\n    auto add = [&](string& s, int i, int j) {\n        if (i >= 0 && i < j && j < n) {\n            swap(s[i], s[j]);\n            if (!was.count(s)) {\n                was.insert(s);\n                q.push(s);\n            }\n            swap(s[i], s[j]);\n        }\n\n    };\n\n    while (!q.empty()) {\n        s = q.front(); q.pop();\n        for (int i = 0; i < n; ++i) {\n            add(s, i, i+k);\n            add(s, i, i+k+1);\n            add(s, i-k, i);\n            add(s, i-k-1, i);\n        }\n    }\n    cout << (was.count(t) ? \"Yes\" : \"No\") << '\\n';\n}\n\nvoid solve() {\n    int n,k; cin >> n >> k;\n    string s; cin >> s;\n    string t; cin >> t;\n\n    if (n <= 5) {\n        slow_solve(n, k, s, t);\n        return;\n    }\n    map<char, int> cnt;\n    for (char c : s) {\n        cnt[c]++;\n    }\n\n    for (char c : t) {\n        cnt[c]--;\n    }\n\n    bool ok = true;\n    for (auto [c, x] : cnt) {\n        ok &= x == 0;\n    }\n    cout << (ok ? \"Yes\" : \"No\") << '\\n';\n}\n\nint main() {\n    int t;\n    cin >> t;\n\n    while (t--) {\n        solve();\n    }\n}", "interactive": false, "noSolution": false, "noTutorial": false}