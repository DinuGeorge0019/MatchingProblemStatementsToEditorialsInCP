{"link": "https://codeforces.com//contest/1311/problem/C", "problemId": "547478", "shortId": "1311C", "contest_number": "1311", "name": "C. Perform the Combo", "statement": "You want to perform the combo on your opponent in one popular fighting game. The combo is the string  consisting of  lowercase Latin letters. To perform the combo, you have to press all buttons in the order they appear in . I.e. if \"\" then you have to press '', then '', '' and '' again.You know that you will spend  wrong tries to perform the combo and during the -th try you will make a mistake right after -th button () (i.e. you will press first  buttons right and start performing the combo from the beginning). It is guaranteed that during the -th try you press all buttons right and finally perform the combo.I.e. if \"\",  and  then the sequence of pressed buttons will be '' ( you're making a mistake and start performing the combo from the beginning), '', '', '', ( you're making a mistake and start performing the combo from the beginning), '' (), '', '', ''.Your task is to calculate for each button (letter) the number of times you'll press it.You have to answer  independent test cases.", "input": "The first line of the input contains one integer  () \u2014 the number of test cases. Then  test cases follow. The first line of each test case contains two integers  and  (, ) \u2014 the length of  and the number of tries correspondingly. The second line of each test case contains the string  consisting of  lowercase Latin letters. The third line of each test case contains  integers  () \u2014 the number of characters pressed right during the -th try. It is guaranteed that the sum of  and the sum of  both does not exceed  (, ). It is guaranteed that the answer for each letter does not exceed .", "output": "For each test case, print the answer \u2014  integers: the number of times you press the button '', the number of times you press the button '', , the number of times you press the button ''.", "tutorial": "We can consider all tries independently. During the -th try we press first  buttons, so it makes  on the prefix of length . So the -th character of the string will be pressed (the number of  plus ) times. We can use sorting and some kind of binary search to find this number for each character but we also can build suffix sums to find all required numbers. We can build suffix sums using the following code:vector<int> cnt(n);for (int i = 0; i < m; ++i) {    ++cnt[p[i]];}for (int i = n - 1; i > 0; --i) {    cnt[i - 1] += cnt[i];}So as you can see, the -th element of  will add  in each position from  to . So we got what we need. After that we can calculate the answer for each character in the following way:vector<int> ans(26);for (int i = 0; i < n; ++i) {    ans[s[i] - 'a'] += cnt[i] + 1;}Time complexity:  or .", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n#ifdef _DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n#endif\n\t\n\tint t;\n\tcin >> t;\n\twhile (t--) {\n\t\tint n, m;\n\t\tstring s;\n\t\tcin >> n >> m >> s;\n\t\tvector<int> pref(n);\n\t\tfor (int i = 0; i < m; ++i) {\n\t\t\tint p;\n\t\t\tcin >> p;\n\t\t\t++pref[p - 1];\n\t\t}\n\t\tfor (int i = n - 1; i > 0; --i) {\n\t\t\tpref[i - 1] += pref[i];\n\t\t}\n\t\tvector<int> ans(26);\n\t\tfor (int i = 0; i < n; ++i) {\n\t\t\tans[s[i] - 'a'] += pref[i];\n\t\t\t++ans[s[i] - 'a'];\n\t\t}\n\t\tfor (int i = 0; i < 26; ++i) {\n\t\t\tcout << ans[i] << \" \";\n\t\t}\n\t\tcout << endl;\n\t}\n\t\n\treturn 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}