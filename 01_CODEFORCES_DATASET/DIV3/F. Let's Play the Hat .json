{"link": "https://codeforces.com//contest/1619/problem/F", "problemId": "1234627", "shortId": "1619F", "contest_number": "1619", "name": "F. Let's Play the Hat ", "statement": " people gathered in a room with  tables (). They want to play the Hat  times. Thus,  games will be played at each table. Each player will play in  games.To do this, they are distributed among the tables for each game. During each game, one player plays at exactly one table. A player can play at different tables.Players want to have the most \"fair\" schedule of games. For this reason, they are looking for a schedule (table distribution for each game) such that:  At any table in each game there are either  people or  people (that is, either  rounded down, or  rounded up). Different numbers of people can play different games at the same table. Let's calculate for each player the value  \u2014 the number of times the -th player played at a table with  persons ( rounded up). Any two values of must differ by no more than . In other words, for any two players  and , it must be true . For example, if ,  and , then at the request of the first item either two players or three players should play at each table. Consider the following schedules:  First game:  are played at the first table, and  at the second one. The second game: at the first table they play , and at the second \u00a0\u2014 . This schedule is  since  (the second player played twice at a big table) and  (the fifth player did not play at a big table). First game:  are played at the first table, and  at the second one. The second game: at the first table they play , and at the second one \u00a0\u2014 . This schedule is :  (any two values of  differ by no more than ). Find any \"fair\" game schedule for  people if they play on the  tables of  games.", "input": "The first line of the input contains an integer  () \u2014 the number of test cases in the test. Each test case consists of one line that contains three integers ,  and  (, , ) \u2014 the number of people, tables and games, respectively. It is guaranteed that the sum of  ( multiplied by ) over all test cases does not exceed .", "output": "For each test case print a required schedule \u00a0\u2014 a sequence of  blocks of  lines. Each block corresponds to one game, a line in a block corresponds to one table. In each line print the number of players at the table and the indices of the players (numbers from  to ) who should play at this table. If there are several required schedules, then output any of them. We can show that a valid solution always exists. You can output additional blank lines to separate responses to different sets of inputs.", "tutorial": "For each game, we want to seat  people at  tables,  of them will be big and  will sit at them, and  will be small. Each round  people will sit at the big tables.Let's put people with numbers  at large tables in the first round (for convenience we index from zero), and the rest for small ones, in the second round we will seat people at large tables with numbers  and so on.We cycle through the players from  to  in blocks of . Since , no one person can be ahead of any other by 2 or more large tables.", "solution": "#include <bits/stdc++.h>\n \nusing namespace std;\n \n#define forn(i, n) for (int i = 0; i < int(n); i++)\n \nint main() {\n    int t;\n    cin >> t;\n    forn(tt, t) {\n        int n, m, k;\n        cin >> n >> m >> k;\n        vector<int> p(n);\n        forn(i, n)\n            p[i] = i;\n        if (tt > 0)\n            cout << endl;\n        forn(round, k) {\n            int index = 0;\n            forn(table, m) {\n                int size = n / m;\n                if (table < n % m)\n                    size++;\n                cout << size;\n                forn(j, size)\n                    cout << \" \" << p[index++] + 1;\n                cout << endl;                        \n            }\n            rotate(p.begin(), p.begin() + (n % m) * ((n + m - 1) / m), p.end());\n        }\n    }\n}", "interactive": false, "noSolution": false, "noTutorial": false}