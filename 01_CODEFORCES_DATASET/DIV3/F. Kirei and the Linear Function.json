{"link": "https://codeforces.com//contest/1729/problem/F", "problemId": "1538787", "shortId": "1729F", "contest_number": "1729", "name": "F. Kirei and the Linear Function", "statement": "Given the string  of decimal digits (-) of length .A substring is a sequence of consecutive characters of a string. The substring of this string is defined by a pair of indexes \u2014 with its left and right ends. So, each pair of indexes (), where , corresponds to a substring of the string . We will define as  the numeric value of the corresponding substring (leading zeros are allowed in it).For example, if , \"\", then ,  and .You are given ,  and an integer  ().You need to process  queries, each of which is characterized by  numbers  ().The answer to the th query is such a pair of substrings of length  that if we denote them as  and , then:  , that is, the substrings are different;  the remainder of dividing a number  by  is equal to . If there are many matching substring pairs, then find a pair where  is as small as possible. If there are many matching pairs in this case, then minimize .Note that the answer may not exist.", "input": "The first line contains a single integer  ()\u00a0\u2014 number of input test cases. The first line of each test case contains a string , which contains only the characters - and has a length  (). The second line contains two integers  (), where  \u2014 is the length of the given string . The number  denotes the lengths of the substrings being searched for, and  is the number of queries to be processed. The following  lines contain integers  (, )\u00a0\u2014 th query parameters. It is guaranteed that the sum of  over all test cases does not exceed . It is also guaranteed that the sum of  over all test cases does not exceed .", "output": "For each request, print in a separate line:    left borders of the required substrings:  and ;  otherwise, if there is no solution.  If there are several solutions, minimize  first, and minimize  second.", "tutorial": "Note that the remainder of dividing a number by  is equal to the remainder of dividing its sum of digits by . This is easy to check, because the number  of  digits is representable as a polynomial , and  gives a remainder of  when divided by  for any .Let's count an array of prefix sums of digits for the string .Now, knowing , we can pre-calculate for each remainder modulo  all possible .Also, for each query, we can easily find the remainder of dividing  by  using all the same prefix sums.Let's iterate over the remainder of the number  when dividing by . Knowing it, we can easily find the remainder of the number  when divided by , as  modulo .Now, using each pair of remainers , let's try to update the answer:   , then the minimum index from the pre-calculated array will act as , and the next largest will act as  (if such exist);  , then the minimum indexes from the pre-calculated array will act as  and . This solution works for  or for .", "solution": "#include <bits/stdc++.h>\n\n#define endl '\\n'\n\nusing namespace std;\n\ntypedef pair<int, int> ipair;\n\nconst int MAXSZ = 200200;\nconst int INF = 2e9;\n\ninline int add(int a, int b) {\n\treturn (a + b >= 9 ? a + b - 9 : a + b);\n}\n\ninline int sub(int a, int b) {\n\treturn (a < b ? a + 9 - b : a - b);\n}\n\ninline int mul(int a, int b) {\n\treturn a * b % 9;\n}\n\nint sz, n, m;\nstring s;\nint ps[MAXSZ];\nvector<int> D[9];\n\nvoid build() {\n\tsz = s.size();\n\tfor (int md = 0; md < 9; ++md)\n\t\tD[md].clear();\n\tfor (int i = 0; i < sz; ++i)\n\t\tps[i + 1] = ps[i] + (s[i] - '0');\n\tfor (int i = 0; i + n <= sz; ++i)\n\t\tD[(ps[i + n] - ps[i]) % 9].push_back(i);\n}\n\nipair solve(int l, int r, int k) {\n\tint x = (ps[r] - ps[l]) % 9;\n\tipair ans {INF, INF};\n\tfor (int a = 0; a < 9; ++a) {\n\t\tint b = sub(k, mul(a, x));\n\t\tif (D[a].empty() || D[b].empty()) continue;\n\t\tif (a != b)\n\t\t\tans = min(ans, make_pair(D[a].front(), D[b].front()));\n\t\telse if (D[a].size() >= 2)\n\t\t\tans = min(ans, make_pair(D[a].front(), D[a][1]));\n\t}\n\tif (ans == make_pair(INF, INF))\n\t\treturn {-2, -2};\n\treturn ans;\n}\n\nint main() {\n\tios_base::sync_with_stdio(false), cin.tie(NULL), cout.tie(NULL);\n\tint t; cin >> t;\n\twhile (t--) {\n\t\tcin >> s >> n >> m;\n\t\tbuild();\n\t\tfor (int i = 0; i < m; ++i) {\n\t\t\tint l, r, k; cin >> l >> r >> k, --l;\n\t\t\tauto [ans1, ans2] = solve(l, r, k);\n\t\t\tcout << ++ans1 << ' ' << ++ans2 << endl;\n\t\t}\n\t}\n}", "interactive": false, "noSolution": false, "noTutorial": false}