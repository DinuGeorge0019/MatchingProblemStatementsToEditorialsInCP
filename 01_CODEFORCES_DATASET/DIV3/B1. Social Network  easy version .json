{"link": "https://codeforces.com//contest/1234/problem/B1", "problemId": "426511", "shortId": "1234B1", "contest_number": "1234", "name": "B1. Social Network  easy version ", "statement": ".You are messaging in one of the popular social networks via your smartphone. Your smartphone can show at most  most recent conversations with your friends. Initially, the screen is empty (i.e. the number of displayed conversations equals ).Each conversation is between you and some of your friends. There is at most one conversation with any of your friends. So each conversation is uniquely defined by your friend.You (suddenly!) have the ability to see the future. You know that during the day you will receive  messages, the -th message will be received from the friend with ID  ().If you receive a message from  in the conversation which is currently displayed on the smartphone then nothing happens: the conversations of the screen do not change and do not change their order, you read the message and continue waiting for new messages.Otherwise (i.e. if there is no conversation with  on the screen):  Firstly, if the number of conversations displayed on the screen is , the last conversation (which has the position ) is removed from the screen.  Now the number of conversations on the screen is guaranteed to be less than  and the conversation with the friend  is not displayed on the screen.  The conversation with the friend  appears on the first (the topmost) position on the screen and all the other displayed conversations are shifted one position down. Your task is to find the list of conversations (in the order they are displayed on the screen) after processing all  messages.", "input": "The first line of the input contains two integers  and  ( \u2014 the number of messages and the number of conversations your smartphone can show. The second line of the input contains  integers  (), where  is the ID of the friend which sends you the -th message.", "output": "In the first line of the output print one integer  () \u2014 the number of conversations shown after receiving all  messages. In the second line print  integers , where  should be equal to the ID of the friend corresponding to the conversation displayed on the position  after receiving all  messages.", "tutorial": "The solution to this problem is just the implementation of what is written in the problem statement. Let's carry the array  which shows the current smartphone screen. When we receive the new message from the friend with ID , let's do the following sequence of moves:  Firstly, let's try to find him on the screen. If he is found, just do nothing and continue.  Otherwise, let's check if the current number of conversations is . If it is so then let's remove the last conversation.  Now the number of conversations is less than  and the current friend is not shown on the screen. Let's insert him into the first position. After processing all  messages the answer is just the array .", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n#ifdef _DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n#endif\n\t\n\tint n, k;\n\tcin >> n >> k;\n\tvector<int> ids;\n\tfor (int i = 0; i < n; ++i) {\n\t\tint id;\n\t\tcin >> id;\n\t\tif (find(ids.begin(), ids.end(), id) == ids.end()) {\n\t\t\tif (int(ids.size()) >= k) ids.pop_back();\n\t\t\tids.insert(ids.begin(), id);\n\t\t}\n\t}\n\t\n\tcout << ids.size() << endl;\n\tfor (auto it : ids) cout << it << \" \";\n\tcout << endl;\n\t\n\treturn 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}