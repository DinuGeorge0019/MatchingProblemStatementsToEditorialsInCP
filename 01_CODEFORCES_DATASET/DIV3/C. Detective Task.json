{"link": "https://codeforces.com//contest/1675/problem/C", "problemId": "1389920", "shortId": "1675C", "contest_number": "1675", "name": "C. Detective Task", "statement": "Polycarp bought a new expensive painting and decided to show it to his  friends. He hung it in his room.  of his friends entered and exited there one by one. At one moment there was no more than one person in the room. In other words, the first friend entered and left first, then the second, and so on.It is known that at the beginning (before visiting friends) a picture hung in the room. At the end (after the -th friend) it turned out that it disappeared. At what exact moment it disappeared\u00a0\u2014 there is no information.Polycarp asked his friends one by one. He asked each one if there was a picture when he entered the room. Each friend answered one of three:   (response encoded with );   (response encoded as );   (response is encoded with ). Everyone except the thief either doesn't remember or told the . The thief can say anything (any of the three options).Polycarp cannot understand who the thief is. He asks you to find out the number of those who can be considered a thief according to the answers.", "input": "The first number  ()\u00a0\u2014 the number of test cases in the test. The following is a description of test cases. The first line of each test case contains one string  (length does not exceed )\u00a0\u2014 a description of the friends' answers, where  indicates the answer of the -th friend. Each character in the string is either  or  or . The given regularity is described in the actual situation. In particular, on the basis of answers, at least one friend can be suspected of stealing a painting. It is guaranteed that the sum of string lengths over the entire input data set does not exceed .", "output": "Output one positive (strictly more zero) number\u00a0\u2013 the number of people who could steal the picture based on the data shown.", "tutorial": "First, let's note that we will have a transition from  to  only once, otherwise it turns out that first the picture disappeared, then it appeared and disappeared back, but we can consider that a friend in the middle, who answered  lied to us, but this is not true, because even before him the picture disappeared.So we need to find this transition. Since we can also meet , we find the index of the leftmost  (in case of absence, we take ) and mark it as , and the index of rightmost  (in case of absence, we take ) and mark as . Answer\u00a0\u2013 the number of indices between them (inclusive), because only they could lie. There could not be a thief to the left of , since either the friend under the index  lied, or the picture was not stolen before . There could not be a thief to the right of , since either the painting had already been stolen in the presence of 's friend, or it was he who lied.", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define forn(i, n) for (int i = 0; i < int(n); i++)\n\nint main() {\n    int t;\n    cin >> t;\n    forn(tt, t) {\n        string s;\n        cin >> s;\n        int n = s.length();\n        vector<bool> a(n + 1);\n        a[0] = true;\n        forn(i, n)\n            a[i + 1] = a[i] && (s[i] == '1' || s[i] == '?');\n        vector<bool> b(n + 1);\n        b[0] = true;\n        for (int i = n - 1; i >= 0; i--)\n            b[n - i] = b[n - i - 1] && (s[i] == '0' || s[i] == '?');\n        int result = 0;\n        forn(i, n)\n            if (a[i] && b[n - i - 1])\n                result++;\n        cout << result << endl;\n    }\n}", "interactive": false, "noSolution": false, "noTutorial": false}