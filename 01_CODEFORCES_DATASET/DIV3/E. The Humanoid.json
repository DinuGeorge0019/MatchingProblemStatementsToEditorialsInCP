{"link": "https://codeforces.com//contest/1759/problem/E", "problemId": "1648493", "shortId": "1759E", "contest_number": "1759", "name": "E. The Humanoid", "statement": "There are  astronauts working on some space station. An astronaut with the number  () has  .An evil humanoid has made his way to this space station.  of this humanoid is equal to . Also, the humanoid took with him   serums and   serum.In one second , a humanoid can do any of three actions:  to absorb an astronaut with   ;  to use  serum, if there is still one left;  to use  serum, if there is still one left. When an astronaut with   is absorbed, this astronaut disappears, and  of the humanoid increases by , that is, an integer part of . For example, if a humanoid absorbs an astronaut with  , its  increases by , and if a humanoid absorbs an astronaut with  , its  increases by .After using the  serum, this serum disappears, and the  of the humanoid doubles, so it increases by  times.After using the  serum, this serum disappears, and the  of the humanoid triples, so it increases by  times.The humanoid is wondering what the maximum number of astronauts he will be able to absorb if he acts optimally.", "input": "The first line of each test contains an integer  ()\u00a0\u2014 number of test cases. The first line of each test case contains integers  ()\u00a0\u2014 number of astronauts and  ()\u00a0\u2014 the initial  of the humanoid. The second line of each test case contains  integers  ()\u00a0\u2014  of astronauts. It is guaranteed that the sum of  for all test cases does not exceed .", "output": "For each test case, in a separate line, print the maximum number of astronauts that a humanoid can absorb.", "tutorial": "Let's make two obvious remarks:  If we can absorb two astronauts with  , then we can always first absorb an astronaut with  , and then an astronaut with  ;  If we can absorb some astronaut, it is effective for us to do it right now. Let's sort the astronauts  in increasing order.Now let's lock the sequence of serums we use. There are only three of them:  serum can be the first, second or third.Let's absorb the astronauts in increasing order of their , and if we can't, then use the next serum in a locked sequence or stop.This solution works for .", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int MAXN = 200200;\n\nint n;\nint arr[MAXN];\n\nint solve(int i, long long h, int s2, int s3) {\n\tif (i == n) return 0;\n\tif (arr[i] < h)\n\t\treturn solve(i + 1, h + (arr[i] / 2), s2, s3) + 1;\n\tint ans1 = (s2 ? solve(i, h * 2, s2 - 1, s3) : 0);\n\tint ans2 = (s3 ? solve(i, h * 3, s2, s3 - 1) : 0);\n\treturn max(ans1, ans2);\n}\n\nint main() {\n\tint t; cin >> t;\n\twhile(t--) {\n\t\tlong long h; cin >> n >> h;\n\t\tfor (int i = 0; i < n; ++i)\n\t\t\tcin >> arr[i];\n\t\tsort(arr, arr + n);\n\t\tcout << solve(0, h, 2, 1) << endl;\n\t}\n}", "interactive": false, "noSolution": false, "noTutorial": false}