{"link": "https://codeforces.com//contest/1800/problem/B", "problemId": "1805843", "shortId": "1800B", "contest_number": "1800", "name": "B. Count the Number of Pairs", "statement": "Kristina has a string  of length , consisting only of lowercase and uppercase Latin letters. For each pair of lowercase letter and its matching uppercase letter, Kristina can get  burl. However, pairs of characters cannot overlap, so each character can only be in one pair.For example, if she has the string  = \"aAaaBACacbE\", she can get a burl for the following character pairs:    = \"a\" and  = \"A\"   = \"a\" and  = \"A\"   = \"B\" and  = \"b\"  = \"C\" and  = \"c\" Kristina wants to get more burles for her string, so she is going to perform no more than  operations on it. In one operation, she can:  either select the lowercase character  () and make it uppercase.  or select uppercase character  () and make it lowercase. For example, when  = 2 and  = \"aAaaBACacbE\" it can perform one operation: choose  = \"a\" and make it uppercase. Then she will get another pair of  = \"A\" and  = \"a\"Find  number of burles Kristina can get for her string.", "input": "The first line of input data contains a single integer  ()\u00a0\u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains two integers  () and  () \u2014 the number of characters in the string and the maximum number of operations that can be performed on it. The second line of each test case contains a string  of length , consisting only of lowercase and uppercase Latin letters. It is guaranteed that the sum of  over all test cases does not exceed .", "output": "For each test case, print exactly one integer on a separate line: the maximum number of burles that Kristina can get for her string .", "tutorial": "Count two arrays  and , such that  contains the number of occurrences of th letter of the alphabet in the string in upper case, while  \u2014 in lower case.Let's add all existing pairs to the answer, so let's add  to it for each letter. Subtract this minimum from  and  to get the number of unpaired identical letters.Next, we will act greedily: if there is some set of at least two identical letters in the same case, we can apply the operation to half of them and get new pairs. Therefore, for each letter we will add  to the answer and decrease  by that amount.", "solution": "#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 26;\n\nvoid solve(){\n    int n, k;\n    cin >> n >> k;\n    string s;\n    cin >> s;\n    vector<int>big(N, 0), small(N, 0);\n    for(auto &i : s){\n        if('A' <= i && 'Z' >= i) big[i - 'A']++;\n        else small[i - 'a']++;\n    }\n    int answer = 0;\n    for(int i = 0; i < N; i++){\n        int pairs = min(small[i], big[i]);\n        answer += pairs;\n        small[i] -=pairs; big[i] -= pairs;\n        int add = min(k, max(small[i], big[i]) / 2);\n        k -= add; answer += add;\n    }\n    cout << answer << endl;\n}\nint main(){\n    int t;\n    cin >> t;\n    while(t--) solve();\n    return 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}