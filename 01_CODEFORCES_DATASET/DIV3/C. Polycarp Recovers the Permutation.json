{"link": "https://codeforces.com//contest/1611/problem/C", "problemId": "1202186", "shortId": "1611C", "contest_number": "1611", "name": "C. Polycarp Recovers the Permutation", "statement": "Polycarp wrote on a whiteboard an array  of length , which is a permutation of numbers from  to . In other words, in  each number from  to  occurs exactly once.He also prepared a resulting array , which is initially empty (that is, it has a length of ).After that, he did exactly  . Each  looked like this:  Look at the leftmost and rightmost elements of , and pick the smaller of the two. If you picked the leftmost element of , append it to the left of ; otherwise, if you picked the rightmost element of , append it to the right of . The picked element is erased from . Note that on the last step,  has a length of  and its minimum element is both leftmost and rightmost. In this case, Polycarp can choose what role the minimum element plays. In other words, this element can be added to  both on the left and on the right (at the discretion of Polycarp).Let's look at an example. Let , . Initially . Then: During the first step, the minimum is on the right (with a value of ), so after this step,  and  (he added the value  to the right).  During the second step, the minimum is on the left (with a value of ), so after this step,  and  (he added the value  to the left).  During the third step, the minimum is on the left (with a value of ), so after this step,  and  (he added the value  to the left).  During the fourth step, the minimum is both left and right (this value is ). Let's say Polycarp chose the right option. After this step,  and  (he added the value  to the right).Thus, a possible value of  after  steps could be .You are given the final value of the resulting array . Find  possible initial value for  that can result the given , or determine that there is no solution.", "input": "The first line of the input contains an integer  () \u2014 the number of test cases in the test. Each test case consists of two lines. The first of them contains an integer  () \u2014 the length of the array . The second line contains  integers  () \u2014 the elements of the array . All elements of the  array are distinct numbers. It is guaranteed that the sum of the values  over all test cases in the test does not exceed .", "output": "Print  lines, each of the lines must contain the answer to the corresponding set of input data: numbers  \u00a0\u2014 any of the possible initial values of the array , which will lead to the given array . All elements of  are distinct integers from  to . Thus, if there are several solutions, print any. If there is no solution, then print  on the line.", "tutorial": "The maximum element is always added last, so if it is not in the first or last position, then there is no answer.Let us prove that if the permutation has its maximum element in the first or last position, then after  actions we can get an expanded permutation. Indeed, the maximum element will be added last at the desired end, and all the others will be added in reverse order.Then, if the answer exists, it is sufficient to simply unfold the permutation.", "solution": "#include <bits/stdc++.h>\n \nusing namespace std;\n \n#define forn(i, n) for (int i = 0; i < int(n); i++)\n \nint main() {\n    int t;\n    cin >> t;\n    forn(tt, t) {\n        int n;\n        cin >> n;\n        vector<int> a(n);\n        forn(i, n)\n            cin >> a[i];\n        if (a[0] != n && a[n - 1] != n)\n            cout << -1 << endl;\n        else {\n            for (int i = n - 1; i >= 0; i--)\n                cout << a[i] << \" \";\n            cout << endl;\n        }\n    }\n}", "interactive": false, "noSolution": false, "noTutorial": false}