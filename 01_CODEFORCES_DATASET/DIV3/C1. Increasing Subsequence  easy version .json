{"link": "https://codeforces.com//contest/1157/problem/C1", "problemId": "336289", "shortId": "1157C1", "contest_number": "1157", "name": "C1. Increasing Subsequence  easy version ", "statement": ".You are given a sequence  consisting of  integers. You are making a sequence of moves. During each move you must take either the leftmost element of the sequence or the rightmost element of the sequence, write it down and remove it from the sequence. Your task is to write down a  increasing sequence, and among all such sequences you should take the longest (the length of the sequence is the number of elements in it).For example, for the sequence  the answer is  (you take  and the sequence becomes , then you take the rightmost element  and the sequence becomes , then you take  and the sequence becomes  and then you take  and the sequence becomes , the obtained increasing sequence is ).", "input": "The first line of the input contains one integer  () \u2014 the number of elements in . The second line of the input contains  integers  (), where  is the -th element of . .", "output": "In the first line of the output print  \u2014 the maximum number of elements in a  increasing sequence you can obtain. In the second line print a string  of length , where the -th character of this string  should be '' if you take the leftmost element during the -th move and '' otherwise. If there are multiple answers, you can print any.", "tutorial": "In this problem the following greedy solution works: let's maintain the last element of the increasing sequence we got and on each turn choose the minimum element greater than this last element among the leftmost and the rightmost. Such turns will maximize the answer. You can find details of implementation in the authors solution.", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n#ifdef _DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n#endif\n\t\n\tint n;\n\tcin >> n;\n\tvector<int> a(n);\n\tfor (int i = 0; i < n; ++i) {\n\t\tcin >> a[i];\n\t}\n\t\n\tstring res;\n\tint l = 0, r = n - 1;\n\tint lst = 0;\n\twhile (l <= r) {\n\t\tvector<pair<int, char>> cur;\n\t\tif (lst < a[l]) cur.push_back(make_pair(a[l], 'L'));\n\t\tif (lst < a[r]) cur.push_back(make_pair(a[r], 'R'));\n\t\tsort(cur.begin(), cur.end());\n\t\tif (int(cur.size()) == 2) {\n\t\t\tcur.pop_back();\n\t\t}\n\t\tif (int(cur.size()) == 1) {\n\t\t\tif (cur[0].second == 'L') {\n\t\t\t\tres += 'L';\n\t\t\t\tlst = a[l];\n\t\t\t\t++l;\n\t\t\t} else {\n\t\t\t\tres += 'R';\n\t\t\t\tlst = a[r];\n\t\t\t\t--r;\n\t\t\t}\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tcout << res.size() << endl << res << endl;\n\t\n\treturn 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}