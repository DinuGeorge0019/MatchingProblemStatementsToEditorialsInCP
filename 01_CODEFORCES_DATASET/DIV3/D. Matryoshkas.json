{"link": "https://codeforces.com//contest/1790/problem/D", "problemId": "1753649", "shortId": "1790D", "contest_number": "1790", "name": "D. Matryoshkas", "statement": " is a wooden toy in the form of a painted doll, inside which you can put a similar doll of a smaller size.A set of nesting dolls contains one or more nesting dolls, their sizes are consecutive positive integers. Thus, a set of nesting dolls is described by two numbers:  \u2014 the size of a smallest nesting doll in a set and  \u2014 the number of dolls in a set. In other words, the set contains sizes of  for some integer  and  ().You had one or more sets of nesting dolls. Recently, you found that someone mixed all your sets in one and recorded a sequence of doll sizes \u2014 integers .You do not remember how many sets you had, so you want to find the  number of sets that you could initially have.For example, if a given sequence is . Initially, there could be  sets:   the first set consisting of  nesting dolls with sizes ;  a second set consisting of  nesting dolls with sizes . According to a given sequence of sizes of nesting dolls , determine the minimum number of nesting dolls that can make this sequence.Each set is completely used, so all its nesting dolls are used. Each element of a given sequence must correspond to exactly one doll from some set.", "input": "The first line of input data contains a single integer  ()\u00a0\u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains one integer  ()\u00a0\u2014 the total number of matryoshkas that were in all sets. The second line of each test case contains  integers  () \u00a0\u2014 the sizes of the matryoshkas.  It is guaranteed that the sum of values of  over all test cases does not exceed .", "output": "For each test case, print one integer  \u2014 the minimum possible number of matryoshkas sets.", "tutorial": "First, for each size, let's count  \u2014 the number of dolls of this size.Then, let's create a set, in which for each doll of size  we add the numbers  and . This will allow you to process all the segments, as well as the dimensions adjacent to them.We will iterate over the set in ascending order of size. Let  be the number of matryoshkas of the current size,  \u2014 of the previous one considered ( at the beginning). If the numbers do not match, then you need to close (if ), or open (if )  segments. It is enough to add only the opening of the segments to the answer.", "solution": "#include <iostream>\n#include <vector>\n#include <queue>\n#include <map>\n#include <set>\n\nusing namespace std;\n\nvoid solve() {\n    int n;\n    cin >> n;\n    vector<int> a(n);\n    map<int, int> cnt;\n    set<int> b;\n    for (int i = 0; i < n; ++i) {\n        cin >> a[i];\n        cnt[a[i]]++;\n        b.insert(a[i]);\n        b.insert(a[i] + 1);\n    }\n    int last = 0;\n    int res = 0;\n    for (auto x: b) {\n        int c = cnt[x];\n        res += max(0, c - last);\n        last = c;\n    }\n    cout << res << '\\n';\n}\n\nint main(int argc, char* argv[]) {\n    int t;\n    cin >> t;\n    for (int i = 0; i < t; ++i) {\n        solve();\n    }\n}", "interactive": false, "noSolution": false, "noTutorial": false}