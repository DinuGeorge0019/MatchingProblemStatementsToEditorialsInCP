{"link": "https://codeforces.com//contest/1144/problem/F", "problemId": "322487", "shortId": "1144F", "contest_number": "1144", "name": "F. Graph Without Long Directed Paths", "statement": "You are given a connected undirected graph consisting of  vertices and  edges. There are no self-loops or multiple edges in the given graph.You have to direct its edges in such a way that the obtained directed graph does not contain any paths of length two or greater (where the length of path is denoted as the number of traversed edges).", "input": "The first line contains two integer numbers  and  (, ) \u2014 the number of vertices and edges, respectively. The following  lines contain edges: edge  is given as a pair of vertices ,  (, ). There are no multiple edges in the given graph, i.\u2009e. for each pair () there are no other pairs () and () in the list of edges. It is also guaranteed that the given graph is connected (there is a path between any pair of vertex in the given graph).", "output": "If it is impossible to direct edges of the given graph in such a way that the obtained directed graph does not contain paths of length at least two, print \"\" in the first line. Otherwise print \"\" in the first line, and then print  suitable orientation of edges: a binary string (the string consisting only of '' and '') of length . The -th element of this string should be '' if the -th edge of the graph should be directed from  to , and '' otherwise. Edges are numbered in the order they are given in the input.", "tutorial": "What if the given graph will contain a cycle of odd length? It will mean that some two consecutive edges of this cycle will be oriented in the same way and will form a path of length two.What if there is no cycles of odd length in this graph? Then it is bipartite. Let's color it and see what we got. We got some vertices in the left part, some vertices in the right part and all edges connecting vertices from different parts. Let's orient all edges such that them will go from the left part to the right part. That's it.", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int N = 200 * 1000 + 11;\n\nint n, m;\nvector<int> g[N];\nvector<pair<int, int>> e;\n\nbool bipartite;\nvector<int> color;\n\nvoid dfs(int v, int c) {\n\tcolor[v] = c;\n\tfor (auto to : g[v]) {\n\t\tif (color[to] == -1) {\n\t\t\tdfs(to, c ^ 1);\n\t\t} else {\n\t\t\tif (color[to] == color[v]) {\n\t\t\t\tbipartite = false;\n\t\t\t}\n\t\t}\n\t}\n}\n\nint main() {\n#ifdef _DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n#endif\n\t\n\tcin >> n >> m;\n\tfor (int i = 0; i < m; ++i) {\n\t\tint x, y;\n\t\tcin >> x >> y;\n\t\t--x, --y;\n\t\tg[x].push_back(y);\n\t\tg[y].push_back(x);\n\t\te.push_back(make_pair(x, y));\n\t}\n\t\n\tbipartite = true;\n\tcolor = vector<int>(n, -1);\n\tdfs(0, 0);\n\t\n\tif (!bipartite) {\n\t\tcout << \"NO\" << endl;\n\t\treturn 0;\n\t}\n\t\n\tcout << \"YES\" << endl;\n\tfor (int i = 0; i < m; ++i) {\n\t\tcout << (color[e[i].first] < color[e[i].second]);\n\t}\n\tcout << endl;\n\t\n\treturn 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}