{"link": "https://codeforces.com//contest/1216/problem/A", "problemId": "416600", "shortId": "1216A", "contest_number": "1216", "name": "A. Prefixes", "statement": "Nikolay got a string  of  length , which consists only of lowercase Latin letters '' and ''. Its positions are numbered from  to .He wants to modify his string so that every its prefix of  length has an equal amount of letters '' and ''. To achieve that, Nikolay can perform the following operation arbitrary number of times (possibly, zero): choose some position in his string and replace the letter on this position with the other letter (i.e. replace '' with '' or replace '' with ''). Nikolay can use no letters except '' and ''.The prefix of string  of length  () is a string .For example, for the string \"abba\" there are two prefixes of the even length. The first is \"ab\" and the second \"abba\". Both of them have the same number of '' and ''.Your task is to calculate the minimum number of operations Nikolay has to perform with the string  to modify it so that every its prefix of  length has an equal amount of letters '' and ''.", "input": "The first line of the input contains one  integer   \u2014 the length of string . The second line of the input contains the string  of length , which consists only of lowercase Latin letters '' and ''.", "output": "In the first line print the minimum number of operations Nikolay has to perform with the string  to modify it so that every its prefix of  length has an equal amount of letters '' and ''. In the second line print the string Nikolay obtains after applying all the operations. If there are multiple answers, you can print any of them.", "tutorial": "The problem can be solved like this: firstly let's iterate over all  from  to . If characters  and  are the same then we obviously need to replace one of them with the other character. We can see that such replacements are enough to make the string suitable.", "solution": "n, s = int(input()), list(input())\nans = 0\nfor i in range(0, n, 2):\n\tif (s[i] == s[i + 1]):\n\t\ts[i] = chr(1 - ord(s[i]) + 2 * ord('a'))\n\t\tans += 1\nprint(ans)\nprint(''.join(s))", "interactive": false, "noSolution": false, "noTutorial": false}