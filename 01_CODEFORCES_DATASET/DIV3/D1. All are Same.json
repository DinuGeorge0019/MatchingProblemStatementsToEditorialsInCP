{"link": "https://codeforces.com//contest/1593/problem/D1", "problemId": "1142164", "shortId": "1593D1", "contest_number": "1593", "name": "D1. All are Same", "statement": "Polycarp has an array of  ( is even) integers . Polycarp conceived of a positive integer . After that, Polycarp began performing the following operations on the array: take an index  () and reduce the number  by .After Polycarp performed some (possibly zero) number of such operations, it turned out that  numbers in the array became the same. Find the maximum  at which such a situation is possible, or print  if such a number can be arbitrarily large.", "input": "The first line contains one integer  () \u2014 the number of test cases. Then  test cases follow. Each test case consists of two lines. The first line contains an even integer  () ( is even). The second line contains  integers  (). It is guaranteed that the sum of all  specified in the given test cases does not exceed .", "output": "For each test case output on a separate line an integer  () \u2014 the maximum possible number that Polycarp used in operations on the array, or , if such a number can be arbitrarily large.", "tutorial": " can be arbitrarily large if and only if all numbers in the array are the same. In this case, we can choose any number  and subtract it from all the numbers, for example, exactly once.Suppose we fix some . Let  be the number of subtractions of the number  from the number . In this case, all numbers will be equal if and only if, for any two numbers  and  from the array, . Let  be the minimum of . Then all numbers in the array become the same if for each index  we subtract from   not , but  times. Then we will never subtract  from the element . This means that there is always an element in the array from which we can never subtract . This element is the minimum on the array. Then from  we will subtract  exactly  times.Thus, with the current , it is possible to make all elements equal if and only if for all elements  the value  (where  is the minimum on the array) is divisible by . So, the maximum  is the greatest common divisor of all values of , .", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main()\n{\n\tint t;\n\tcin >> t;\n\n\twhile (t--)\n\t{\n\t\tint n;\n\t\tcin >> n;\n\n\t\tvector<int> a(n);\n\t\tfor (int i = 0; i < n; i++) cin >> a[i];\n\n\t\tbool inf = true;\n\t\tint minval = a[0];\n\n\t\tfor (int i = 1; i < n; i++)\n\t\t{\n\t\t\tif (a[i] != a[0])\n\t\t\t{\n\t\t\t\tinf = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tminval = min(minval, a[i]);\n\t\t}\n\n\t\tif (inf)\n\t\t{\n\t\t\tcout << \"-1\\n\";\n\t\t\tcontinue;\n\t\t}\n\n\t\tsort(a.begin(), a.end());\n\n\t\tint ans = 0;\n\t\tfor (int i = 0; i < n; i++)\n\t\t\tans = gcd(ans, a[i] - minval);\n\t\tcout << ans << '\\n';\n\t}\n\n\treturn 0;\n}\n", "interactive": false, "noSolution": false, "noTutorial": false}