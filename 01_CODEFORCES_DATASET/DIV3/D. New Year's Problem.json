{"link": "https://codeforces.com//contest/1619/problem/D", "problemId": "1234625", "shortId": "1619D", "contest_number": "1619", "name": "D. New Year's Problem", "statement": "Vlad has  friends, for each of whom he wants to buy  gift for the New Year.There are  shops in the city, in each of which he can buy a gift for any of his friends. If the -th friend () receives a gift bought in the shop with the number  (), then the friend receives  units of joy. The rectangular table  is given in the input.Vlad has time to visit at most  shops (where  is the number of ). He chooses which shops he will visit and for which friends he will buy gifts in each of them.Let the -th friend receive  units of joy from Vlad's gift. Let's find the value . Vlad's goal is to buy gifts so that the value of  is as large as possible. In other words, Vlad wants to maximize the minimum of the joys of his friends.For example, let , . Let the joy from the gifts that we can buy in the first shop: , , in the second shop: , .Then it is enough for Vlad to go only to the second shop and buy a gift for the first friend, bringing joy , and for the second\u00a0\u2014 bringing joy . In this case, the value  will be equal to Help Vlad choose gifts for his friends so that the value of  is as high as possible. Please note that each friend must receive one gift. Vlad can visit at most  shops (where  is the number of ). In the shop, he can buy any number of gifts.", "input": "The first line of the input contains an integer  () \u2014 the number of test cases in the input. An empty line is written before each test case. Then there is a line containing integers  and  (, ) separated by a space\u00a0\u2014 the number of shops and the number of friends, where  is the product of  and . Then  lines follow, each containing  numbers. The number in the -th row of the -th column  () is the joy of the product intended for friend number  in shop number . It is guaranteed that the sum of the values  over all test cases in the test does not exceed .", "output": "Print  lines, each line must contain the answer to the corresponding test case\u00a0\u2014 the maximum possible value of , where  is the minimum of the joys from a gift for all of Vlad's friends.", "tutorial": "Note that if we cannot get joy , then we cannot get , and if we can get at least , then we can get at least . These facts allow us to use binary search to find the answer.Now we need to understand how exactly we can recognize whether we can gain joy at least  or not. We can enter at most  shops, so we always need to take two gifts from some store, which means there must be a store in which we can find two or more gifts with pleasure at least . Also, each friend should receive a gift, which means that we should be able to buy each gift with pleasure at least . It takes O (nm) to check that both of these conditions are met. The total solution works in O (nm \u2217 log (nm)).", "solution": "//\n// Created by Vlad on 17.12.2021.\n//\n \n#include <bits/stdc++.h>\n \n#define int long long\n#define mp make_pair\n#define x first\n#define y second\n#define all(a) (a).begin(), (a).end()\n#define rall(a) (a).rbegin(), (a).rend()\n \n/*#pragma GCC optimize(\"Ofast\")\n#pragma GCC optimize(\"no-stack-protector\")\n#pragma GCC optimize(\"unroll-loops\")\n#pragma GCC target(\"sse,sse2,sse3,ssse3,popcnt,abm,mmx,tune=native\")\n#pragma GCC optimize(\"fast-math\")\n*/\ntypedef long double ld;\ntypedef long long ll;\n \nusing namespace std;\n \nmt19937 rnd(143);\n \nconst int inf = 1e10;\nconst int M = 998244353;\nconst ld pi = atan2(0, -1);\nconst ld eps = 1e-4;\n \nint n, m;\nvector<vector<int>> p;\n \nbool check(int x){\n    vector<bool> abl(m);\n    bool pair = false;\n    for(int i = 0; i < n; ++i){\n        int c = 0;\n        for(int j = 0; j < m; ++j){\n            if(p[i][j] >= x){\n                abl[j] = true;\n                c++;\n            }\n        }\n        if(c > 1) pair = true;\n    }\n    if(!pair && m > 1) return false;\n    bool ans = true;\n    for(bool b: abl){\n        ans = ans && b;\n    }\n    return ans;\n}\n \nvoid solve() {\n    cin >> n >> m;\n    p.assign(n, vector<int>(m));\n    for(int i = 0; i < n; ++i){\n        for(int j = 0; j < m; ++j){\n            cin >> p[i][j];\n        }\n    }\n    int l = 1, r = 2;\n    while (check(r)) r *= 2;\n    while (r - l > 1){\n        int mid = (r + l) / 2;\n        if(check(mid)) l = mid;\n        else r = mid;\n    }\n    cout << l;\n}\n \nbool multi = true;\n \nsigned main() {\n    //freopen(\"in.txt\", \"r\", stdin);\n    //freopen(\"in.txt\", \"w\", stdout);\n    int t = 1;\n    if (multi) {\n        cin >> t;\n    }\n    for (; t != 0; --t) {\n        solve();\n        cout << \"\\n\";\n    }\n    return 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}