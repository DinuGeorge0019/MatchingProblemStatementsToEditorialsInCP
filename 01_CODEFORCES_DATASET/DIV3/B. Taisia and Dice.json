{"link": "https://codeforces.com//contest/1790/problem/B", "problemId": "1753647", "shortId": "1790B", "contest_number": "1790", "name": "B. Taisia and Dice", "statement": "Taisia has  six-sided dice. Each face of the die is marked with a number from  to , each number from  to  is used once.Taisia rolls all  dice at the same time and gets a sequence of values  (), where  is the value on the upper face of the -th dice. The sum of this sequence is equal to .Suddenly, Taisia's pet cat steals exactly  dice with  value  and calculates the sum of the values on the remaining  dice, which is equal to .You only know the number of dice  and the values of , . Restore a possible sequence  that fulfills the constraints.", "input": "The first line contains the integer  ()\u00a0\u2014 the number of testcases. Each testcase is given on a separate line and contains three integers , ,  (, ). It is guaranteed that a solution exists.", "output": "For each testcase, print:  integers  in any order. It is guaranteed that such sequence exists. If there are multiple solutions, print any.", "tutorial": "It is easy to find the value on the cube that the cat stole, it is equal . All other values must be  . Let's try to get  by taking   times and adding the remainder there if it is non-zero.We could not get more than  cubes this way, because otherwise , but we are guaranteed that the answer exists. Now, until we get the  cube, let's find the cube with the maximum value, reduce it by  and add the cube with the value of .We can definitely get  dice, because otherwise , but we are guaranteed that the answer exists. It remains only to add a cube with the value of  to our  cubes.We obtained a solution with  asymptotics.", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int MAXN = 55;\n\nint n, s1, s2;\nvector<int> res;\n\nvoid solve() {\n\tres.clear();\n\tint d = s1 - s2;\n\tfor (; s2 >= d; s2 -= d)\n\t\tres.push_back(d);\n\tif (s2) res.push_back(s2);\n\tfor (int i = 0; i < res.size() && res.size() + 1 < n;) {\n\t\tif (res[i] == 1) {\n\t\t    ++i;\n\t\t    continue;\n\t\t}\n\t\t--res[i];\n\t\tres.push_back(1);\n\t}\n\tres.push_back(d);\n}\n\nint main() {\n\tint t; cin >> t;\n\twhile (t--) {\n\t\tcin >> n >> s1 >> s2;\n\t\tsolve();\n\t\tsort(res.begin(), res.end());\n\t\tfor (int x: res)\n\t\t\tcout << x << ' ';\n\t\tcout << endl;\n\t}\n}", "interactive": false, "noSolution": false, "noTutorial": false}