{"link": "https://codeforces.com//contest/1811/problem/D", "problemId": "1864326", "shortId": "1811D", "contest_number": "1811", "name": "D. Umka and a Long Flight", "statement": "The girl Umka loves to travel and participate in math olympiads. One day she was flying by plane to the next olympiad and out of boredom explored a huge checkered sheet of paper.Denote the -th Fibonacci number as A checkered rectangle with a height of  and a width of  is called a Fibonacci rectangle  .Umka has a Fibonacci rectangle  . Someone colored a cell in it at the intersection of the row  and the column .It is necessary to cut this rectangle  into  squares in such way that  the painted cell was in a square with a side of ;  there was  pair of squares with equal sides;  the side of each square was equal to a Fibonacci number. Will Umka be able to cut this rectangle in that way?", "input": "The first line contains an integer  ()\u00a0\u2014 number of test cases. For each test case the integers , ,  are given (, , )\u00a0\u2014  of the Fibonacci rectangle and the coordinates of the colored cell.", "output": "For each test case, print \"\" if the answer is positive, and \"\" otherwise. You can print \"\" and \"\" in any case (for example, the strings \"\", \"\" and \"\" will be recognized as a positive answer).", "tutorial": "  , which can be proved by induction: .  If the partition exists, it has the form , since the area of the rectangle with another partition will be greater than .  We will cut the rectangles in the order . Denote the coordinates of the colored cell at the step  as .  If  and , then there is no partition, since the square  at any location overlaps the colored cell.  Cut off the square  from the right or left edge, depending on the location of the colored cell, that is,  or .  Suppose that it was advantageous to cut it not from the edge, then it is necessary to cut the rectangles  and , where  using the set . Then  will not enter the partition, but , so . We came to a contradiction. ", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int MAXN = 50;\n\nint fib[MAXN];\n\nvoid build() {\n\tfib[0] = fib[1] = 1;\n\tfor (int i = 2; i < MAXN; ++i)\n\t\tfib[i] = fib[i - 2] + fib[i - 1];\n}\n\nbool solve(int n, int x, int y) {\n\tif (n == 1) return true;\n\tif (fib[n - 1] <= y && y < fib[n])\n\t\treturn false;\n\tif (fib[n] <= y)\n\t\ty -= fib[n];\n\treturn solve(n - 1, y, x);\n}\n\nint main() {\n\tint t; cin >> t;\n\tbuild();\n\twhile (t--) {\n\t\tint n, x, y; cin >> n >> x >> y;\n\t\tcout << (solve(n, --x, --y) ? \"YES\" : \"NO\") << '\\n';\n\t}\n}", "interactive": false, "noSolution": false, "noTutorial": false}