{"link": "https://codeforces.com//contest/1324/problem/F", "problemId": "560265", "shortId": "1324F", "contest_number": "1324", "name": "F. Maximum White Subtree", "statement": "You are given a tree consisting of  vertices. A tree is a connected undirected graph with  edges. Each vertex  of this tree has a color assigned to it ( if the vertex  is white and  if the vertex  is black).You have to solve the following problem for each vertex : what is the maximum difference between the number of white and the number of black vertices you can obtain if you choose some subtree of the given tree that  the vertex ? The subtree of the tree is the connected subgraph of the given tree. More formally, if you choose the subtree that contains  white vertices and  black vertices, you have to maximize .", "input": "The first line of the input contains one integer  () \u2014 the number of vertices in the tree. The second line of the input contains  integers  (), where  is the color of the -th vertex. Each of the next  lines describes an edge of the tree. Edge  is denoted by two integers  and , the labels of vertices it connects ). It is guaranteed that the given edges form a tree.", "output": "Print  integers , where  is the maximum possible difference between the number of white and black vertices in some subtree that contains the vertex .", "tutorial": "This problem is about the \"rerooting\" technique. Firstly, let's calculate the answer for some fixed root. How can we do this? Let  be the maximum possible difference between the number of white and black vertices in some subtree of  (yes, the subtree of the rooted tree, i.e.  and all its direct and indirect children) that  the vertex . We can calculate this dynamic programming by simple dfs, for the vertex  it will look like this: .Okay, we can store the answer for the root somewhere. What's next? Let's try to change the root from the vertex  to some adjacent to it vertex . Which states of dynamic programming will change? Only  and . Firstly, we need to \"remove\" the child  from the subtree of the vertex : . Then we need to \"attach\" the vertex  and make it a child of the vertex : . Then we need to run this process recursively from  (store the answer, reroot the tree and so on) and when it ends we need to \"rollback\" our changes. Now  is the root again and we can try the next child of  as the root.Time complexity: .", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nvector<int> a;\nvector<int> dp;\nvector<int> ans;\nvector<vector<int>> g;\n\nvoid dfs(int v, int p = -1) {\n\tdp[v] = a[v];\n\tfor (auto to : g[v]) {\n\t\tif (to == p) continue;\n\t\tdfs(to, v);\n\t\tdp[v] += max(dp[to], 0);\n\t}\n}\n\nvoid dfs2(int v, int p = -1) {\n\tans[v] = dp[v];\n\tfor (auto to : g[v]) {\n\t\tif (to == p) continue;\n\t\tdp[v] -= max(0, dp[to]);\n\t\tdp[to] += max(0, dp[v]);\n\t\tdfs2(to, v);\n\t\tdp[to] -= max(0, dp[v]);\n\t\tdp[v] += max(0, dp[to]);\n\t}\n}\n\nint main() {\n#ifdef _DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n#endif\n\t\n\tint n;\n\tcin >> n;\n\ta = dp = ans = vector<int>(n);\n\tg = vector<vector<int>>(n);\n\tfor (int i = 0; i < n; ++i) {\n\t\tcin >> a[i];\n\t\tif (a[i] == 0) a[i] = -1;\n\t}\n\tfor (int i = 0; i < n - 1; ++i) {\n\t\tint x, y;\n\t\tcin >> x >> y;\n\t\t--x, --y;\n\t\tg[x].push_back(y);\n\t\tg[y].push_back(x);\n\t}\n\t\n\tdfs(0);\n\tdfs2(0);\n\tfor (auto it : ans) cout << it << \" \";\n\tcout << endl;\n\t\n\treturn 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}