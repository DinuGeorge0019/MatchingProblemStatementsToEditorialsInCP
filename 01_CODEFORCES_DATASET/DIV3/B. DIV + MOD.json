{"link": "https://codeforces.com//contest/1650/problem/B", "problemId": "1321161", "shortId": "1650B", "contest_number": "1650", "name": "B. DIV + MOD", "statement": "Not so long ago, Vlad came up with an interesting function: , where  is , rounded ,  \u2014 the remainder of the integer division of  by .For example, with  and , the value .The number  is fixed and known to Vlad. Help Vlad find the maximum value of  if  can take any integer value from  to  inclusive ().", "input": "The first line of input data contains an integer  () \u2014 the number of input test cases. This is followed by  lines, each of which contains three integers ,  and  ()\u00a0\u2014 the left and right boundaries of the segment and the fixed value of .", "output": "For each test case, output one number on a separate line\u00a0\u2014 the maximum value of the function on a given segment for a given .", "tutorial": "Consider . Note that  is maximal over the entire segment from  to , so if there is  in which  gives a greater result, then .Note that numbers from  to  that have an incomplete quotient when divided by  equal to  do not fit this condition (and are guaranteed to have a value  less than ). And the number :  Has the maximum possible remainder ;  Has the maximum possible  among numbers less than . So there are two candidates for the answer\u00a0\u2014 these are  and . The second candidate is suitable only if it is at least . It remains only to compare the values of  and select the maximum.", "solution": "#include <bits/stdc++.h>\n\n//#define int long long\n#define mp make_pair\n#define x first\n#define y second\n#define all(a) (a).begin(), (a).end()\n#define rall(a) (a).rbegin(), (a).rend()\n\n#pragma GCC optimize(\"Ofast\")\n#pragma GCC optimize(\"no-stack-protector\")\n#pragma GCC optimize(\"unroll-loops\")\n#pragma GCC target(\"sse,sse2,sse3,ssse3,popcnt,abm,mmx,tune=native\")\n#pragma GCC optimize(\"fast-math\")\n\ntypedef long double ld;\ntypedef long long ll;\n\nusing namespace std;\n\nmt19937 rnd(143);\n\nconst ll inf = 1e9;\nconst ll M = 1e9;\nconst ld pi = atan2(0, -1);\nconst ld eps = 1e-4;\n\nvoid solve() {\n    int l, r, x;\n    cin >> l >> r >> x;\n    int ans = r / x + r % x;\n    int m = r / x * x - 1;\n    if(m >= l)ans = max(ans, m / x + m % x);\n    cout << ans;\n}\n\nbool multi = true;\n\nsigned main() {\n    //freopen(\"in.txt\", \"r\", stdin);\n    //freopen(\"in.txt\", \"w\", stdout);\n    int t = 1;\n    if (multi) {\n        cin >> t;\n    }\n    for (; t != 0; --t) {\n        solve();\n        cout << \"\\n\";\n    }\n    return 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}