{"link": "https://codeforces.com//contest/1015/problem/A", "problemId": "203546", "shortId": "1015A", "contest_number": "1015", "name": "A. Points in Segments", "statement": "You are given a set of  segments on the axis , each segment has integer endpoints between  and  inclusive. Segments may intersect, overlap or even coincide with each other. Each segment is characterized by two integers  and  () \u2014 coordinates of the left and of the right endpoints. Consider all integer points between  and  inclusive. Your task is to print all such points that don't belong to any segment. The point  belongs to the segment  if and only if .", "input": "The first line of the input contains two integers  and  () \u2014 the number of segments and the upper bound for coordinates. The next  lines contain two integers each  and  () \u2014 the endpoints of the -th segment. Segments may intersect, overlap or even coincide with each other. Note, it is possible that , i.e. a segment can degenerate to a point.", "output": "In the first line print one integer  \u2014 the number of points that don't belong to any segment. In the second line print exactly  integers in  order \u2014 the points that don't belong to any segment. All points you print should be distinct. If there are no such points at all, print a single integer  in the first line and either leave the second line empty or do not print it at all.", "tutorial": "In this problem all you need is to check for each point from  to  if it cannot belongs to any segment. It can be done in  by two nested loops or in  by easy prefix sums calculation. Both solutions are below.", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n#ifdef _DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n#endif\n\t\n\tint n, m;\n\tcin >> n >> m;\n\tvector<int> cnt(m + 2);\n\tfor (int i = 0; i < n; ++i) {\n\t\tint l, r;\n\t\tcin >> l >> r;\n\t\t++cnt[l];\n\t\t--cnt[r + 1];\n\t}\n\tfor (int i = 1; i <= m; ++i)\n\t\tcnt[i] += cnt[i - 1];\n\t\n\tvector<int> ans;\n\tfor (int i = 1; i <= m; ++i) {\n\t\tif (cnt[i] == 0)\n\t\t\tans.push_back(i);\n\t}\n\t\n\tcout << ans.size() << endl;\n\tfor (auto it : ans) cout << it << \" \";\n\tcout << endl;\n\t\n\treturn 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}