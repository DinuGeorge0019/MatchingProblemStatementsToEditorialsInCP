{"link": "https://codeforces.com//contest/1360/problem/E", "problemId": "629825", "shortId": "1360E", "contest_number": "1360", "name": "E. Polygon", "statement": "Polygon is not only the best platform for developing problems but also a square matrix with side , initially filled with the character .On the polygon, military training was held. The soldiers placed a cannon above each cell in the first row and a cannon to the left of each cell in the first column. Thus, exactly  cannons were placed.     Cannons shoot character . At any moment of time, no more than one cannon is shooting. When a  flies out of a cannon, it flies forward (in the direction of the shot) until it collides with a polygon border or another . After that, it takes the cell in which it was before the collision and remains there. Take a look at the examples for better understanding.More formally:   if a cannon stands in the row , to the left of the first column, and shoots with a , then the  starts its flight from the cell () and ends in some cell ();  if a cannon stands in the column , above the first row, and shoots with a , then the  starts its flight from the cell () and ends in some cell (). For example, consider the following sequence of shots:    You have a report from the military training on your desk. This report is a square matrix with side length  consisting of  and . You wonder if the training actually happened. In other words, is there a sequence of shots such that, after the training, you get the given matrix?Each cannon can make an arbitrary number of shots. Before the training, each cell of the polygon contains .", "input": "The first line contains an integer  ()\u00a0\u2014 the number of test cases. Then  test cases follow. Each test case starts with a line containing an integer  ()\u00a0\u2014 the size of the polygon. This is followed by  lines of length , consisting of  and \u00a0\u2014 the polygon matrix after the training. The total area of the matrices in all test cases in one test does not exceed .", "output": "For each test case print:    if there is a sequence of shots leading to a given matrix;   if such a sequence does not exist.  The letters in the words  and  can be printed in any case.", "tutorial": "Let's see how the matrix looks like after some sequence of shoots:   The matrix consists of , or  There is at least one  at position () or (), and any  not at position () or () must have  below or right. If the second condition is violated, then the  in the corresponding cell would continue its flight. Thus, it is necessary and sufficient to verify that the matrix satisfies the condition above.", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nbool a[50][50];\n\nint main() {\n  int tests;\n  cin >> tests;\n  while (tests--) {\n    int n;\n    cin >> n;\n    for (int i = 0; i < n; ++i) {\n      for (int j = 0; j < n; ++j) {\n        char c;\n        cin >> c;\n        a[i][j] = c - '0';\n      }\n    }\n\n    bool ans = true;\n    for (int i = n - 2; i >= 0; --i) {\n      for (int j = n - 2; j >= 0; --j) {\n        if (a[i][j] && !a[i + 1][j] && !a[i][j + 1]) {\n          ans = false;\n        }\n      }\n    }\n\n    cout << (ans ? \"YES\" : \"NO\") << endl;\n  }\n}", "interactive": false, "noSolution": false, "noTutorial": false}