{"link": "https://codeforces.com//contest/988/problem/C", "problemId": "186728", "shortId": "988C", "contest_number": "988", "name": "C. Equal Sums", "statement": "You are given  sequences of integers. The length of the -th sequence equals to .You have to choose exactly two sequences  and  () such that you can remove exactly one element in each of them in such a way that the sum of the changed sequence  (its length will be equal to ) equals to the sum of the changed sequence  (its length will be equal to ).Note that it's  to remove exactly one element in each of the two chosen sequences.Assume that the sum of the empty (of the length equals ) sequence is .", "input": "The first line contains an integer  () \u2014 the number of sequences. Then  pairs of lines follow, each pair containing a sequence. The first line in the -th pair contains one integer  () \u2014 the length of the -th sequence. The second line of the -th pair contains a sequence of  integers . The elements of sequences are integer numbers from  to . The sum of lengths of all given sequences don't exceed , i.e. .", "output": "If it is impossible to choose two sequences such that they satisfy given conditions, print \"\" (without quotes). Otherwise in the first line print \"\" (without quotes), in the second line \u2014 two integers ,  (), in the third line \u2014 two integers ,  (). It means that the sum of the elements of the -th sequence without the element with index  equals to the sum of the elements of the -th sequence without the element with index . Two chosen sequences must be distinct, i.e. . You can print them in any order. If there are multiple possible answers, print any of them.", "tutorial": "Let's calculate the array of triples . Triple  means that the sum of the sequence  without the element at position  will be equal to . Triples can be easily calculated in a following manner: for each sequence find its sum, then iterate over all its elements and subtract each of them one after another. Now sort array  with the standard compare function. Finally the answer is \"\" if and only if there exist two adjacent elements with equal sums and different sequences (it is very easy to see). So if we find such a pair, then the answer will be \"\", otherwise the answer will be \"\".Time complexity of the solution is ).", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n#ifdef _DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n#endif\n\t\n\tint k;\n\tcin >> k;\n\tvector<pair<int, pair<int, int>>> a;\n\tfor (int i = 0; i < k; ++i) {\n\t\tint n;\n\t\tcin >> n;\n\t\tvector<int> x(n);\n\t\tfor (int j = 0; j < n; ++j)\n\t\t\tcin >> x[j];\n\t\tint sum = accumulate(x.begin(), x.end(), 0);\n\t\tfor (int j = 0; j < n; ++j)\n\t\t\ta.push_back(make_pair(sum - x[j], make_pair(i, j)));\n\t}\n\t\n\tstable_sort(a.begin(), a.end());\n\tfor (int i = 0; i < int(a.size()) - 1; ++i) {\n\t\tif (a[i].first == a[i + 1].first && (a[i].second.first != a[i + 1].second.first)) {\n\t\t\tcout << \"YES\" << endl;\n\t\t\tcout << a[i + 1].second.first + 1 << \" \" << a[i + 1].second.second + 1 << endl;\n\t\t\tcout << a[i].second.first + 1 << \" \" << a[i].second.second + 1 << endl;\n\t\t\treturn 0;\n\t\t}\n\t}\n\t\n\tcout << \"NO\\n\";\n\t\n\treturn 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}