{"link": "https://codeforces.com//contest/1433/problem/A", "problemId": "766656", "shortId": "1433A", "contest_number": "1433", "name": "A. Boring Apartments", "statement": "There is a building consisting of  apartments numbered from  to , inclusive.Call an apartment , if its number consists of . Examples of boring apartments are  and so on.Our character is a troublemaker, and he calls the intercoms of all  apartments, till someone answers the call, in the following order:  First he calls all apartments consisting of digit , in increasing order ().  Next he calls all apartments consisting of digit , in increasing order ()  And so on. The resident of the boring apartment  answers the call, and our character  calling anyone further.Our character wants to know how many digits he pressed in total and your task is to help him to count the total number of keypresses.For example, if the resident of boring apartment  answered, then our character called apartments with numbers  and the total number of digits he pressed is .You have to answer  independent test cases.", "input": "The first line of the input contains one integer  () \u2014 the number of test cases. The only line of the test case contains one integer  () \u2014 the apartment number of the resident who answered the call. It is guaranteed that  consists of the same digit.", "output": "For each test case, print the answer: how many digits our character pressed in total.", "tutorial": "This problem has a lot of solutions. You could even hard code all possible tests to solve it. But this problem has  solution. Let the digit of  be . Then our character pressed each digit before  exactly  times (). And the amount of times he pressed the digit  depends on the length of . Let  be the length of , then the amount of times he pressed the digit  is . So the final answer is .", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n#ifdef _DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n#endif\n\t\n\tint t;\n\tcin >> t;\n\twhile (t--) {\n\t\tstring x;\n\t\tcin >> x;\n\t\tint dig = x[0] - '0' - 1;\n\t\tint len = x.size();\n\t\tcout << dig * 10 + len * (len + 1) / 2 << endl;\n\t}\n\t\n\treturn 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}