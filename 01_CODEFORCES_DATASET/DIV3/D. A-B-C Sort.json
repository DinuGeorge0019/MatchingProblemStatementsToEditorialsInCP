{"link": "https://codeforces.com//contest/1674/problem/D", "problemId": "1387200", "shortId": "1674D", "contest_number": "1674", "name": "D. A-B-C Sort", "statement": "You are given three arrays ,  and . Initially, array  consists of  elements, arrays  and  are empty.You are performing the following algorithm that consists of two steps:   Step : while  is not empty, you take  from  and move it  of array . If  currently has odd length, you can choose: place the element from  to the left or to the right of the middle element of . As a result,  becomes empty and  consists of  elements.  Step : while  is not empty, you take  from  and move it  of array . If  currently has even length, you can choose which of two middle elements to take. As a result,  becomes empty and  now consists of  elements.  Refer to the Note section for examples.Can you make array  sorted in non-decreasing order?", "input": "The first line contains a single integer  ()\u00a0\u2014 the number of test cases. Next  cases follow. The first line of each test case contains the single integer  ()\u00a0\u2014 the length of array . The second line of each test case contains  integers  ()\u00a0\u2014 the array  itself. It's guaranteed that the sum of  doesn't exceed .", "output": "For each test, print  (case-insensitive), if you can make array  sorted in non-decreasing order. Otherwise, print  (case-insensitive).", "tutorial": "Let's look at elements  and . After the first step, they will always move to positions  and  (it's up to you to choose:  and  or vice versa) because all remaining  for  will be placed between  and .After the second step, elements  and  will always be placed at positions  and  (it's also up to you to decide the exact order) because it's easy to see that you first take all  for  and only after that\u00a0\u2014  and .In other words, elements  and  are moved to positions  and . We can analogically prove that each pair  is moved to a pair of positions : you first take all elements  for  and place them at positions  and ; then you move  and ; finally you move all remaining elements from  between  and . Step  just does everything in \"reverse\" order to step .It means that array  is basically array , but you can swap elements in pairs  for . And to make  () sorted, we can try to sort each pair and check\u00a0\u2014 is it enough to sort the whole array or not.", "solution": "fun main() {\n    repeat(readLine()!!.toInt()) {\n        val n = readLine()!!.toInt()\n        val a = readLine()!!.split(' ').map { it.toInt() }.toIntArray()\n        for (i in (n % 2) until n step 2) {\n            if (a[i] > a[i + 1])\n                a[i] = a[i + 1].also { a[i + 1] = a[i] }\n        }\n        var sorted = true\n        for (i in a.indices)\n            if (i > 0 && a[i - 1] > a[i])\n                sorted = false\n        println(if(sorted) \"YES\" else \"NO\")\n    }\n}", "interactive": false, "noSolution": false, "noTutorial": false}