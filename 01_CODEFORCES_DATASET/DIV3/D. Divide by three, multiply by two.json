{"link": "https://codeforces.com//contest/977/problem/D", "problemId": "181255", "shortId": "977D", "contest_number": "977", "name": "D. Divide by three, multiply by two", "statement": "Polycarp likes to play with numbers. He takes some integer number , writes it down on the board, and then performs with it  operations of the two kinds:   divide the number  by  ( must be divisible by );  multiply the number  by . After each operation, Polycarp writes down the result on the board and replaces  by the result. So there will be  numbers on the board after all.You are given a sequence of length  \u2014 the numbers that Polycarp wrote down. This sequence is given in arbitrary order, i.e. the order of the sequence can mismatch the order of the numbers written on the board.Your problem is to rearrange (reorder) elements of this sequence in such a way that it can match possible Polycarp's game in the order of the numbers written on the board. I.e. each next number will be exactly two times of the previous number or exactly one third of previous number.It is guaranteed that the answer exists.", "input": "The first line of the input contatins an integer number  () \u2014 the number of the elements in the sequence. The second line of the input contains  integer numbers  () \u2014 rearranged (reordered) sequence that Polycarp can wrote down on the board.", "output": "Print  integer numbers \u2014 rearranged (reordered) input sequence that can be the sequence that Polycarp could write down on the board. It is guaranteed that the answer exists.", "tutorial": "Let  be the maximum integer  such that  ( is divisible by ).Our problem is to rearrange the given array in such a way that (easy to see it if we look at our operations) if it looks like , then for each  the next inequality will be satisfied: . And if  then numbers must be placed in increasing order (because of our operations). So we can store an array of pairs , when , , . Then if we sort it in lexicographical order we can just print the second elements of the sorted array .", "solution": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long LL;\nint count3(LL x){\n  int ret=0;\n  while(x % 3 == 0){\n    ret++;\n    x /= 3;\n  }\n  return ret;\n}\nint n;\nvector<pair<int,LL>> v;\nint main(){\n  cin>>n;\n  v.resize(n);\n  for(int i=0; i<n; i++){\n    cin>>v[i].second;\n    v[i].first=-count3(v[i].second);\n  }\n  sort(v.begin(), v.end());\n  for(int i=0; i<n; i++)\n    printf(\"%lld%c\", v[i].second, \" \\n\"[i + 1 == n]);\n}", "interactive": false, "noSolution": false, "noTutorial": false}