{"link": "https://codeforces.com//contest/1433/problem/E", "problemId": "766660", "shortId": "1433E", "contest_number": "1433", "name": "E. Two Round Dances", "statement": "One day,  people ( is an even number) met on a plaza and made two round dances, each round dance consists of exactly  people. Your task is to find the number of ways  people can make two round dances if each round dance consists of exactly  people. Each person should belong to exactly one of these two round dances.Round dance is a dance circle consisting of  or more people. Two round dances are indistinguishable (equal) if one can be transformed to another by choosing the first participant. For example, round dances ,  and  are indistinguishable.For example, if  then the number of ways is : one round dance consists of the first person and the second one of the second person.For example, if  then the number of ways is . Possible options:  one round dance \u2014 , another \u2014 ;  one round dance \u2014 , another \u2014 ;  one round dance \u2014 , another \u2014 . Your task is to find the number of ways  people can make two round dances if each round dance consists of exactly  people.", "input": "The input contains one integer  (),  is an even number.", "output": "Print one integer \u2014 the number of ways to make two round dances. It is guaranteed that the answer fits in the -bit integer data type.", "tutorial": "Firstly, we need to choose the set of  people to be in the first round dance (the other half is going to the second one). The number of ways to do that is . Then we need to set some order of people in both round dances, but we don't want to forget about rotation (because rotation can lead us to counting the same ways several times). So, the number of ways to arrange people inside one round dance is . This is true because we just \"fixed\" who will be the first in the round dance, and place others in every possible order. So, we need to multiply our initial answer by this value twice because we have two round dances. And, finally, we have to divide our answer by  because we counted \"ordered\" pairs (i.e. we distinguish pairs of kind  and  but we don't have to do that). So, the final answer is  divided by . This formula can be reduced to .You could also find the sequence of answers in OEIS (and this can be really useful skill sometimes).", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int N = 21;\n\nlong long f[N];\n\nint main() {\n#ifdef _DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n#endif\n\t\n\tint n;\n\tcin >> n;\n\tf[0] = 1;\n\tfor (int i = 1; i < N; ++i) {\n\t\tf[i] = f[i - 1] * i;\n\t}\n\t\n\tlong long ans = f[n] / f[n / 2] / f[n / 2];\n\tans = ans * f[n / 2 - 1];\n\tans = ans * f[n / 2 - 1];\n\tans /= 2;\n\t\n\tcout << ans << endl;\n\t\n\treturn 0;\n}\n", "interactive": false, "noSolution": false, "noTutorial": false}