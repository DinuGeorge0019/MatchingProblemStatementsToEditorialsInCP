{"link": "https://codeforces.com//contest/1618/problem/B", "problemId": "1227951", "shortId": "1618B", "contest_number": "1618", "name": "B. Missing Bigram", "statement": "Polycarp has come up with a new game to play with you. He calls it \"A missing bigram\".A  of a word is a sequence of two adjacent letters in it.For example, word \"\" contains bigrams \"\", \"\", \"\", \"\", \"\" and \"\".The game goes as follows. First, Polycarp comes up with a word, consisting only of lowercase letters 'a' and 'b'. Then, he writes down all its bigrams on a whiteboard . After that, he wipes one of them off the whiteboard.Finally, Polycarp invites you to guess what the word that he has come up with was.Your goal is to find any word such that it's possible to write down all its bigrams and remove one of them, so that the resulting sequence of bigrams is the same as the one Polycarp ended up with.The tests are generated in such a way that the answer exists. If there are multiple answers, you can print any of them.", "input": "The first line contains a single integer  ()\u00a0\u2014 the number of testcases. The first line of each testcase contains a single integer  ()\u00a0\u2014 the length of the word Polycarp has come up with. The second line of each testcase contains  bigrams of that word, separated by a single space. Each bigram consists of two letters, each of them is either 'a' or 'b'. ", "output": "For each testcase print a word, consisting of  letters, each of them should be either 'a' or 'b'. It should be possible to write down all its bigrams and remove one of them, so that the resulting sequence of bigrams is the same as the one Polycarp ended up with. The tests are generated in such a way that the answer exists. If there are multiple answers, you can print any of them. ", "tutorial": "Consider a full sequence of bigrams for some word. The first bigram consists of letters  and  of the word. The second bigram consists of letters  and . The -th bigram consists of letters  and .After one bigram is removed, there becomes two adjacent bigrams such that one consists of letters  and  and the other consists of letters  and . Thus, we can find the position of the removed bigram by looking for a pair of adjacent bigrams such that the second letter of the first one differs from the first letter of the second one.If there is no such pair, then the sequence of bigrams represents a valid word of length . We can append it with any bigram that starts with the second letter of the last bigram to make it a valid word of length .If there exists such a pair, then all letters of the word can be recovered. We can find the position of the removed bigram, determine the letters it consisted of and insert it into the sequence.After that, we have a full sequence of bigrams and we can restore the word from it.Overall complexity:  per testcase.", "solution": "for _ in range(int(input())):\n\tn = int(input())\n\ts = input().split()\n\tfor i in range(n - 3):\n\t\tif s[i][1] != s[i + 1][0]:\n\t\t\ts.insert(i + 1, s[i][1] + s[i + 1][0])\n\t\t\tbreak\n\telse:\n\t\ts.append(s[-1][1] + 'a')\n\tprint(s[0][0], end=\"\")\n\tfor i in range(n - 1):\n\t\tprint(s[i][1], end=\"\")\n\tprint()", "interactive": false, "noSolution": false, "noTutorial": false}