{"link": "https://codeforces.com//contest/1714/problem/C", "problemId": "1490429", "shortId": "1714C", "contest_number": "1714", "name": "C. Minimum Varied Number", "statement": "Find the minimum number with the given sum of digits  such that  digits in it are distinct (i.e. all digits are unique).For example, if , then the answer is . This is the minimum number in which all digits are different and the sum of the digits is  ().For the given  print the required number.", "input": "The first line contains an integer  () \u2014 the number of test cases. Each test case is specified by a line that contains the only integer  ().", "output": "Print  integers \u2014 the answers to the given test cases.", "tutorial": "Let's use the greedy solution: we will go through the digits in decreasing order. If the sum of  we need to dial is greater than the current digit, we add the current digit to the end of the line with the answer. Note that in this way we will always get an answer consisting of the minimum possible number of digits, because we are going through the digits in descending order. Suppose that the resulting number is not optimal. Then some digit can be reduced, and some digit that comes after it can be increased, in order to save the sum (we can not increase the digit before it, as then we get a number greater than the current one). Two variants are possible.   We want to increase the digit  to , but then it becomes equal to the digit following it, or exceeds the value . Then we can't increment that digit.  Otherwise, in the first step, we can get  instead of , but since we are going through the digits in decreasing order, we cannot get the value of  in that case. Contradiction. ", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define forn(i, n) for (int i = 0; i < int(n); i++)\n\nint main() {\n    int t;\n    cin >> t;\n    forn(tt, t) {\n        int s;\n        cin >> s;\n        string result;\n        for (int d = 9; d >= 1; d--)\n            if (s >= d) {\n                result = char('0' + d) + result;\n                s -= d;\n            }\n        cout << result << endl;\n    }\n}", "interactive": false, "noSolution": false, "noTutorial": false}