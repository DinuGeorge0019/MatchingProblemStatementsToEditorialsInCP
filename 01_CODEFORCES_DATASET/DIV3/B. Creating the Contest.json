{"link": "https://codeforces.com//contest/1029/problem/B", "problemId": "211257", "shortId": "1029B", "contest_number": "1029", "name": "B. Creating the Contest", "statement": "You are given a problemset consisting of  problems. The difficulty of the -th problem is . It is guaranteed that all difficulties are distinct and are given in the increasing order.You have to assemble the contest which consists of some problems of the given problemset. In other words, . There is only one condition that should be satisfied: for each problem but the hardest one (the problem with the maximum difficulty) there should be a problem with the difficulty greater than the difficulty of this problem but not greater than twice the difficulty of this problem. In other words, let  be the difficulties of the selected problems in increasing order. Then for each  from  to   should hold. Among all contests satisfying the condition above you have to assemble one with the maximum number of problems. Your task is to find this number of problems.", "input": "The first line of the input contains one integer  () \u2014 the number of problems in the problemset. The second line of the input contains  integers  () \u2014 difficulties of the problems. .", "output": "Print a single integer \u2014 maximum number of problems in the contest satisfying the condition in the problem statement.", "tutorial": "The answer is always a segment of the initial array. The authors solution uses two pointers technique: let's iterate over all left bounds of the correct contests and try to search maximum by inclusion correct contest. Let's iterate over all  from  to  and let the current left bound be . Let  be the maximum right bound of the correct contest starting from the position . Initially . Now while  and  let's increase . Try to update the answer with the value . It is obvious that all positions from  to  cannot be left bounds of the maximum by inclusion correct contests, so let's set  and go on. Because each element will be processed once, time complexity is .", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n#ifdef _DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin);\n#endif\n\n\tint n;\n\tscanf(\"%d\", &n);\n\tvector<int> a(n);\n\tfor (int i = 0; i < n; ++i)\n\t\tscanf(\"%d\", &a[i]);\n\t\t\n\tint ans = 0;\n\tfor (int i = 0; i < n; ++i) {\n\t\tint j = i;\n\t\twhile (j + 1 < n && a[j + 1] <= a[j] * 2)\n\t\t\t++j;\n\t\tans = max(ans, j - i + 1);\n\t\ti = j;\n\t}\n\t\n\tprintf(\"%d\\n\", ans);\n}", "interactive": false, "noSolution": false, "noTutorial": false}