{"link": "https://codeforces.com//contest/1512/problem/B", "problemId": "953475", "shortId": "1512B", "contest_number": "1512", "name": "B. Almost Rectangle", "statement": "There is a square field of size  in which two cells are marked. These cells can be in the same row or column.You are to mark two more cells so that they are the corners of a rectangle with sides parallel to the coordinate axes.For example, if  and a rectangular field looks like this (there are asterisks in the marked cells):Then you can mark two more cells as followsIf there are several possible solutions, then print any of them.", "input": "The first line contains a single integer  (). Then  test cases follow. The first row of each test case contains a single integer  ()\u00a0\u2014 the number of rows and columns in the table. The following  lines each contain  characters '' or '' denoting empty and marked cells, respectively. It is guaranteed that the sums of  for all test cases do not exceed . It is guaranteed that there are exactly two asterisks on the field. They can be in the same row/column. It is guaranteed that the solution exists.", "output": "For each test case, output  rows of  characters\u00a0\u2014 a field with four asterisks marked corresponding to the statements. If there multiple correct answers, print any of them.", "tutorial": "f two asterisks are in the same row, then it is enough to select any other row and place two asterisks in the same columns in it.If two asterisks are in the same column, then you can do the same.If none of the above conditions are met and the asterisks are at positions $$$(x1, y1)$$$, $$$(x2, y2)$$$, then you can place two more asterisks at positions $$$(x1, y2)$$$, $$$(x2, y1)$$$.", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define forn(i, n) for (int i = 0; i < int(n); i++)\n\nint main() {    \n    int t;\n    cin >> t;\n    forn(tt, t) {\n        int n;\n        cin >> n;\n        vector<string> f(n);\n        vector<pair<int,int>> p;\n        forn(i, n) {\n            cin >> f[i];\n            forn(j, n)\n                if (f[i][j] == '*')\n                    p.push_back({i, j});\n        }\n\n        p.push_back(p[0]);\n        p.push_back(p[1]);\n        if (p[0].first == p[1].first) {\n            p[2].first = (p[2].first + 1) % n;\n            p[3].first = (p[3].first + 1) % n;\n        } else if (p[0].second == p[1].second) {\n            p[2].second = (p[2].second + 1) % n;\n            p[3].second = (p[3].second + 1) % n;\n        } else\n            swap(p[2].first, p[3].first);\n\n        f[p[2].first][p[2].second] = '*';\n        f[p[3].first][p[3].second] = '*';\n        forn(i, n)\n            cout << f[i] << endl;\n    }\n}", "interactive": false, "noSolution": false, "noTutorial": false}