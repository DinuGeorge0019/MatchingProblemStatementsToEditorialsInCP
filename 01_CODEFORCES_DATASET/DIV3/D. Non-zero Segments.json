{"link": "https://codeforces.com//contest/1426/problem/D", "problemId": "741033", "shortId": "1426D", "contest_number": "1426", "name": "D. Non-zero Segments", "statement": "Kolya got an integer array . The array can contain both positive and negative integers, but Kolya doesn't like , so the array doesn't contain any zeros.Kolya doesn't like that the sum of some subsegments of his array can be . The subsegment is some consecutive segment of elements of the array. You have to help Kolya and change his array in such a way that it doesn't contain any subsegments with the sum . To reach this goal, you can insert any integers between any pair of adjacent elements of the array (integers can be really any: positive, negative, , any by absolute value, even such a huge that they can't be represented in most standard programming languages).Your task is to find the minimum number of integers you have to insert into Kolya's array in such a way that the resulting array doesn't contain any subsegments with the sum .", "input": "The first line of the input contains one integer  () \u2014 the number of elements in Kolya's array. The second line of the input contains  integers  () \u2014 the description of Kolya's array.", "output": "Print the minimum number of integers you have to insert into Kolya's array in such a way that the resulting array doesn't contain any subsegments with the sum .", "tutorial": "Firstly, let's understand that the sum of the segment  is zero if  is zero (in other words, ), where  is the sum of the first  elements ().Let's iterate over elements from left to right and add all prefix sums in the set. If we get the sum that is already in the set, we get some segment with sum , and we need to fix it somehow. Let's insert some huge number before the current element in such a way that all prefix sums starting from the current element to the end will be significantly bigger than all prefix sums to the left. In words of implementation, we just get rid of all prefix sums to the left (clear the set) and continue doing the same process starting from the current element (so we just cut off the prefix of the array).This way is optimal because we remove all segments with sum  ending at the current element using only one insertion (and we need to use at least one insertion to do that).Time complexity: .", "solution": "n = int(input())\na = [int(x) for x in input().split()]\nd = set()\nd.add(0)\ncur = 0\nans = 0\nfor i in range(n):\n\tcur += a[i]\n\tif cur in d:\n\t\tans += 1\n\t\td = set()\n\t\td.add(0)\n\t\tcur = a[i]\n\td.add(cur)\nprint(ans)", "interactive": false, "noSolution": false, "noTutorial": false}