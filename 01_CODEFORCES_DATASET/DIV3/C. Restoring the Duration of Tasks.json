{"link": "https://codeforces.com//contest/1690/problem/C", "problemId": "1423051", "shortId": "1690C", "contest_number": "1690", "name": "C. Restoring the Duration of Tasks", "statement": "Recently, Polycarp completed  successive tasks.For each completed task, the time  is known when it was given, no two tasks were given at the same time. Also given is the time  when the task was completed. For each task, there is an unknown value  ()\u00a0\u2014 .It is known that the tasks were completed in the order in which they came. Polycarp performed the tasks as follows:  As soon as the very first task came, Polycarp immediately began to carry it out.  If a new task arrived before Polycarp finished the previous one, he put the new task at the end of the queue.  When Polycarp finished executing the next task and the queue was not empty, he  took a new task from the head of the queue (if the queue is empty \u2014 he just waited for the next task). Find  (duration) of each task.", "input": "The first line contains a single integer  ()\u00a0\u2014 the number of test cases. The descriptions of the input data sets follow. The first line of each test case contains one integer  (). The second line of each test case contains exactly  integers  (). The third line of each test case contains exactly  integers  (). It is guaranteed that the sum of  over all test cases does not exceed .", "output": "For each of  test cases print  positive integers \u00a0\u2014 the duration of each task.", "tutorial": "Accordingly, as it was said in the task, we put all tasks into the queue in the order of their arrival, then we fix the time at the beginning as . So, while there is a task in the queue, we proceed as follows:   Take the task from the queue.  Take as time the maximum from the current and from the arrival time of the task ().  We subtract the current time from the time when the task was done ().  Replace the current time with the time the task was done ()  If there is a task in the queue, go to item . ", "solution": "#include <bits/stdc++.h>\n \nusing namespace std;\n \ntypedef long long ll;\n \n#define forn(i, n) for (int i = 0; i < int(n); i++)\n \n \nvoid solve() {\n    int n;\n    cin >> n;\n    int s[n];\n    int f[n];\n    for (int i = 0; i < n; ++i) {\n        cin >> s[i];\n    }\n \n    for (int i = 0; i < n; ++i) {\n        cin >> f[i];\n    }\n    int curTime = 0;\n    int d[n];\n    for (int i = 0; i < n; ++i) {\n        curTime = max(curTime, s[i]);\n        d[i] = f[i] - curTime;\n        curTime = f[i];\n    }\n    for (auto now: d) {\n        cout << now << \" \";\n    }\n    cout << '\\n';\n}\nint main() {\n    int tests;\n    cin >> tests;\n    forn(tt, tests) {\n        solve();\n    }\n}", "interactive": false, "noSolution": false, "noTutorial": false}