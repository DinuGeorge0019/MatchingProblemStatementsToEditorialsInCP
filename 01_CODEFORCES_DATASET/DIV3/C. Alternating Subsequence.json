{"link": "https://codeforces.com//contest/1343/problem/C", "problemId": "599889", "shortId": "1343C", "contest_number": "1343", "name": "C. Alternating Subsequence", "statement": "Recall that the sequence  is a a subsequence of the sequence  if  can be derived from  by removing zero or more elements without changing the order of the remaining elements. For example, if , then possible subsequences are: ,  and , but not  and .You are given a sequence  consisting of  positive and negative elements (there is no zeros in the sequence).Your task is to choose  (length)  subsequence of the given sequence (i.e. the sign of each next element is the opposite from the sign of the current element, like positive-negative-positive and so on or negative-positive-negative and so on). Among all such subsequences, you have to choose one which has the  of elements.In other words, if the maximum length of  subsequence is  then your task is to find the  of elements of some  subsequence of length .You have to answer  independent test cases.", "input": "The first line of the input contains one integer  () \u2014 the number of test cases. Then  test cases follow. The first line of the test case contains one integer  () \u2014 the number of elements in . The second line of the test case contains  integers  (), where  is the -th element of . It is guaranteed that the sum of  over all test cases does not exceed  ().", "output": "For each test case, print the answer \u2014 the  of the  (length)  subsequence of .", "tutorial": "Firstly, let's extract maximum by inclusion segments of the array that consists of the numbers with the same sign. For example, if the array is $$$[1, 1, 2, -1, -5, 2, 1, -3]$$$ then these segments are $$$[1, 1, 2]$$$, $$$[-1, -5]$$$, $$$[2, 1]$$$ and $$$[-3]$$$. We can do it with any \"two pointers\"-like algorithm. The number of these segments is the maximum possible length of the alternating subsequence because we can take only one element from each block. And as we want to maximize the sum, we need to take the maximum element from each block.Time complexity: $$$O(n)$$$.", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n#ifdef _DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n#endif\n\t\n\tauto sgn = [&](int x) {\n\t\tif (x > 0) return 1;\n\t\telse return -1;\n\t};\n\n\tint t;\n\tcin >> t;\n\twhile (t--) {\n\t\tint n;\n\t\tcin >> n;\n\t\tvector<int> a(n);\n\t\tfor (auto &it : a) cin >> it;\n\t\tlong long sum = 0;\n\t\tfor (int i = 0; i < n; ++i) {\n\t\t\tint cur = a[i];\n\t\t\tint j = i;\n\t\t\twhile (j < n && sgn(a[i]) == sgn(a[j])) {\n\t\t\t\tcur = max(cur, a[j]);\n\t\t\t\t++j;\n\t\t\t}\n\t\t\tsum += cur;\n\t\t\ti = j - 1;\n\t\t}\n\t\tcout << sum << endl;\n\t}\n\t\n\treturn 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}