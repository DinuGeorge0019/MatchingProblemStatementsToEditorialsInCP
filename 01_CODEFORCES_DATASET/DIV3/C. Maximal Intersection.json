{"link": "https://codeforces.com//contest/1029/problem/C", "problemId": "211258", "shortId": "1029C", "contest_number": "1029", "name": "C. Maximal Intersection", "statement": "You are given  segments on a number line; each endpoint of every segment has integer coordinates. Some segments can degenerate to points. Segments can intersect with each other, be nested in each other or even coincide.The intersection of a sequence of segments is such a maximal set of points (not necesserily having integer coordinates) that each point lies within every segment from the sequence. If the resulting set isn't empty, then it always forms some continuous segment. The length of the intersection is the length of the resulting segment or  in case the intersection is an empty set.For example, the intersection of segments  and  is  (length ), the intersection of segments  and  is  (length ) and the intersection of segments  and  is an empty set (length ).Your task is to remove exactly one segment from the given sequence in such a way that the intersection of the remaining  segments has the maximal possible length.", "input": "The first line contains a single integer  () \u2014 the number of segments in the sequence. Each of the next  lines contains two integers  and  () \u2014 the description of the -th segment.", "output": "Print a single integer \u2014 the maximal possible length of the intersection of  remaining segments after you remove exactly one segment from the sequence.", "tutorial": "Intersection of some segments  is . If this segment has its left bound greater than its right bound then the intersection is empty.Removing some segment  makes the original sequence equal to . That can be split up to a prefix of length  and a suffix of length . Intersections for them can be precalced separately and stored in some partial sum-like arrays. Finally, you have to iterate over the position of the removed segment and calculate the intersection of prefix and suffix without this segment.Overall complexity: .", "solution": "#include <bits/stdc++.h>\n\n#define forn(i, n) for (int i = 0; i < int(n); i++)\n\nusing namespace std;\n\nconst int N = 300 * 1000 + 13;\nconst int INF = int(1e9);\n\nint n;\nint prl[N], prr[N], sul[N], sur[N];\nint l[N], r[N];\n\nint main() {\n\tscanf(\"%d\", &n);\n\tforn(i, n)\n\t\tscanf(\"%d%d\", &l[i], &r[i]);\n\t\n\tprl[0] = sul[n] = 0;\n\tprr[0] = sur[n] = INF;\n\t\n\tforn(i, n){\n\t\tprl[i + 1] = max(prl[i], l[i]);\n\t\tprr[i + 1] = min(prr[i], r[i]);\n\t}\n\t\n\tfor (int i = n - 1; i >= 0; --i){\n\t\tsul[i] = max(sul[i + 1], l[i]);\n\t\tsur[i] = min(sur[i + 1], r[i]);\n\t}\n\t\n\tint ans = 0;\n\tforn(i, n)\n\t\tans = max(ans, min(prr[i], sur[i + 1]) - max(prl[i], sul[i + 1]));\n\tprintf(\"%d\\n\", ans);\n\treturn 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}