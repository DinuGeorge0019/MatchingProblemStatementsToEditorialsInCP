{"link": "https://codeforces.com//contest/1462/problem/B", "problemId": "833570", "shortId": "1462B", "contest_number": "1462", "name": "B. Last Year's Substring", "statement": "Polycarp has a string  of length  consisting of decimal digits. Polycarp performs the following operation with the string   (i.e. he can perform operation  or  time):   Polycarp selects two numbers  and  () and removes characters from the  string at the positions  (i.e. removes substring ). More formally, Polycarp turns the string  into the string . For example, the string \"\" Polycarp can turn into strings:   \"\" (in this case  or );  \"\" (in this case );  \"\" (in this case );  other operations are also possible, only a few of them are listed above. Polycarp likes the string \"\" very much, so he is wondering if it is possible to turn the string  into a string \"\" in no more than one operation? Note that you can perform zero operations.", "input": "The first line contains a positive integer  ()\u00a0\u2014 number of test cases in the test. Then  test cases follow. The first line of each test case contains an integer  ()\u00a0\u2014 length of the string . The next line contains a string  of length  consisting of decimal digits. It is allowed that the string  starts with digit .", "output": "For each test case, output on a separate line:    \"\" if Polycarp can turn the string  into a string \"\" in no more than one operation (i.e. he can perform  or  operation);  \"\" otherwise.  You may print every letter of \"\" and \"\" in any case you want (so, for example, the strings , ,  and  will all be recognized as positive answer).", "tutorial": "Let's see how the deleted substring $$$t$$$ should look so that after deleting it, the string $$$s$$$ turns into the string \"\". The length of the string $$$t$$$ must be $$$n - 4$$$. Then we can iterate over all substrings of the string $$$s$$$ of length $$$n - 4$$$ (there are no more than five such substrings) and look at the string obtained after deleting the substring. That is, we need to check that one of the following character sequence matches the $$$(2, 0, 2, 0)$$$:  $$$(s[1], s[2], s[3], s[4])$$$;  $$$(s[1], s[2], s[3], s[n])$$$;  $$$(s[1], s[2], s[n - 1], s[n])$$$;  $$$(s[1], s[n - 2], s[n - 1], s[n])$$$;  $$$(s[n - 3], s[n - 2], s[n - 1], s[n])$$$; ", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nvoid solve() {\n  int n;\n  cin >> n;\n  string s;\n  cin >> s;\n\n  for (int i = 0; i <= 4; i++) {\n    if (s.substr(0, i) + s.substr(n - 4 + i, 4 - i) == \"2020\") {\n      cout << \"YES\" << endl;\n      return;\n    }\n  }\n  cout << \"NO\" << endl;\n}\n\nint main() {\n  int tests;\n  cin >> tests;\n  while (tests-- > 0) {\n    solve();\n  }\n  return 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}