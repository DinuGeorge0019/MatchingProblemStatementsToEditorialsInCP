{"link": "https://codeforces.com//contest/1196/problem/E", "problemId": "377795", "shortId": "1196E", "contest_number": "1196", "name": "E. Connected Component on a Chessboard", "statement": "You are given two integers  and . You have a chessboard of size  with the top left cell at , the cell  is painted .Your task is to find a connected component on this chessboard that contains exactly  black cells and exactly  white cells. Two cells are called connected if they share a side (i.e. for the cell  there are at most four connected cells: ). A set of cells is called a connected component if for every pair of cells  and  from this set, there exists a sequence of cells , , ...,  such that , , all  from  to  are belong to this set of cells and for every , cells  and  are connected.Obviously, it can be impossible to find such component. In this case print \"\". Otherwise, print \"\" and  suitable connected component.You have to answer  independent queries.", "input": "The first line of the input contains one integer  ()\u00a0\u2014 the number of queries. Then  queries follow. The only line of the query contains two integers  and  ()\u00a0\u2014 the number of black cells required and the number of white cells required. It is guaranteed that the sum of numbers of cells does not exceed  ().", "output": "For each query, print the answer to it. If it is impossible to find the required component, print \"\" on the first line. Otherwise, print \"\" on the first line. In the next  lines print coordinates of cells of your component in any order. There should be exactly  black cells and  white cells in your answer. The printed component should be connected. If there are several answers, you can print . All coordinates in the answer should be in the range .", "tutorial": "I'll consider the case when , the other case is symmetric and the answer I construct is the same but shifted by  to the right.Consider the given field as a matrix where  is the number of row and  is the number of column. Firstly, let's build the line of length  from the cell  to the cell . Then  will decrease by  and  will () become .Then we have two black cells to the left and to the right ( and ) and  black cells to the up (all cells () for all  from  to ) and  black cells to the down (all cells () for all  from  to ). Let's add the required number of cells to the answer.If even after adding all these cells  still be greater than  then the answer is \"\" (maybe there will be a proof why it is so but you can read it already from other participants). Otherwise the answer is \"\" and we constructed the required component.", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n#ifdef _DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n#endif\n\t\n\tint q;\n\tcin >> q;\n\tfor (int i = 0; i < q; ++i) {\n\t\tint b, w;\n\t\tcin >> b >> w;\n\t\tvector<pair<int, int>> res;\n\t\tbool need = b < w;\n\t\tif (need) swap(w, b);\n\t\tint x = 2, y = 2;\n\t\twhile (w > 0) {\n\t\t\tif ((x + y) % 2 == 1) {\n\t\t\t\tres.push_back({x, y});\n\t\t\t\t--b;\n\t\t\t} else {\n\t\t\t\tres.push_back({x, y});\n\t\t\t\t--w;\n\t\t\t}\n\t\t\t++y;\n\t\t}\n\t\tint cx = 1, cy = 2;\n\t\twhile (b > 0 && cy <= y) {\n\t\t\tres.push_back({cx, cy});\n\t\t\t--b;\n\t\t\tcy += 2;\n\t\t}\n\t\tcx = 3, cy = 2;\n\t\twhile (b > 0 && cy <= y) {\n\t\t\tres.push_back({cx, cy});\n\t\t\t--b;\n\t\t\tcy += 2;\n\t\t}\n\t\tif (b > 0) {\n\t\t\tres.push_back({2, 1});\n\t\t\t--b;\n\t\t}\n\t\tif (b > 0) {\n\t\t\tres.push_back({2, y});\n\t\t\t--b;\n\t\t}\n\t\tif (b > 0) {\n\t\t\tcout << \"NO\" << endl;\n\t\t} else {\n\t\t\tassert(w == 0);\n\t\t\tcout << \"YES\" << endl;\n\t\t\tfor (auto it : res) cout << it.first << \" \" << it.second + need << endl;\n\t\t}\n\t}\n\t\n\treturn 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}