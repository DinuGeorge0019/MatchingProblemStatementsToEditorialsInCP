{"link": "https://codeforces.com//contest/1660/problem/D", "problemId": "1349758", "shortId": "1660D", "contest_number": "1660", "name": "D. Maximum Product Strikes Back", "statement": "You are given an array  consisting of  integers. For each  () the following inequality is true: .You can remove any number (possibly ) of elements from the beginning of the array and any number (possibly ) of elements from the end of the array. You are allowed to delete the whole array.You need to answer the question: how many elements should be removed from the beginning of the array, and how many elements should be removed from the end of the array, so that the result will be an array whose product (multiplication) of elements is . If there is more than one way to get an array with the maximum product of elements on it, you are allowed to output  of them. The product of elements of an  array (array of length ) should be assumed to be .", "input": "The first line of input data contains an integer  ()\u00a0\u2014the number of test cases in the test. Then the descriptions of the input test cases follow. The first line of each test case description contains an integer  ()\u00a0\u2014the length of array . The next line contains  integers  ()\u00a0\u2014 elements of array . It is guaranteed that the sum of  over all test cases does not exceed .", "output": "For each test case, output two non-negative numbers  and  ()\u00a0\u2014 such that the product (multiplication) of the array numbers, after removing  elements from the beginning and  elements from the end, is maximal. If there is more than one way to get the maximal product, it is allowed to output  of them. Consider the product of numbers on  array to be .", "tutorial": "First, we can always get a product value equal to  if we remove all elements of the array. Then we need to know what maximal  value of the product we can get. Consequently, the remaining array (after removing the corresponding prefix and suffix) should have no  elements. We can find maxima in all sections between zeros. Now we are left with a set of nonzero numbers. If the value of the product on the current segment is positive, it makes no sense to remove any more elements. Otherwise, the product is negative, then we must remove one negative number from the product (either to the left or to the right). Compare the values of the product on the prefix and suffix to the nearest negative value, and remove either the suffix or the prefix, respectively.", "solution": "#include <bits/stdc++.h>\n \nusing namespace std;\n \n#define forn(i, n) for (int i = 0; i < int(n); i++)\n#define sz(v) (int)v.size()\n \n \nvoid solve() {\n    int n; cin >> n;\n    vector<int> a(n);\n \n    forn(i, n) \n        cin >> a[i];\n    int ans = 0;\n    int ap = n, as = 0;\n    for(int i = 0, l = -1; i <= n; i++) {\n        if (i == n || a[i] == 0) {\n            int cnt = 0;\n            bool neg = false;\n            int left = -1, right = -1;\n            int cl = 0, cr = 0;\n            for (int j = l+1; j < i; j++) {\n                neg ^= a[j] < 0;\n                if (a[j] < 0) {\n                    right = j;\n                    cr = 0;\n                }\n \n                if (abs(a[j]) == 2) {\n                    cnt++, cr++;\n                    if (left == -1) cl++;\n                }\n \n                if (a[j] < 0 && left == -1) {\n                    left = j;\n                }\n            }\n            if (neg) {\n                if (cnt - cl > cnt - cr) {\n                    right = i;\n                    cnt -= cl;\n                } else {\n                    left = l;\n                    cnt -= cr;\n                }\n            } else {\n                left = l, right = i;\n            }\n            if (ans < cnt) {\n                ans = cnt;\n                ap = left + 1, as = n - right;\n            }\n \n            l = i;\n        }\n    }\n    cout << ap << ' ' << as << endl;\n}\n \nint main() {\n    int t;\n    cin >> t;\n \n    forn(tt, t) {\n        solve();\n    }\n}", "interactive": false, "noSolution": false, "noTutorial": false}