{"link": "https://codeforces.com//contest/1183/problem/D", "problemId": "363544", "shortId": "1183D", "contest_number": "1183", "name": "D. Candy Box  easy version ", "statement": "There are  candies in a candy box. The type of the -th candy is  ().You have to prepare a gift using some of these candies with the following restriction: the numbers of candies of each type presented in a gift should be all distinct (i.\u2009e. for example, a gift having two candies of type  and two candies of type  is bad). . It is also possible that  of some types will be taken to a gift.Your task is to find out the  possible size of the single gift you can prepare using the candies you have.You have to answer  independent queries.", "input": "The first line of the input contains one integer  () \u2014 the number of queries. Each query is represented by two lines. The first line of each query contains one integer  () \u2014 the number of candies. The second line of each query contains  integers  (), where  is the type of the -th candy in the box. It is guaranteed that the sum of  over all queries does not exceed .", "output": "For each query print one integer \u2014 the  possible size of the single gift you can compose using candies you got in this query with the restriction described in the problem statement.", "tutorial": "Let's calculate the array  where  is the number of candies of the -th type. Let's sort it in non-ascending order.Obviously, now we can take  because this is the maximum number of candies of some type in the array. Let  be the last number of candies we take. Initially it equals  (and the answer  is initially the same number). Then let's iterate over all values of  in order from left to right. If the current number  is greater than or equal to the last taken number of candies  then we cannot take more candies than  (because we iterating over values of  in non-ascending order), so let's increase answer by  and set . Otherwise  and we can take all candies of this type, increase the answer by  and set .", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n#ifdef _DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n#endif\n\n\tint q;\n\tcin >> q;\n\tfor (int t = 0; t < q; ++t) {\n\t\tint n;\n\t\tcin >> n;\n\t\tvector<int> cnt(n + 1);\n\t\tfor (int i = 0; i < n; ++i) {\n\t\t\tint x;\n\t\t\tcin >> x;\n\t\t\t++cnt[x];\n\t\t}\n\t\tsort(cnt.rbegin(), cnt.rend());\n\t\tint ans = cnt[0];\n\t\tint lst = cnt[0];\n\t\tfor (int i = 1; i <= n; ++i) {\n\t\t\tif (lst == 0) break;\n\t\t\tif (cnt[i] >= lst) {\n\t\t\t\tans += lst - 1;\n\t\t\t\tlst -= 1;\n\t\t\t} else {\n\t\t\t\tans += cnt[i];\n\t\t\t\tlst = cnt[i];\n\t\t\t}\n\t\t}\n\t\tcout << ans << endl;\n\t}\n\t\n\treturn 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}