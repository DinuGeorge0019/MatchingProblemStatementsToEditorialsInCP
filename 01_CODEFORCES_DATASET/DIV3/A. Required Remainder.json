{"link": "https://codeforces.com//contest/1374/problem/A", "problemId": "659584", "shortId": "1374A", "contest_number": "1374", "name": "A. Required Remainder", "statement": "You are given three integers  and . Your task is to find the  integer  such that  that , where  is modulo operation. Many programming languages use percent operator  to implement it.In other words, with given  and  you need to find the maximum possible integer from  to  that has the remainder  modulo .You have to answer  independent test cases. It is guaranteed that such  exists for each test case.", "input": "The first line of the input contains one integer  () \u2014 the number of test cases. The next  lines contain test cases. The only line of the test case contains three integers  and  (). It can be shown that such  always exists under the given constraints.", "output": "For each test case, print the answer \u2014  integer  such that  and . It is guaranteed that the answer always exists.", "tutorial": "There are two cases in this problem. If we try to maximize the answer, we need to consider only two integers:  and . Of course, the first one is better (we get rid of the existing remainder and trying to add  to this number). If it's too big, then we can and need to take the second one (this number is just the first one but decreased by ). The answer can be always found between these numbers.Time complexity: .", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n#ifdef _DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n#endif\n\t\n\tint t;\n\tcin >> t;\n\twhile (t--) {\n\t\tint x, y, n;\n\t\tcin >> x >> y >> n;\n\t\tif (n - n % x + y <= n) {\n\t\t\tcout << n - n % x + y << endl;\n\t\t} else {\n\t\t\tcout << n - n % x - (x - y) << endl;\n\t\t}\n\t}\n\t\n\treturn 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}