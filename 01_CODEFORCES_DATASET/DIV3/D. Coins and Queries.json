{"link": "https://codeforces.com//contest/1003/problem/D", "problemId": "194984", "shortId": "1003D", "contest_number": "1003", "name": "D. Coins and Queries", "statement": "Polycarp has  coins, the value of the -th coin is . It is guaranteed that all the values are integer powers of  (i.e.  for some  integer number ).Polycarp wants to know answers on  queries. The -th query is described as integer number . The answer to the query is the minimum number of coins that is necessary to obtain the value  using some subset of coins (Polycarp can use only coins he has). If Polycarp can't obtain the value , the answer to the -th query is .The queries are independent (the answer on the query doesn't affect Polycarp's coins).", "input": "The first line of the input contains two integers  and  () \u2014 the number of coins and the number of queries. The second line of the input contains  integers  \u2014 values of coins (). It is guaranteed that all  are integer powers of  (i.e.  for some  integer number ). The next  lines contain one integer each. The -th line contains one integer  \u2014 the value of the -th query ().", "output": "Print  integers . The -th integer must be equal to the answer on the -th query. If Polycarp can't obtain the value  the answer to the -th query is .", "tutorial": "We can solve the problem by the following way: firstly, for each power of $$$2$$$ let's calculate the number of coins with the value equals this degree. Let's call it $$$cnt$$$.It is obvious that we can obtain the value $$$b_j$$$ greedily (because all less values of coins are divisors of all greater values of coins).Now let's iterate over all powers of $$$2$$$ from $$$30$$$ to $$$0$$$. Let's $$$deg$$$ be the current degree. We can take $$$min(\\lfloor\\frac{b_j}{2^{deg}}\\rfloor, cnt_{deg})$$$ coins with the value equals $$$2^{deg}$$$. Let it be $$$cur$$$. Add $$$cur$$$ to the answer and subtract $$$2^{deg} \\cdot cur$$$ from $$$b_j$$$.If after iterating over all powers $$$b_j$$$ still be non-zero, print . Otherwise print the answer.Overall complexity: $$$O((n + q) \\log maxAi)$$$.", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n#ifdef _DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n#endif\n\t\n\tint n, q;\n\tcin >> n >> q;\n\t\n\tvector<int> cnt(31);\n\tfor (int i = 0; i < n; ++i) {\n\t\tint x;\n\t\tcin >> x;\n\t\t++cnt[__builtin_ctz(x)];\n\t}\n\t\n\twhile (q--) {\n\t\tint x;\n\t\tcin >> x;\n\t\t\n\t\tint ans = 0;\n\t\tfor (int i = 30; i >= 0 && x > 0; --i) {\n\t\t\tint need = min(x >> i, cnt[i]);\n\t\t\tans += need;\n\t\t\tx -= (1 << i) * need;\n\t\t}\n\t\t\n\t\tif (x > 0)\n\t\t\tans = -1;\n\t\tcout << ans << endl;\n\t}\n\t\n\treturn 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}