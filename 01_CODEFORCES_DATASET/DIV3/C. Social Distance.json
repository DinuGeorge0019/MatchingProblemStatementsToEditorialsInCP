{"link": "https://codeforces.com//contest/1367/problem/C", "problemId": "650995", "shortId": "1367C", "contest_number": "1367", "name": "C. Social Distance", "statement": "Polycarp and his friends want to visit a new restaurant. The restaurant has  tables arranged along a straight line. People are already sitting at some tables. The tables are numbered from  to  in the order from left to right. The state of the restaurant is described by a string of length  which contains characters \"\" (the table is occupied) and \"\" (the table is empty).Restaurant rules prohibit people to sit at a distance of  or less from each other. That is, if a person sits at the table number , then all tables with numbers from  to  (except for the -th) should be free. In other words, the absolute difference of the numbers of any two occupied tables must be strictly greater than .For example, if  and , then:  strings \"\", \"\", \"\", \"\" satisfy the rules of the restaurant;  strings \"\", \"\", \"\" do not satisfy to the rules of the restaurant, since each of them has a pair of \"\" with a distance less than or equal to . In particular, if the state of the restaurant is described by a string without \"\" or a string with one \"\", then the requirement of the restaurant is satisfied.You are given a binary string  that describes the current state of the restaurant. It is guaranteed that the rules of the restaurant are satisfied for the string .Find the maximum number of free tables that you can occupy so as not to violate the rules of the restaurant. Formally, what is the maximum number of \"\" that can be replaced by \"\" such that the requirement will still be satisfied?For example, if , , \u00a0\"\", then the answer to the problem will be , since only the table at position  can be occupied such that the rules are still satisfied.", "input": "The first line contains a single integer  ()\u00a0\u2014 the number of test cases in the test. Then  test cases follow. Each test case starts with a line containing two integers  and  ()\u00a0\u2014 the number of tables in the restaurant and the minimum allowed distance between two people. The second line of each test case contains a binary string  of length  consisting of \"\" and \"\"\u00a0\u2014 a description of the free and occupied tables in the restaurant. The given string satisfy to the rules of the restaurant\u00a0\u2014 the difference between indices of any two \"\" is more than . The sum of  for all test cases in one test does not exceed .", "output": "For each test case output one integer\u00a0\u2014 the number of tables that you can occupy so as not to violate the rules of the restaurant. If additional tables cannot be taken, then, obviously, you need to output .", "tutorial": "Let's split a given string into blocks of consecutive zeros. Then in each such block, you can independently put the maximum number of people who fit in it. But there are three cases to consider.   If the current block is not the first and not the last, then there are ones at the border and this means that the first  tables of the current block and the last  are prohibited. Therefore, remove these zeroes from the string.  If the current block is the first, then the one is at the end and you need to delete the last  zeros.  If the current block is the last, then in the beginning there is one and you need to delete the first  zeros.  Also, as a separate case, you need to consider\u00a0\u2014 a string consisting only of zeros. Then there is exactly one block from which you do not need to remove zeros.Now all the tables in each block are free, then in each block we can put . Sum these values over all blocks.", "solution": "#include <bits/stdc++.h>\nusing namespace std;\n\nint main() {\n\tint t;\n\tcin >> t;\n\n\tfor (int test = 1; test <= t; test++) {\n\t\tint n, k;\n\t\tcin >> n >> k;\n\t\tstring s;\n\t\tcin >> s;\n\n\t\tint res = 0;\n\n\t\tfor (int i = 0; i < n;) {\n\t\t\tint j = i + 1;\n\n\t\t\tfor (; j < n && s[j] != '1'; j++);\n\n\t\t\tint left = s[i] == '1' ? k : 0;\n\t\t\tint right = j < n && s[j] == '1' ? k : 0;\n\t\t\tint len = j - i;\n\n\t\t\tif (left == k) {\n\t\t\t\tlen--;\n\t\t\t}\n\n\t\t\tlen -= left + right;\n\n\t\t\tif (len > 0) {\n\t\t\t\tres += (len + k) / (k + 1);\n\t\t\t}\n\n\t\t\ti = j;\n\t\t}\n\n\t\tcout << res << endl;\n\t}\n\n\treturn 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}