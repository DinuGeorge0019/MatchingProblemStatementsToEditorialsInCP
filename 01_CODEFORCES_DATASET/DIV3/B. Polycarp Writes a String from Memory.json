{"link": "https://codeforces.com//contest/1702/problem/B", "problemId": "1456427", "shortId": "1702B", "contest_number": "1702", "name": "B. Polycarp Writes a String from Memory", "statement": "Polycarp has a poor memory. Each day he can remember no more than  of different letters. Polycarp wants to write a non-empty string of  consisting of lowercase Latin letters, taking  number of days. In how many days will he be able to do it?Polycarp initially has an empty string and can only add characters to the end of that string.For example, if Polycarp wants to write the string , he will do it in  days:   on the first day Polycarp will memorize the letters , ,  and write ;  On the second day Polycarp will remember the letters , , , add  to the resulting line and get the line . If Polycarp wants to write the string , he will do it in  days:   in the first day will be written part ;  on day two will be written part ;  on the third day, part of  will be written;  on the fourth day, part of  will be written. For a given string , print the minimum number of days it will take Polycarp to write it.", "input": "The first line of input data contains a single integer  ()\u00a0\u2014 the number of test cases. Each test case consists of a non-empty string  consisting of lowercase Latin letters (the length of the string  does not exceed )\u00a0\u2014 the string Polycarp wants to construct. It is guaranteed that the sum of string lengths  over all test cases does not exceed .", "output": "For each test case, print a single number\u00a0\u2014  number of days it will take Polycarp to write the string  from memory.", "tutorial": "Let us simulate the process. We store a set  consisting of letters that Polycarp memorizes on one day. Gradually dial the set . If the size of  exceeds , we add  to the day counter  and clear .", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define forn(i, n) for (int i = 0; i < int(n); i++)\n#define sz(v) (int)v.size()\n#define all(v) v.begin(),v.end()\n#define eb emplace_back\n\n\n\nvoid solve() {\n    string s; cin >> s;\n    set<char> v;\n    int ans = 0;\n    for (int i = 0; i < sz(s); i++) {\n        v.insert(s[i]);\n        if (sz(v) > 3) {\n            ans++;\n            v.clear();\n            v.insert(s[i]);\n        }\n    }\n    if (!v.empty()) ans++;\n    cout << ans << endl;\n}\n\nint main() {\n    int t;\n    cin >> t;\n\n    forn(tt, t) {\n        solve();\n    }\n}", "interactive": false, "noSolution": false, "noTutorial": false}