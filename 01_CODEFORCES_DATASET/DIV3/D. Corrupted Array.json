{"link": "https://codeforces.com//contest/1512/problem/D", "problemId": "953478", "shortId": "1512D", "contest_number": "1512", "name": "D. Corrupted Array", "statement": "You are given a number  and an array , obtained according to the following algorithm:   some array  was guessed;  array  was written to array , i.e.  ();  The -th element of the array  is the sum of the numbers in the array , i.e. ;  The -th element of the array  was written some number  (), i.e. ; The  array  was shuffled. For example, the array  it could be obtained in the following ways:    and ;   and . For the given array , find any array  that could have been guessed initially.", "input": "The first line contains a single integer  (). Then  test cases follow. The first line of each test case contains a single integer  (). The second row of each test case contains  integers  (). It is guaranteed that the sum of  over all test cases does not exceed .", "output": "For each test case, output:    \"\", if the array  could not be obtained from any array ;   integers , otherwise.  If there are several arrays of , you can output any.", "tutorial": "What is the sum of all the elements in $$$b$$$? This is twice the sum of all the elements in $$$a$$$ + $$$x$$$.Denote by $$$B$$$ the sum of all the elements of $$$b$$$. Let's iterate over which of the array elements was added as the sum of the elements $$$a$$$ (let's denote, for $$$a$$$). Then, $$$x$$$ = $$$B-2 \\cdot A$$$. It remains to check that the element $$$x$$$ is present in the array $$$b$$$, this can be done using a hash table or a binary search tree.", "solution": "#include <bits/stdc++.h>\nusing namespace std;\n\nvoid no() {\n  cout << \"-1\" << endl;\n}\n\nvoid solve() {\n  int n;\n  cin >> n;\n  vector<int> b(n + 2);\n  for (int &x : b) {\n    cin >> x;\n  }\n\n  multiset<int> have(b.begin(), b.end());\n  long long sum = accumulate(b.begin(), b.end(), 0LL);\n  for (int x : b) {\n    have.erase(have.find(x));\n    sum -= x;\n    if (sum % 2 == 0 && sum <= 2'000'000'000 && have.find(sum / 2) != have.end()) {\n      have.erase(have.find(sum / 2));\n      for (int y : have) {\n        cout << y << \" \";\n      }\n      cout << endl;\n      return;\n    }\n    sum += x;\n    have.insert(x);\n  }\n  no();\n}\n\nint main() {\n  int tests;\n  cin >> tests;\n  while (tests-- > 0) {\n    solve();\n  }\n  return 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}