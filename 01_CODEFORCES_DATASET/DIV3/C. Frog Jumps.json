{"link": "https://codeforces.com//contest/1324/problem/C", "problemId": "560262", "shortId": "1324C", "contest_number": "1324", "name": "C. Frog Jumps", "statement": "There is a frog staying to the left of the string  consisting of  characters (to be more precise, the frog initially stays at the cell ). Each character of  is either '' or ''. It means that if the frog is staying at the -th cell and the -th character is '', the frog can jump only to the left. If the frog is staying at the -th cell and the -th character is '', the frog can jump only to the right. ..The frog wants to reach the -th cell. The frog chooses some  value   (and cannot change it later) and jumps by no more than  cells at once. I.e. if the -th character is '' then the frog can jump to any cell in a range , and if the -th character is '' then the frog can jump to any cell in a range .The frog doesn't want to jump far, so your task is to find the minimum possible value of  such that the frog can reach the cell  from the cell  if it can jump by no more than  cells at once. .You have to answer  independent test cases.", "input": "The first line of the input contains one integer  () \u2014 the number of test cases. The next  lines describe test cases. The -th test case is described as a string  consisting of at least  and at most  characters '' and ''. It is guaranteed that the sum of lengths of strings over all test cases does not exceed  ().", "output": "For each test case, print the answer \u2014 the minimum possible value of  such that the frog can reach the cell  from the cell  if it jumps by no more than  at once.", "tutorial": "The only observation we need is that we don't need to jump left at all. This only decreases our position so we have less freedom after the jump to the left. Then, to minimize , we only need to jump between the closest '' cells. So, if we build the array , where  is the position of the -th '' cell from left to right (-indexed), then the answer is .Time complexity: .", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n#ifdef _DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n#endif\n\t\n\tint t;\n\tcin >> t;\n\twhile (t--) {\n\t\tstring s;\n\t\tcin >> s;\n\t\tvector<int> pos;\n\t\tpos.push_back(0);\n\t\tfor (int i = 0; i < int(s.size()); ++i) {\n\t\t\tif (s[i] == 'R') pos.push_back(i + 1);\n\t\t}\n\t\tpos.push_back(s.size() + 1);\n\t\tint ans = 0;\n\t\tfor (int i = 0; i < int(pos.size()) - 1; ++i) {\n\t\t\tans = max(ans, pos[i + 1] - pos[i]);\n\t\t}\n\t\tcout << ans << endl;\n\t}\n\t\n\treturn 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}