{"link": "https://codeforces.com//contest/1095/problem/D", "problemId": "275104", "shortId": "1095D", "contest_number": "1095", "name": "D. Circular Dance", "statement": "There are  kids, numbered from  to , dancing in a circle around the Christmas tree. Let's enumerate them in a clockwise direction as , , ...,  (all these numbers are from  to  and are distinct, so  is a permutation). Let the next kid for a kid  be kid  if  and  otherwise. After the dance, each kid remembered two kids: the next kid (let's call him ) and the next kid for . Each kid told you which kids he/she remembered: the kid  remembered kids  and . However, the order of  and  can differ from their order in the circle.     You have to restore the order of the kids in the circle using this information. If there are several answers, you may print any. It is guaranteed that at least one solution exists.", "input": "The first line of the input contains one integer  () \u2014 the number of the kids. The next  lines contain  integers each. The -th line contains two integers  and  () \u2014 the kids the -th kid remembered, given in arbitrary order.", "output": "Print  integers , , ...,  \u2014 permutation of integers from  to , which corresponds to the order of kids in the circle.  (for example, it doesn't matter which kid is the first in the circle). It is guaranteed that at least one solution exists.", "tutorial": "Let's write a function  which will try to restore the circle if kid with number  comes right after kid with number . If  comes right after  then we can determine  \u2014 the number of kid who is next to kid . So now we have:  comes right after ,  comes right after . Let's determine  \u2014 kid who is next to kid .If we repeat this operation  times then we can \"\" the answer if  comes right after . But it can be wrong so we have to check that our answer corresponds to the input.So if we have this function, we can apply it two times to determine the correct answer. Just call  and .", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint n;\nvector<vector<int>> a;\n\nvoid check(int l, int r) {\n\tvector<int> ans;\n\tfor (int i = 0; i < n; ++i) {\n\t\tint nxt = -1;\n\t\tif (a[l][0] == r) {\n\t\t\tnxt = a[l][1];\n\t\t} else if (a[l][1] == r) {\n\t\t\tnxt = a[l][0];\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\t\tans.push_back(nxt);\n\t\tl = r;\n\t\tr = nxt;\n\t}\n\tfor (auto it : ans) {\n\t\tcout << it + 1 << \" \";\n\t}\n\tcout << endl;\n\texit(0);\n}\n\nint main() {\n#ifdef _DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n#endif\n\t\n\tcin >> n;\n\ta = vector<vector<int>> (n, vector<int>(2));\n\tfor (int i = 0; i < n; ++i) {\n\t\tcin >> a[i][0] >> a[i][1];\n\t\t--a[i][0];\n\t\t--a[i][1];\n\t}\n\t\n\tcheck(0, a[0][0]);\n\tcheck(0, a[0][1]);\n\t\n\tassert(false);\n\t\n\treturn 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}