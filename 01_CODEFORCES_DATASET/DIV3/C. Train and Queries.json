{"link": "https://codeforces.com//contest/1702/problem/C", "problemId": "1456428", "shortId": "1702C", "contest_number": "1702", "name": "C. Train and Queries", "statement": "Along the railroad there are stations indexed from  to . An express train always travels along a route consisting of  stations with indices , where (). The train travels along the route from left to right. It starts at station , then stops at station , then at , and so on. Station \u00a0\u2014 the terminus.It is possible that the train will visit the same station more than once. That is, there may be duplicates among the values .You are given  queries, each containing two different integers  and  (). For each query, determine whether it is possible to travel by train from the station with index  to the station with index .For example, let the train route consist of  of stations with indices [] and give  of the following queries:   , It is possible to travel from station  to station  by taking a section of the route consisting of stations []. Answer: .  , You cannot travel from station  to station  because the train cannot travel in the opposite direction. Answer: .  , It is not possible to travel from station  to station  because station  is not part of the train's route. Answer: . ", "input": "The first line of the input contains an integer  ()\u00a0\u2014the number of test cases in the test. The descriptions of the test cases follow. The first line of each test case is empty. The second line of each test case contains two integers:  and  ()\u00a0\u2014the number of stations the train route consists of and the number of queries. The third line of each test case contains exactly  integers  (). The values  are not necessarily different. The following  lines contain two different integers  and  () describing the query with index . It is guaranteed that the sum of  values over all test cases in the test does not exceed . Similarly, it is guaranteed that the sum of  values over all test cases in the test also does not exceed ", "output": "For each test case, output on a separate line:   , if you can travel by train from the station with index  to the station with index   otherwise.  You can output  and  in any case (for example, strings , ,  and  will be recognized as a positive response).", "tutorial": "To solve the problem, we will use the dictionary. Each station will be matched with a pair of integers \u2014 the indices of its first and last entries in the route. Then we will sequentially process queries. If at least one of the stations  or  is missing in the dictionary \u2014 the answer is . Otherwise, check:   If the index of the first entry of station  in the route is strictly less than the index of the last entry of station  in the route \u2014 the answer is .  Otherwise, the answer is . ", "solution": "#include<bits/stdc++.h>\nusing namespace std;\n#define forn(i, n) for (int i = 0; i < int(n); i++)\n\n\nvoid solve(){\n    int n, k;\n    cin >> n >> k;\n    map<int, pair<int, int>>m;\n    forn(i, n){\n        int u;\n        cin >> u;\n        if(!m.count(u)) {\n            m[u].first = i;\n            m[u].second = i;\n        }\n        else m[u].second = i;\n    }\n    forn(i, k){\n        int a, b;\n        cin >> a >> b;\n        if(!m.count(a) or !m.count(b) or m[a].first > m[b].second) {\n            cout << \"NO\\n\"; //equals = 0 = wrong\n        }\n        else cout << \"YES\\n\";\n    }\n}\n\nint main(){\n    int t;\n    cin >> t;\n    while(t--){\n        solve();\n    }\n}", "interactive": false, "noSolution": false, "noTutorial": false}