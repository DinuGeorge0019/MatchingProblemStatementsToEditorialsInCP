{"link": "https://codeforces.com//contest/1272/problem/D", "problemId": "494356", "shortId": "1272D", "contest_number": "1272", "name": "D. Remove One Element", "statement": "You are given an array  consisting of  integers.You can remove  element from this array. Thus, the final length of the array is  or .Your task is to calculate the maximum possible length of the  contiguous subarray of the remaining array.Recall that the contiguous subarray  with indices from  to  is . The subarray  is called strictly increasing if .", "input": "The first line of the input contains one integer  () \u2014 the number of elements in . The second line of the input contains  integers  (), where  is the -th element of .", "output": "Print one integer \u2014 the maximum possible length of the  contiguous subarray of the array  after removing at most one element.", "tutorial": "Firstly, let's calculate for each  from  to  two following values:  and .  means the maximum length of the increasing sequence starting in the position , and  means the maximum length of the increasing sequence ending in the position . Initially, all  values are  (the element itself).The array  can be calculated in order from right to left with the following condition: if  then , otherwise it still remain . The same with the array , but we have to calculate its values in order from left to right, and if  then , otherwise it still remain .Having these arrays we can calculate the answer. The initial answer (if we don't remove any element) is the maximum value of the array . And if we remove the -th element (where ), then we can update the answer with the value  if .Time complexity: .", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n#ifdef _DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n#endif\n\t\n\tint n;\n\tcin >> n;\n\tvector<int> a(n);\n\tfor (int i = 0; i < n; ++i) {\n\t\tcin >> a[i];\n\t}\n\tint ans = 1;\n\t\n\tvector<int> rg(n, 1);\n\tfor (int i = n - 2; i >= 0; --i) {\n\t\tif (a[i + 1] > a[i]) rg[i] = rg[i + 1] + 1;\n\t\tans = max(ans, rg[i]);\n\t}\n\t\n\tvector<int> lf(n, 1);\n\tfor (int i = 1; i < n; ++i) {\n\t\tif (a[i - 1] < a[i]) lf[i] = lf[i - 1] + 1;\n\t\tans = max(ans, lf[i]);\n\t}\n\t\n\tfor (int i = 0; i < n - 2; ++i) {\n\t\tif (a[i] < a[i + 2]) ans = max(ans, lf[i] + rg[i + 2]);\n\t}\n\t\n\tcout << ans << endl;\n\t\n\treturn 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}