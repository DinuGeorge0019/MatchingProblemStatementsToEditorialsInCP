{"link": "https://codeforces.com//contest/1475/problem/F", "problemId": "877138", "shortId": "1475F", "contest_number": "1475", "name": "F. Unusual Matrix", "statement": "You are given two binary square matrices  and  of size . A matrix is called binary if each of its elements is equal to  or . You can do the following operations on the matrix   number of times (0 or more):   vertical . You choose the number  () and for all  () do the following:  (\u00a0\u2014 is the operation  (exclusive or)).  horizontal . You choose the number  () and for all  () do the following: . Note that the elements of the  matrix change after each operation.For example, if  and the matrix  is:  Then the following sequence of operations shows an example of transformations:   vertical , .   horizontal , .   vertical , .  Check if there is a sequence of operations such that the matrix  becomes equal to the matrix .", "input": "The first line contains one integer  ()\u00a0\u2014 the number of test cases. Then  test cases follow. The first line of each test case contains one integer  ()\u00a0\u2014 the size of the matrices. The following  lines contain strings of length , consisting of the characters '' and ''\u00a0\u2014 the description of the matrix . An empty line follows. The following  lines contain strings of length , consisting of the characters '' and ''\u00a0\u2014 the description of the matrix . It is guaranteed that the sum of  over all test cases does not exceed .", "output": "For each test case, output on a separate line:    \"\", there is such a sequence of operations that the matrix  becomes equal to the matrix ;  \"\" otherwise.  You can output \"\" and \"\" in any case (for example, the strings , ,  and  will be recognized as positive).", "tutorial": "It is clear that the order of operations does not affect the final result, also it makes no sense to apply the same operation more than once (by the property of the  operation). Let's construct a sequence of operations that will reduce the matrix  to the matrix  (if the answer exists). Let's try iterate over: will we use the operation \"horizontal \".Now, by the each element of the first line (), we can understand whether it is necessary to apply the operation \"vertical \" (if ). Let's apply all necessary operations \"vertical \". It remains clear whether it is necessary to apply the operation \"horizontal \" for  (). Let's look at each element of the first column () by it you can understand whether it is necessary to apply the operation \"horizontal \" (if ).", "solution": "#include <bits/stdc++.h>\nusing namespace std;\n\nusing pii = pair<int, int>;\n\nbool check(vector<vector<int>> a, vector<vector<int>> const &b) {\n  int n = (int) a.size();\n  for (int j = 0; j < n; j++) {\n    if (a[0][j] != b[0][j]) {\n      for (int i = 0; i < n; i++) {\n        a[i][j] ^= 1;\n      }\n    }\n  }\n  for (int i = 0; i < n; i++) {\n    int need_xor = (a[i][0] ^ b[i][0]);\n    for (int j = 1; j < n; j++) {\n      if (need_xor != (a[i][j] ^ b[i][j])) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nvoid solve() {\n  int n;\n  cin >> n;\n  vector<vector<int>> a(n, vector<int>(n));\n  vector<vector<int>> b(n, vector<int>(n));\n  for (int i = 0; i < n; i++) {\n    string s;\n    cin >> s;\n    for (int j = 0; j < n; j++) {\n      a[i][j] = s[j] - '0';\n    }\n  }\n  for (int i = 0; i < n; i++) {\n    string s;\n    cin >> s;\n    for (int j = 0; j < n; j++) {\n      b[i][j] = s[j] - '0';\n    }\n  }\n\n  for (int times = 0; times < 2; times++) {\n    if (check(a, b)) {\n      cout << \"YES\\n\";\n      return;\n    }\n    for (int j = 0; j < n; j++) {\n      a[0][j] ^= 1;\n    }\n  }\n  cout << \"NO\\n\";\n}\n\nint main() {\n  int test;\n  cin >> test;\n  while (test-- > 0) {\n    solve();\n  }\n  return 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}