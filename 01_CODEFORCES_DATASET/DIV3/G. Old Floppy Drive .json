{"link": "https://codeforces.com//contest/1490/problem/G", "problemId": "898529", "shortId": "1490G", "contest_number": "1490", "name": "G. Old Floppy Drive ", "statement": "Polycarp was dismantling his attic and found an old floppy drive on it. A round disc was inserted into the drive with  integers written on it.Polycarp wrote the numbers from the disk into the  array. It turned out that the drive works according to the following algorithm:   the drive takes one positive number  as input and puts a pointer to the first element of the  array;  after that, the drive starts rotating the disk, every second moving the pointer to the next element, counting the sum of all the elements that have been under the pointer. Since the disk is round, in the  array, the last element is again followed by the first one;  as soon as the sum is at least , the drive will shut down. Polycarp wants to learn more about the operation of the drive, but he has absolutely no free time. So he asked you  questions. To answer the -th of them, you need to find how many seconds the drive will work if you give it  as input. Please note that in some cases the drive can work infinitely.For example, if ,  and , then the answers to the questions are as follows:   the answer to the first query is  because the drive initially points to the first item and the initial sum is .  the answer to the second query is , the drive will spin the disk completely twice and the amount becomes .  the answer to the third query is , the amount is .  ", "input": "The first line contains one integer  ()\u00a0\u2014 the number of test cases. Then  test cases follow. The first line of each test case consists of two positive integers ,  ()\u00a0\u2014 the number of numbers on the disk and the number of asked questions. The second line of each test case contains  integers  (). The third line of each test case contains  positive integers  (). It is guaranteed that the sums of  and  over all test cases do not exceed . ", "output": "Print  numbers on a separate line for each test case. The -th number is:     if the drive will run infinitely;  the number of seconds the drive will run, otherwise.   ", "tutorial": "Let's denote for  the sum of all the elements of the array, and for  the array of its prefix sums.If the drive runs for  seconds, the sum is .This formula immediately shows that if  and , then the disk will run indefinitely. Otherwise, the answer exists.The disk cannot make less than,  full spins, otherwise the required amount simply will not be achived. The disk can't make more spins either, because when it reaches the position of the maximum prefix sum,  will already be achived. So we know how to determine the number of full spins of the disk. Let's make these spins: .Now we have a new problem, given , find the first position  in the array, such that . This problem can be solved using binary search. If  is not sorted into the array, that is, there is , such that , then  can simply be thrown out of the array (the answer will never be reached on it).", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\nusing ll = long long;\n\nvoid solve() {\n  int n, m;\n  cin >> n >> m;\n  vector<ll> a(n);\n  ll allSum = 0;\n  vector<ll> pref;\n  vector<int> ind;\n  int curInd = 0;\n  for (ll &e : a) {\n    cin >> e;\n    allSum += e;\n    if (pref.empty() || allSum > pref.back()) {\n      pref.push_back(allSum);\n      ind.push_back(curInd);\n    }\n    curInd++;\n  }\n  for (int q = 0; q < m; q++) {\n    ll x;\n    cin >> x;\n    if (pref.back() < x && allSum <= 0) {\n      cout << -1 << \" \";\n      continue;\n    }\n    ll needTimes = 0;\n    if (pref.back() < x) {\n      needTimes = (x - pref.back() + allSum - 1) / allSum;\n    }\n    x -= needTimes * allSum;\n    cout << needTimes * n + ind[lower_bound(pref.begin(), pref.end(), x) - pref.begin()] << \" \";\n  }\n  cout << \"\\n\";\n}\n\nint main() {\n  int t;\n  cin >> t;\n  while (t--) {\n    solve();\n  }\n}", "interactive": false, "noSolution": false, "noTutorial": false}