{"link": "https://codeforces.com//contest/990/problem/B", "problemId": "188991", "shortId": "990B", "contest_number": "990", "name": "B. Micro-World", "statement": "You have a Petri dish with bacteria and you are preparing to dive into the harsh micro-world. But, unfortunately, you don't have any microscope nearby, so you can't watch them.You know that you have  bacteria in the Petri dish and size of the -th bacteria is . Also you know intergalactic positive integer constant .The -th bacteria can swallow the -th bacteria if and only if  and . The -th bacteria disappear, but the -th bacteria doesn't change its size. The bacteria can perform multiple swallows. On each swallow operation any bacteria  can swallow any bacteria  if  and . The swallow operations go one after another.For example, the sequence of bacteria sizes  and . The one of possible sequences of swallows is:         . In total there are  bacteria remained in the Petri dish.Since you don't have a microscope, you can only guess, what the minimal possible number of bacteria can remain in your Petri dish when you finally will find any microscope.", "input": "The first line contains two space separated positive integers  and  (, ) \u2014 number of bacteria and intergalactic constant . The second line contains  space separated integers  () \u2014 sizes of bacteria you have.", "output": "Print the only integer \u2014 minimal possible number of bacteria can remain.", "tutorial": "It can be proved that the optimal answer equals to a number of bacteria which can't be eaten by any other bacteria. So for each bacteria  you need to check existence of any bacteria  satisfying condition .There plenty of ways to check this condition. One of them is to sort array  and for each  find minimal  with  or with two-pointers technique. Or you can use the fact that  and build solution around it.Result complexity is .", "solution": "#include<bits/stdc++.h>\n\nusing namespace std;\n\nconst int N = 200 * 1000 + 555;\nint n, k, a[N];\n\ninline bool read() {\n\tif(!(cin >> n >> k))\n\t\treturn false;\n\tfor(int i = 0; i < n; i++)\n\t\tassert(scanf(\"%d\", &a[i]) == 1);\n\treturn true;\n}\n\ninline void solve() {\n\tsort(a, a + n);\n\ta[n++] = int(2e9);\n\t\n\tint ans = 0, u = 0;\n\tfor(int i = 0; i < n - 1; i++) {\n\t\twhile(u < n && a[i] == a[u])\n\t\t\tu++;\n\t\tif(a[u] - a[i] > k)\n\t\t\tans++;\n\t}\n\tcout << ans << endl;\n}\n\nint main() {\n#ifdef _DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin);\n\tint tt = clock();\n#endif\n\n\tif(read()) {\n\t\tsolve();\n#ifdef _DEBUG\n\t\tcerr << \"TIME = \" << clock() - tt << endl;\n#endif\n\t}\n\treturn 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}