{"link": "https://codeforces.com//contest/863/problem/C", "problemId": "123493", "shortId": "863C", "contest_number": "863", "name": "C. 1-2-3", "statement": "Ilya is working for the company that constructs robots. Ilya writes programs for entertainment robots, and his current project is \"Bob\", a new-generation game robot. Ilya's boss wants to know his progress so far. Especially he is interested if Bob is better at playing different games than the previous model, \"Alice\". So now Ilya wants to compare his robots' performance in a simple game called \"1-2-3\". This game is similar to the \"Rock-Paper-Scissors\" game: both robots secretly choose a number from the set  and say it at the same moment. If both robots choose the same number, then it's a draw and noone gets any points. But if chosen numbers are different, then one of the robots gets a point:  beats ,  beats  and  beats . Both robots' programs make them choose their numbers in such a way that their choice in -th game depends only on the numbers chosen by them in -th game. Ilya knows that the robots will play  games, Alice will choose number  in the first game, and Bob will choose  in the first game. He also knows both robots' programs and can tell what each robot will choose depending on their choices in previous game. Ilya doesn't want to wait until robots play all  games, so he asks you to predict the number of points they will have after the final game. ", "input": "The first line contains three numbers , ,  (, ).  Then  lines follow, -th of them containing  numbers , , , where  represents Alice's choice in the game if Alice chose  in previous game and Bob chose  ().  Then  lines follow, -th of them containing  numbers , , , where  represents Bob's choice in the game if Alice chose  in previous game and Bob chose  (). ", "output": "Print two numbers. First of them has to be equal to the number of points Alice will have, and second of them must be Bob's score after  games.", "tutorial": "Notice that there are only  possible patterns in this game. You can used in a following way. Simulate games till one of the patterns get repeated. Games between this pair of occurences will get you the same total outcome no matter when they are played. Let the distance between the games with the same pattern is  and index of these games are  and  (zero-indexed). Total score of some interval is . Then the answer will be  +  +     .", "solution": "#include \"bits/stdc++.h\"\nusing namespace std;\n#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))\n#define rer(i,l,u) for(int (i)=(int)(l);(i)<=(int)(u);++(i))\n#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))\nstatic const int INF = 0x3f3f3f3f; static const long long INFL = 0x3f3f3f3f3f3f3f3fLL;\ntypedef vector<int> vi; typedef pair<int, int> pii; typedef vector<pair<int, int> > vpii; typedef long long ll;\ntemplate<typename T, typename U> static void amin(T &x, U y) { if (y < x) x = y; }\ntemplate<typename T, typename U> static void amax(T &x, U y) { if (x < y) x = y; }\n\nint main() {\n\tlong long K; int a; int b;\n\twhile (~scanf(\"%lld%d%d\", &K, &a, &b)) {\n\t\t-- a, -- b;\n\t\tvector<vector<int> > A(3, vector<int>(3));\n\t\tfor (int i = 0; i < 3; ++ i) for (int j = 0; j < 3; ++ j)\n\t\t\tscanf(\"%d\", &A[i][j]), -- A[i][j];\n\t\tvector<vector<int> > B(3, vector<int>(3));\n\t\tfor (int i = 0; i < 3; ++ i) for (int j = 0; j < 3; ++ j)\n\t\t\tscanf(\"%d\", &B[i][j]), -- B[i][j];\n\t\tstruct Perm {\n\t\t\tarray<pair<int, pair<ll, ll>>, 9> next;\n\t\t\tPerm() {\n\t\t\t\trep(i, 9)\n\t\t\t\t\tnext[i] = { i, {0, 0} };\n\t\t\t}\n\t\t\tPerm operator*(const Perm &that) {\n\t\t\t\tPerm res;\n\t\t\t\trep(i, 9) {\n\t\t\t\t\tint j = next[i].first;\n\t\t\t\t\tres.next[i] = {\n\t\t\t\t\t\tthat.next[j].first,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnext[i].second.first + that.next[j].second.first,\n\t\t\t\t\t\t\tnext[i].second.second + that.next[j].second.second,\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn res;\n\t\t\t}\n\t\t};\n\t\tPerm perm;\n\t\trep(i, 3) rep(j, 3) {\n\t\t\tint x = A[i][j], y = B[i][j];\n\t\t\tperm.next[i * 3 + j] = { x * 3 + y, {(i + 2) % 3 == j, (j + 2) % 3 == i} };\n\t\t}\n\t\tPerm x = perm, y{};\n\t\twhile (K > 0) {\n\t\t\tif (K & 1) y = y * x;\n\t\t\tx = x * x;\n\t\t\tK >>= 1;\n\t\t}\n\t\tauto ans = y.next[a * 3 + b].second;\n\t\tprintf(\"%lld %lld\\n\", ans.first, ans.second);\n\t}\n\treturn 0;\n}\n", "interactive": false, "noSolution": false, "noTutorial": false}