{"link": "https://codeforces.com//contest/1452/problem/C", "problemId": "802106", "shortId": "1452C", "contest_number": "1452", "name": "C. Two Brackets", "statement": "You are given a string , consisting of brackets of two types: '', '', '' and ''.A string is called a regular bracket sequence (RBS) if it's of one of the following types:   empty string;  '' + RBS + '';  '' + RBS + '';  RBS + RBS. where plus is a concatenation of two strings.In one move you can choose a non-empty subsequence of the string  (not necessarily consecutive) that is an RBS, remove it from the string and concatenate the remaining parts without changing the order.What is the maximum number of moves you can perform?", "input": "The first line contains a single integer  ()\u00a0\u2014 the number of testcases. Each of the next  lines contains a non-empty string, consisting only of characters '', '', '' and ''. The total length of the strings over all testcases doesn't exceed .", "output": "For each testcase print a single integer\u00a0\u2014 the maximum number of moves you can perform on a given string .", "tutorial": "Notice that it's never optimal to erase a subsequence of length greater than  because every RBS of length above  contains an RBS of length  inside and removing it won't break the regular property of the outside one.So the task can be solved for the round and the square brackets independently, the answer will be the sum of both. Let's solve the version for brackets '' and ''. In general, you just want to remove consecutive substring \"\" until there is no more left in the string. That can be done by processing the string from left and right and maintaining a stack of current brackets. If the top bracket in it is '' and the current bracket is '', then you can increment the answer and remove that bracket from the stack. Otherwise, you push the current bracket to the stack.Overall complexity:  per testcase.", "solution": "def calc(s, x, y):\n\tbal, cnt = 0, 0\n\tfor c in s:\n\t\tif c == y:\n\t\t\tif bal > 0:\n\t\t\t\tbal -= 1\n\t\t\t\tcnt += 1\n\t\telif c == x:\n\t\t\tbal += 1\n\treturn cnt\n\nfor _ in range(int(input())):\n\ts = input()\n\tprint(calc(s, '(', ')') + calc(s, '[', ']'))", "interactive": false, "noSolution": false, "noTutorial": false}