{"link": "https://codeforces.com//contest/846/problem/C", "problemId": "120999", "shortId": "846C", "contest_number": "846", "name": "C. Four Segments", "statement": "You are given an array of  integer numbers. Let  be the sum of all numbers on positions from  to  non-inclusive (-th element is counted, -th element is not counted). For indices  and  holds . Indices in array are numbered from . For example, if , then , ,  and  for each  from  to .Choose the indices of three delimiters , ,  () and divide the array in such a way that the value of  -  +  -  is maximal. Note that some of the expressions  can correspond to empty segments (if  for some segment).", "input": "The first line contains one integer number  (). The second line contains  numbers  ().", "output": "Choose three indices so that the value of  is maximal. If there are multiple answers, print any of them.", "tutorial": "Imagine the same task but without the first term in sum. As the sum of the array is fixed, the best second segment should be the one with the greatest sum. This can be solved in  with partial sums. When recalcing the best segment to end at position , you should take minimal prefix sum from  to  inclusive (from the whole sum you want to subtract the lowest number). Now let's just iterate over all possible ends of the first segment and solve the task above on the array without this segment.Oveall complexity: .", "solution": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long LL;\n#define N 5140\nLL n , a[ N ] , s[ N ] , ss[ N ];\nLL lb[ N ] , rb[ N ];\nLL ls[ N ] , rs[ N ];\nint main(){\n  cin >> n;\n  for( int i = 0 ; i < n ; i ++ ){\n    cin >> a[ i ];\n    ss[ i ] = s[ i ] = a[ i ];\n    if( i ) s[ i ] += s[ i - 1 ];\n  }\n  for( int i = n - 2 ; i >= 0 ; i -- )\n    ss[ i ] += ss[ i + 1 ];\n  LL ans = s[ n - 1 ] , b[ 3 ] = { n , n , n };\n  LL bst = -1 , bs = 0;\n  for( int i = 0 ; i < n ; i ++ ){\n    if( s[ i ] > bs ) bs = s[ i ] , bst = i;\n    ls[ i ] = bs + bs - s[ i ];\n    lb[ i ] = bst;\n  }\n  if( ls[ n - 1 ] > ans ){\n    ans = ls[ n - 1 ];\n    b[ 0 ] = lb[ n - 1 ] + 1;\n    b[ 1 ] = n;\n    b[ 2 ] = n;\n  }\n  bst = n , bs = 0;\n  for( int i = n - 1 ; i >= 0 ; i -- ){\n    if( ss[ i ] < bs ) bs = ss[ i ] , bst = i;\n    rs[ i ] = ss[ i ] - bs - bs;\n    rb[ i ] = bst;\n  }\n  for( int i = 0 ; i + 1 < n ; i ++ ){\n    LL tans = ls[ i ] + rs[ i + 1 ];\n    if( tans <= ans ) continue;\n    ans = tans;\n    b[ 0 ] = lb[ i ] + 1;\n    b[ 1 ] = i + 1;\n    b[ 2 ] = rb[ i + 1 ];\n  }\n  cout << b[ 0 ] << \" \";\n  cout << b[ 1 ] << \" \";\n  cout << b[ 2 ] << endl;\n}\n", "interactive": false, "noSolution": false, "noTutorial": false}