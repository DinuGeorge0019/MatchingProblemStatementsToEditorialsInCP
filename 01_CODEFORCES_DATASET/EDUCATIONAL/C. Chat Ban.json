{"link": "https://codeforces.com//contest/1612/problem/C", "problemId": "1198237", "shortId": "1612C", "contest_number": "1612", "name": "C. Chat Ban", "statement": "You are a usual chat user on the most famous streaming platform. Of course, there are some moments when you just want to chill and spam something.More precisely, you want to spam the emote triangle of size . It consists of  messages. The first message consists of one emote, the second one \u2014 of two emotes, ..., the -th one \u2014 of  emotes, the -th one \u2014 of  emotes, ..., and the last one \u2014 of one emote.For example, the emote triangle for  consists of  messages:  Of course, most of the channels have auto moderation. Auto moderator of the current chat will ban you right after you spam at least  emotes in succession (you can assume you are the only user in the chat). Now you are interested \u2014 how many messages will you write before getting banned? Or maybe you will not get banned at all (i.e. will write all  messages and complete your emote triangle successfully)? Note that if you get banned as a result of writing a message, this message is also counted.You have to answer  independent test cases.", "input": "The first line of the input contains one integer  () \u2014 the number of test cases. The next  lines describe test cases. The only line of the test case contains integers  and  ().", "output": "For each test case, print the number of messages you will write before getting banned for the corresponding values  and .", "tutorial": "This is a pretty obvious binary search problem. If we get banned after  messages, we also get banned after ,  and so on messages (and vice versa, if we don't get banned after  messages, we also don't get banned after ,  and so on messages).For simplicity, let's split the problem into two parts: when we check if we're getting banned after  messages, let's handle cases  and  separately.Recall that the sum of the arithmetic progression consisting of integers , , ...,  is . Let it be .The first case is pretty simple: the number of emotes we send with  messages when  is  which is . So we only need to check if .The second case is a bit harder but still can be done using arithmetic progression formulas. Firstly, we send all messages for  (the number of such messages is ). Then, we need to add  messages. This number equals to  (i.e. we send all messages from  to  and subtract messages from  to  from this amount). The final condition is .Time complexity:  per test case.", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nlong long get(int x) {\n    return x * 1ll * (x + 1) / 2;\n}\n\nint main() {\n#ifdef _DEBUG\n    freopen(\"input.txt\", \"r\", stdin);\n//  freopen(\"output.txt\", \"w\", stdout);\n#endif\n    \n    int t;\n    cin >> t;\n    while (t--) {\n        int k;\n        long long x;\n        cin >> k >> x;\n        long long l = 1, r = 2 * k - 1;\n        long long res = 2 * k - 1;\n        bool over = false;\n        while (l <= r) {\n            int mid = (l + r) >> 1;\n            if (mid >= k) {\n                over = (get(k) + get(k - 1) - get(2 * k - 1 - mid) >= x);\n            } else {\n                over = (get(mid) >= x);\n            }\n            if (over) {\n                res = mid;\n                r = mid - 1;\n            } else {\n                l = mid + 1;\n            }\n        }\n        cout << res << endl;\n    }\n    \n    return 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}