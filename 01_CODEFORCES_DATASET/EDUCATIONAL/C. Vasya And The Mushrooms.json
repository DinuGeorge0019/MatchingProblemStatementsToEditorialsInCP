{"link": "https://codeforces.com//contest/1016/problem/C", "problemId": "204438", "shortId": "1016C", "contest_number": "1016", "name": "C. Vasya And The Mushrooms", "statement": "Vasya's house is situated in a forest, and there is a mushroom glade near it. The glade consists of two rows, each of which can be divided into  consecutive cells. For each cell Vasya knows how fast the mushrooms grow in this cell (more formally, how many grams of mushrooms grow in this cell each minute). Vasya spends exactly one minute to move to some adjacent cell. Vasya cannot leave the glade. Two cells are considered adjacent if they share a common side. When Vasya enters some cell, he instantly collects all the mushrooms growing there.Vasya begins his journey in the left upper cell. Every minute Vasya must move to some adjacent cell, he cannot wait for the mushrooms to grow. He wants to visit all the cells  and maximize the total weight of the collected mushrooms. Initially, all mushrooms have a weight of . Note that Vasya doesn't need to return to the starting cell.Help Vasya! Calculate the maximum total weight of mushrooms he can collect.", "input": "The first line contains the number  \u2014 the length of the glade. The second line contains  numbers  \u2014 the growth rate of mushrooms in the first row of the glade. The third line contains  numbers  is the growth rate of mushrooms in the second row of the glade.", "output": "Output one number \u2014 the maximum total weight of mushrooms that Vasya can collect by choosing the optimal route. Pay attention that Vasya must visit every cell of the glade .", "tutorial": "A route visiting each cell exactly once can always be denoted as follows: several (possibly zero) first columns of the glade are visited in a zigzag pattern, then Vasya goes to the right until the end of the glade, makes one step up or down and goes left until he visits all remaining cells:  There are  such routes. To calculate the weight of collected mushrooms quickly, we will precompute three arrays for the first row of the glade \u2014  and .  will be used to compute the weight of mushrooms collected when Vasya moves to the right until the last column of the glade,  \u2014 when Vasya moves to the left from the last column, and  \u2014 to handle the growth of mushrooms.Also we have to compute the same arrays for the second row of the glade.Let's iterate on the number of columns Vasya will pass in a zigzag pattern and maintain the weight of mushrooms he will collect while doing so. Then we have to add the weight of the mushrooms Vasya will gather while moving to the right, and then \u2014 while moving to the left. The first can be handled by arrays  and , the second \u2014 by arrays  and .", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int N = 300 * 1000 + 9;\n\nint n;\nint a[2][N];\nlong long sum123[2][N];\nlong long sum321[2][N];\nlong long sum111[2][N];\n\nint main() {\n\t//freopen(\"input.txt\", \"r\", stdin);\n\t\n\tscanf(\"%d\", &n);\n\tfor(int i = 0; i < 2; ++i)\n\t\tfor(int j = 0; j < n; ++j)\n\t\t\tscanf(\"%d\", &a[i][j]);\n\t\n\tfor(int i = 0; i < 2; ++i)\n\t\tfor(int j = n - 1; j >= 0; --j){\n\t\t\tsum123[i][j] = sum123[i][j + 1] + (j + 1) * 1LL * a[i][j];\n\t\t\tsum321[i][j] = sum321[i][j + 1] + (n - j) * 1LL * a[i][j];\n\t\t\tsum111[i][j] = sum111[i][j + 1] + a[i][j];\n\t\t}\n\t\t\n/*\tfor(int i = 0; i < 2; ++i)\n\t\tfor(int j = n - 1; j >= 0; --j){\n\t\t\tcout << i << ' ' << j << \" : \";\n\t\t\tcout << sum123[i][j] << \"  \" << sum321[i][j] << \"  \" << sum111[i][j] << endl;\n\t\t}\t\t\t*/\n\t\t\n\tlong long res = 0, sum = 0;\n\tfor(int i = 0, j = 0; j < n; ++j, i ^= 1){\n\t\tlong long nres = sum;\n\t\tnres += sum123[i][j] + j * 1LL * sum111[i][j];\n\t\tnres += sum321[i ^ 1][j] + (j + n) * 1LL * sum111[i ^ 1][j];\n\t\tres = max(res, nres);\n\t\t\n\t\tsum += a[i][j] * 1ll * (j + j + 1);\n\t\tsum += a[i ^ 1][j] * 1ll * (j + j + 2);\n\t}\n\t\n\tfor(int j = 0; j < n; ++j) res -= a[0][j] + a[1][j];\n\tprintf(\"%I64d\\n\", res);\n\t\n    return 0;\n}                             \t", "interactive": false, "noSolution": false, "noTutorial": false}