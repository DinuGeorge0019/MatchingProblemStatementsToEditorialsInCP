{"link": "https://codeforces.com//contest/1167/problem/D", "problemId": "344633", "shortId": "1167D", "contest_number": "1167", "name": "D. Bicolored RBS", "statement": "A string is called  if it does not contain any characters other than \"\" and \"\". A bracket sequence is called  (shortly, RBS) if it is possible to obtain correct arithmetic expression by inserting characters \"\" and \"\" into this sequence. For example, \"\", \"\" and \"\" are RBS and \"\" and \"\" are not.We can see that each opening bracket in RBS is paired with some closing bracket, and, using this fact, we can define  of the RBS as maximum number of bracket pairs, such that the -nd pair lies inside the -st one, the -rd one \u2014 inside the -nd one and so on. For example, nesting depth of \"\" is , \"\" is  and \"\" is .Now, you are given RBS  of even length . You should color each bracket of  into one of two colors: red or blue. Bracket sequence , consisting only of red brackets, should be RBS, and bracket sequence, consisting only of blue brackets , should be RBS. Any of them can be empty. You are not allowed to reorder characters in ,  or . No brackets can be left uncolored.Among all possible variants you should choose one that  of 's and 's nesting depth. If there are multiple solutions you can print any of them.", "input": "The first line contains an even integer  () \u2014 the length of RBS . The second line contains regular bracket sequence  (, \"\", \"\").", "output": "Print single string  of length  consisting of \"\"-s and \"\"-s. If  is equal to  then character  belongs to RBS , otherwise  belongs to .", "tutorial": "Let  be nested depth of RBS . There is an interesting fact that . From the other side we can always reach equation  using some approaches.Let's look at prefix of length  of string . Let  be number of opening bracket in the prefix,  \u2014 number of closing brackets. Then we can define balance of the -th prefix of  as .The author's approach is next: Let's define  of pair of brackets (matched in natural way) as , where  is position of opening bracket of this pair. Then we will color in red all pairs with even level and in blue \u2014 with odd level.\u2014\u2014 Proof of :It can be shown that  and exists such  that .After any coloring of  we can define number of opening/closing red (blue) brackets of -th prefix of  as  () and  () respectively. Since  and , then Finally, ", "solution": "#include<bits/stdc++.h>\nusing namespace std;\n\n#define fore(i, l, r) for(int i = int(l); i < int(r); i++)\n#define sz(a) int((a).size())\n\nint n;\nstring s;\n\ninline bool read() {\n\tif(!(cin >> n))\n\t\treturn false;\n\tcin >> s;\n\treturn true;\n}\n\ninline void solve() {\n\tstring t(n, '0');\n\t\n\tint bal = 0;\n\tfore(i, 0, n) {\n\t\tif(s[i] == ')')\n\t\t\tbal--;\n\t\t\n\t\tt[i] = char('0' + (bal & 1));\n\t\t\n\t\tif(s[i] == '(')\n\t\t\tbal++;\n\t}\n\t\n\tcout << t << endl;\n}\n\nint main() {\n#ifdef _DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin);\n\tint tt = clock();\n#endif\n\t\n\tif(read()) {\n\t\tsolve();\n\t\t\n#ifdef _DEBUG\n\t\tcerr << \"TIME = \" << clock() - tt << endl;\n\t\ttt = clock();\n#endif\n\t}\n\treturn 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}