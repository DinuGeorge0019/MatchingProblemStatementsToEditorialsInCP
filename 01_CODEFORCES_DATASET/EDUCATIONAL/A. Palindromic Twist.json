{"link": "https://codeforces.com//contest/1027/problem/A", "problemId": "209488", "shortId": "1027A", "contest_number": "1027", "name": "A. Palindromic Twist", "statement": "You are given a string  consisting of  lowercase Latin letters.  is even.For each position  () in string  you are required to change the letter on this position either to the previous letter in alphabetic order or to the next one (letters '' and '' have only one of these options). Letter in every position must be changed .For example, letter '' should be changed either to '' or to '', letter '' should be changed to '' and letter '' should be changed to ''.That way string \"\", for example, can be changed to \"\" (''  '', ''  '', ''  '', ''  '', ''  '', ''  '', ''  '', ''  '', ''  '', ''  '').String  is called a palindrome if it reads the same from left to right and from right to left. For example, strings \"\" and \"\" are palindromes and strings \"\" and \"\" are not.Your goal is to check if it's possible to make string  a palindrome by applying the aforementioned changes to every position. Print \"\" if string  can be transformed to a palindrome and \"\" otherwise.Each testcase contains several strings, for each of them you are required to solve the problem separately.", "input": "The first line contains a single integer  () \u2014 the number of strings in a testcase. Then  lines follow \u2014 lines  and  of them describe the -th string. The first line of the pair contains a single integer  (,  is even) \u2014 the length of the corresponding string. The second line of the pair contains a string , consisting of  lowercase Latin letters.", "output": "Print  lines. The -th line should contain the answer to the -th string of the input. Print \"\" if it's possible to make the -th string a palindrome by applying the aforementioned changes to every position. Print \"\" otherwise.", "tutorial": "If some string can't be transformed to palindrom then it has some pair of positions  with different letters on them (as no such pair affects any other pair). Thus you need to check each pair for  from  to  and verify that the distance between the corresponding letters is either  or .Overall complexity: .", "solution": "#include <bits/stdc++.h>\n\n#define forn(i, n) for (int i = 0; i < int(n); i++)\n\nusing namespace std;\n\n\nint main() {\n    int T;\n    cin >> T;\n    \n    int n;\n    string s;\n    forn(_, T){\n        cin >> n >> s;\n        bool ok = true;\n        forn(i, n){\n            int k = abs(s[i] - s[n - i - 1]);\n            if (k > 2 || k % 2 == 1){\n                ok = false;\n                break;\n            }\n        }\n        cout << (ok ? \"YES\" : \"NO\") << endl;\n    }\n    return 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}