{"link": "https://codeforces.com//contest/1525/problem/B", "problemId": "987012", "shortId": "1525B", "contest_number": "1525", "name": "B. Permutation Sort", "statement": "You are given a permutation  consisting of  numbers , , ...,  (a permutation is an array in which each element from  to  occurs exactly once).You can perform the following operation: choose some subarray (contiguous subsegment) of  and rearrange the elements in it in any way you want. But this operation cannot be applied to the whole array.For example, if  and we want to apply the operation to the subarray  (the subarray containing all elements from the -nd to the -th), then after the operation, the array can become  or, for example, .Your task is to calculate the minimum number of operations described above to sort the permutation  in ascending order.", "input": "The first line contains a single integer  ()\u00a0\u2014 the number of test cases. The first line of the test case contains a single integer  ()\u00a0\u2014 the number of elements in the permutation. The second line of the test case contains  distinct integers from  to \u00a0\u2014 the given permutation .", "output": "For each test case, output a single integer\u00a0\u2014 the minimum number of operations described above to sort the array  in ascending order.", "tutorial": "To solve the problem, it is enough to consider several cases:  if the array is already sorted, the answer is ;  if  (or ), then you can sort the array in one operation by selecting the subarray  (or );  if  and , you can perform the sequence of operations ,  and  and sort the array on each of them (you can't do it faster since you can't move both  to position  and  to position  in only  operations);  otherwise, the array can be sorted in  operations. ", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n  int t;\n  scanf(\"%d\", &t);\n  while (t--) {\n    int n;\n    scanf(\"%d\", &n);\n    vector<int> a(n);\n    for (int &x : a) scanf(\"%d\", &x);\n    int ans = 2;\n    if (is_sorted(a.begin(), a.end()))\n      ans = 0;\n    else if (a[0] == 1 || a[n - 1] == n)\n      ans = 1;\n    else if (a[0] == n && a[n - 1] == 1)\n      ans = 3;\n    printf(\"%d\\n\", ans);\n  }\n}\n", "interactive": false, "noSolution": false, "noTutorial": false}