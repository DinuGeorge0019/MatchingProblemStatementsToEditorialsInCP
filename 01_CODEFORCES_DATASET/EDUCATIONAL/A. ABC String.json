{"link": "https://codeforces.com//contest/1494/problem/A", "problemId": "913250", "shortId": "1494A", "contest_number": "1494", "name": "A. ABC String", "statement": "You are given a string , consisting of  characters,  is even. For each  from  to   is one of '', '' or ''.A bracket sequence is a string containing only characters \"\" and \"\". A regular bracket sequence is a bracket sequence that can be transformed into a correct arithmetic expression by inserting characters \"\" and \"\" between the original characters of the sequence. For example, bracket sequences \"\" and \"\" are regular (the resulting expressions are: \"\" and \"\"), and \"\", \"\" and \"\" are not.You want to find a string  that consists of  characters such that:    is a regular bracket sequence;  if for some  and  () , then . In other words, you want to replace all occurrences of '' with the same type of bracket, then all occurrences of '' with the same type of bracket and all occurrences of '' with the same type of bracket.Your task is to determine if such a string  exists.", "input": "The first line contains a single integer  ()\u00a0\u2014 the number of testcases. Then the descriptions of  testcases follow. The only line of each testcase contains a string .  consists only of uppercase letters '', '' and ''. Let  be the length of . It is guaranteed that  is even and .", "output": "For each testcase print \"\" if there exists such a string  that:     is a regular bracket sequence;  if for some  and  () , then .  Otherwise, print \"\". You may print every letter in any case you want (so, for example, the strings , ,  and  are all recognized as positive answer).", "tutorial": "There are two key observations.First, a regular bracket sequence always starts with an opening bracket and ends with a closing one. Thus, the first letter of  corresponds to an opening bracket and the last letter corresponds to a closing bracket. If they are the same, then the answer is \"\".Second, a regular bracket sequence has exactly  opening and  closing brackets. Thus, we can check if the counts of the remaining letter and the first letter of the string or the remaining letter and the last letter of the string make it  in total. If neither of them do, then the answer is \"\". If both do, then that means that there are  occurrences of the remaining letter, so it doesn't matter what bracket it is assigned to.Finally, after the assignment is complete, check if the resulting string is a regular bracket sequence. For that you have to check if on any prefix the number of opening brackets is greater or equal to the number of closing brackets. And also if the total number of opening and closing brackets is the same.Overall complexity:  per testcase.", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nbool solve() {\n  string s;\n  cin >> s;\n  vector<int> d(3);\n  int x = s[0] - 'A';\n  int y = s.back() - 'A';\n  if (x == y)\n    return false;\n  d[x] = 1; d[y] = -1;\n  if (count(s.begin(), s.end(), 'A' + x) == s.length() / 2)\n    d[3 ^ x ^ y] = -1;\n  else\n    d[3 ^ x ^ y] = 1;\n  int bal = 0;\n  for (char c : s) {\n    bal += d[c - 'A'];\n    if (bal < 0) return false;\n  }\n  return bal == 0;\n}\n\nint main() {\n  int t; cin >> t;\n  while (t--) {\n    cout << (solve() ? \"YES\\n\" : \"NO\\n\");\n  }\n}", "interactive": false, "noSolution": false, "noTutorial": false}