{"link": "https://codeforces.com//contest/600/problem/A", "problemId": "41573", "shortId": "600A", "contest_number": "600", "name": "A. Extract Numbers", "statement": "You are given string . Let's call  any largest sequence of consecutive symbols without symbols '' (comma) and '' (semicolon). For example, there are four  in string \"\": \"\", \"\", \"\", \"\". A word can be empty: for example, the string =\"\" contains three empty words separated by ''.You should find all  in the given string that are nonnegative INTEGER numbers without leading zeroes and build by them new string . String  should contain all  that are numbers separating them by '' (the order of numbers should remain the same as in the string ). By all other  you should build string  in the same way (the order of numbers should remain the same as in the string ).Here strings \"\", \"\" are INTEGER numbers, but \"\" and \"\" are not.For example, for the string  the string  would be equal to \"\" and string  would be equal to \"\".", "input": "The only line of input contains the string  (). The string contains only symbols '' (ASCII 46), '' (ASCII 44), '' (ASCII 59), digits, lowercase and uppercase latin letters.", "output": "Print the string  to the first line and string  to the second line. Each string should be surrounded by quotes (ASCII 34). If there are no  that are numbers print dash (ASCII 45) on the first line. If all  are numbers print dash on the second line.", "tutorial": "This is a technical problem. You should do exactly what is written in problem statement.\n", "solution": "/*\nYeah\n\nHere she comes again, she's feeling like she's already won\nI believe it's gonna end again, all for naught\nMy philosophy is things are just as wrong as they seem\nI believe it's gonna end this way, atrocity\n\nDo you believe in love like I believe in pain\nNobody died for you, somebody pray for me\n\nWhen you see me cut me down\nAnd I will force it underground\nThere's no one left to hurt but me\nAnd it's because of me, right?\n\nThere he walks away, he's feeling like he's having them on\nI believe he's gonna bend again and all for no\nMy philosophy is things are just as wrong as they seem\nI've gotta get you off of my mind, in oddity\n\nDo you believe in love like I believe in pain\nNobody died for you, somebody pray for me\n\nWhen you see me cut me down\nAnd I will force it underground\nThere's no one left to hurt but me\nAnd it's because of me, right?\n\nI want to see you suffer, suffer\n\nWhen you see me cut me down\nAnd I will force it underground\nThere's no one left to hurt but me\nAnd it's because of me, right?\n\nWhen you see me cut me down\nAnd when you see me cut me down\nAnd when you see me cut me down\nAnd it's because of me, suffer\n*/\n\n//#pragma comment(linker, \"/STACK:16777216\")\n#include <fstream>\n#include <iostream>\n#include <string>\n#include <complex>\n#include <math.h>\n#include <set>\n#include <vector>\n#include <map>  \n#include <queue>\n#include <stdio.h>\n#include <stack>\n#include <algorithm>\n#include <list>\n#include <ctime>\n#include <memory.h>\n#include <ctime> \n#include <assert.h>\n\n#define y0 sdkfaslhagaklsldk\n#define y1 aasdfasdfasdf\n#define yn askfhwqriuperikldjk\n#define j1 assdgsdgasghsf\n#define tm sdfjahlfasfh\n#define lr asgasgash\n\n#define eps 1e-8\n#define M_PI 3.141592653589793\n#define bs 1000000007\n#define bsize 512\n\nconst int N = 100005;\n\nusing namespace std;\n\nstring st;\nvector<string> v1,v2;\n\nbool good(string st)\n{\n\tif (st.size()==0)\n\t\treturn false;\n\tfor (int i=0;i<st.size();i++)\n\t\tif (st[i]<'0'||st[i]>'9')\n\t\t\treturn false;\n\tif (st.size()>1&&st[0]=='0')\n\t\treturn false;\n\treturn true;\n}\n\nvoid add_string(string st)\n{\n\tif (good(st))\n\t\tv1.push_back(st);\n\telse\n\t\tv2.push_back(st);\n}\nint main(){\n\t//freopen(\"beavers.in\",\"r\",stdin);\n\t//freopen(\"beavers.out\",\"w\",stdout);\n\t//freopen(\"F:/in.txt\",\"r\",stdin);\n\t//freopen(\"F:/output.txt\",\"w\",stdout);\n\tios_base::sync_with_stdio(0);\n\t//cin.tie(0);\n\t\n\tgetline(cin,st);\n\t\n\tstring temp=\"\";\n\t\n\tfor (int i=0;i<st.size();i++)\n\t{\n\t\tif (st[i]==';'||st[i]==',')\n\t\t{\n\t\t\tadd_string(temp);\n\t\t\ttemp=\"\";\n\t\t}\n\t\telse\n\t\t\ttemp+=st[i];\n\t}\n\t\n\tadd_string(temp);\n\t\n\tif (v1.size()==0)\n\t\tcout<<\"-\"<<endl;\n\telse\n\t{\n\t\tcout<<\"\\\"\";\n\t\tfor (int i=0;i<v1.size();i++)\n\t\t{\n\t\t\tif (i)\n\t\t\t\tcout<<\",\";\n\t\t\tcout<<v1[i];\n\t\t}\n\t\tcout<<\"\\\"\";\n\t\tcout<<endl;\n\t}\n\t\n\tif (v2.size()==0)\n\t\tcout<<\"-\"<<endl;\n\telse\n\t{\n\t\tcout<<\"\\\"\";\n\t\tfor (int i=0;i<v2.size();i++)\n\t\t{\n\t\t\tif (i)\n\t\t\t\tcout<<\",\";\n\t\t\tcout<<v2[i];\n\t\t}\n\t\tcout<<\"\\\"\";\n\t\tcout<<endl;\n\t}\n\t\n\treturn 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}