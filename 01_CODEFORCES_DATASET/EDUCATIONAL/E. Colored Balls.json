{"link": "https://codeforces.com//contest/792/problem/E", "problemId": "100428", "shortId": "792E", "contest_number": "792", "name": "E. Colored Balls", "statement": "There are  boxes with colored balls on the table. Colors are numbered from  to . -th box contains  balls, all of which have color . You have to write a program that will divide all balls into sets such that:  each ball belongs to exactly one of the sets,  there are no empty sets,  there is no set containing two (or more) balls of different colors (each set contains only balls of one color),  there are no two sets such that the difference between their sizes is greater than . Print the minimum possible number of sets.", "input": "The first line contains one integer number  (). The second line contains  integer numbers  ().", "output": "Print one integer number \u2014 the minimum possible number of sets.", "tutorial": "If we want to divide all balls from some box into  sets with sizes  and  (and there are  balls in this box), then either  or . So the solution will be like that:  Iterate over the possible sizes of sets  (from  to , or to some constant \u2014 in our solution it's ) and check if we can divide all balls into sets with sizes  and ,  Then iterate over the number of sets , calculate the sizes of sets if we want to divide the first box exactly into  sets and try to divide balls from all other boxes into sets of these sizes. If we want to divide  balls from the same box into  sets, then the sizes will be  and ; but if , then we also have to check if sizes can be  and .If we fix sizes  and  and we want to check whether we can divide a box with  balls into sets with these sizes (and to get the minimum possible number of such sets), then the best option will be to take  sets. If , then such division is possible. If not, then it's impossible to divide  balls into sets of  and  balls.Time complexity of this solution is .", "solution": "#include <iostream>\n#include <fstream>\n#include <set>\n#include <map>\n#include <string>\n#include <vector>\n#include <bitset>\n#include <algorithm>\n#include <cstring>\n#include <cstdlib>\n#include <cmath>\n#include <cassert>\n#include <queue>\n\n#define mp make_pair\n#define pb push_back\n\n\ntypedef long long ll;\ntypedef long double ld;\n\nusing namespace std;\n\n#ifndef LOCAL\n#define cerr _cer\nstruct _cert\n{\n    template <typename T> _cert& operator << (T) { return *this; }\n};\n_cert _cer;\n#endif\n\ntemplate <typename T> void dprint(T begin, T end) {\n    for (auto i = begin; i != end; i++) {\n\t\tcerr << (*i) << \" \";\n    }\n    cerr << \"\\n\";\n}\n\nint n;\nll a[600];\nvector<int> vv;\n\nint main() {\n\tcin >> n;\n\tfor (int i = 0; i < n; ++i)\n\t\tcin >> a[i];\n\tsort(a, a + n);\n\tfor (int i = 1; i < 40000; ++i) {\n\t\tif (a[0] / i >= a[0] % i)\n\t\t\tvv.push_back(i);\n\t}\n\tfor (int i = 1; i < 40000; ++i) {\n\t\tll k = a[0] / i;\n\t\tif (k > 0 && (a[0] / k >= a[0] % k))\n\t\t\tvv.push_back(k);\n\t\tk -= 1;\n\t\tif (k > 0 && (a[0] / k >= a[0] % k))\n\t\t\tvv.push_back(k);\n\t}\n\tsort(vv.begin(), vv.end());\n\tvv.resize(unique(vv.begin(), vv.end()) - vv.begin());\n\trandom_shuffle(a, a + n);\n\tfor (int i = vv.size() - 1; i >= 0; --i) {\n\t\tint x = vv[i];\n\t\tint fl = 0;\n\t\tfor (int j = 0; j < n; ++j) {\n\t\t\tif (a[j] / x < a[j] % x) {\n\t\t\t\tfl = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!fl) {\n\t\t\tll ans = 0;\n\t\t\tfor (int j = 0; j < n; ++j) {\n\t\t\t\tans += a[j] / (x + 1);\n\t\t\t\tif (a[j] % (x + 1))\n\t\t\t\t\t++ans;\n\t\t\t}\n\t\t\tcout << ans << \"\\n\";\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn 0;\n}\n\n\n", "interactive": false, "noSolution": false, "noTutorial": false}