{"link": "https://codeforces.com//contest/808/problem/C", "problemId": "106399", "shortId": "808C", "contest_number": "808", "name": "C. Tea Party", "statement": "Polycarp invited all his friends to the tea party to celebrate the holiday. He has  cups, one for each of his  friends, with volumes . His teapot stores  milliliters of tea (). Polycarp wants to pour tea in cups in such a way that:  Every cup will contain tea for at least half of its volume  Every cup will contain integer number of milliliters of tea  All the tea from the teapot will be poured into cups  All friends will be . Friend with cup  won't be , if there exists such cup  that cup  contains less tea than cup  but .For each cup output how many milliliters of tea should be poured in it. If it's impossible to pour all the tea and satisfy all conditions then output .", "input": "The first line contains two integer numbers  and  (, ). The second line contains  numbers  ().", "output": "Output how many milliliters of tea every cup should contain. If there are multiple answers, print any of them. If it's impossible to pour all the tea and satisfy all conditions then output .", "tutorial": "At first, let's pour minimal amount of tea in each cup, that is . If it requires more tea than available then it's . Now let's sort cups in non-increasing order by volume and start filling up them until we run out of tea in the teapot. It's easy to see that everyone will be satisfied that way. If sequence of  is non-increasing then sequence of  is also non-increasing. So we can't make someone unsatisfied by filling the cup with maximal possible volume.And finally get the right order of cups back and print the answer.Overall complexity: .", "solution": "import java.io.*;\nimport java.util.*;\n\npublic class ER21qC {\n\n  public static void main(String[] args) {\n    InputReader in = new InputReader(System.in);\n    PrintWriter w = new PrintWriter(System.out);\n\n    int n = in.nextInt();\n    int W = in.nextInt();\n    \n    int a[] = in.nextIntArray(n);\n    \n    int b[] = new int[n];\n    for (int i = 0; i < n; i++) {\n    \tb[i] = (a[i] + 1) >> 1;\n    \tW -= b[i];\n    }\n    \n    if (W >= 0) {\n    \tfor (int i = 0; i < n && W > 0; i++) {\n    \t\tint max = -1;\n    \t\tfor (int j = 0; j < n; j++) {\n    \t\t\tif (b[j] < a[j]) {\n    \t\t\t\tif (max == -1 || a[j] >= a[max]) {\n    \t\t\t\t\tmax = j;\n    \t\t\t\t}\n    \t\t\t}\n    \t\t}\n    \t\tif (max != -1) {\n    \t\t\tint cap = a[max] - b[max];\n    \t\t\tint put = Math.min(W, cap);\n    \t\t\tW -= put;\n    \t\t\tb[max] += put;\n    \t\t}\n    \t}\n    \tif (W > 0)\n    \t\tw.println(-1);\n    \telse {\n    \t\tfor (int i = 0; i < n; i++)\n    \t\t\tw.print(b[i] + \" \");\n    \t\tw.println();\n    \t}\n    } else { \n    \tw.println(-1);\n    }\n    \n    w.close();\n  }\n\n  static class InputReader {\n\n    private final InputStream stream;\n    private final byte[] buf = new byte[8192];\n    private int curChar, snumChars;\n\n    public InputReader(InputStream st) {\n      this.stream = st;\n    }\n\n    public int read() {\n      if (snumChars == -1)\n        throw new InputMismatchException();\n      if (curChar >= snumChars) {\n        curChar = 0;\n        try {\n          snumChars = stream.read(buf);\n        } catch (IOException e) {\n          throw new InputMismatchException();\n        }\n        if (snumChars <= 0)\n          return -1;\n      }\n      return buf[curChar++];\n    }\n\n    public int nextInt() {\n      int c = read();\n      while (isSpaceChar(c)) {\n        c = read();\n      }\n      int sgn = 1;\n      if (c == '-') {\n        sgn = -1;\n        c = read();\n      }\n      int res = 0;\n      do {\n        res *= 10;\n        res += c - '0';\n        c = read();\n      } while (!isSpaceChar(c));\n      return res * sgn;\n    }\n\n    public long nextLong() {\n      int c = read();\n      while (isSpaceChar(c)) {\n        c = read();\n      }\n      int sgn = 1;\n      if (c == '-') {\n        sgn = -1;\n        c = read();\n      }\n      long res = 0;\n      do {\n        res *= 10;\n        res += c - '0';\n        c = read();\n      } while (!isSpaceChar(c));\n      return res * sgn;\n    }\n\n    public int[] nextIntArray(int n) {\n      int a[] = new int[n];\n      for (int i = 0; i < n; i++) {\n        a[i] = nextInt();\n      }\n      return a;\n    }\n\n    public String readString() {\n      int c = read();\n      while (isSpaceChar(c)) {\n        c = read();\n      }\n      StringBuilder res = new StringBuilder();\n      do {\n        res.appendCodePoint(c);\n        c = read();\n      } while (!isSpaceChar(c));\n      return res.toString();\n    }\n\n    public String nextLine() {\n      int c = read();\n      while (isSpaceChar(c))\n        c = read();\n      StringBuilder res = new StringBuilder();\n      do {\n        res.appendCodePoint(c);\n        c = read();\n      } while (!isEndOfLine(c));\n      return res.toString();\n    }\n\n    public boolean isSpaceChar(int c) {\n      return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\n    }\n\n    private boolean isEndOfLine(int c) {\n      return c == '\\n' || c == '\\r' || c == -1;\n    }\n\n  }\n\n}", "interactive": false, "noSolution": false, "noTutorial": false}