{"link": "https://codeforces.com//contest/1452/problem/E", "problemId": "802108", "shortId": "1452E", "contest_number": "1452", "name": "E. Two Editorials", "statement": "Berland regional ICPC contest has just ended. There were  participants numbered from  to , who competed on a problemset of  problems numbered from  to .Now the editorial is about to take place. There are two problem authors, each of them is going to tell the tutorial to  of the problemset. The authors choose the segment of  consecutive tasks for themselves independently of each other. The segments can coincide, intersect or not intersect at all.The -th participant is interested in listening to the tutorial of all consecutive tasks from  to . Each participant always chooses to listen to only the problem author that tells the tutorials to the maximum number of tasks he is interested in. Let this maximum number be . No participant can listen to both of the authors, even if their segments don't intersect.The authors want to choose the segments of  consecutive tasks for themselves in such a way that the sum of  over all participants is maximized.", "input": "The first line contains three integers  and  (, )\u00a0\u2014 the number of problems, the number of participants and the length of the segment of tasks each of the problem authors plans to tell the tutorial to. The -th of the next  lines contains two integers  and  ()\u00a0\u2014 the segment of tasks the -th participant is interested in listening to the tutorial to.", "output": "Print a single integer\u00a0\u2014 the maximum sum of  over all participants.", "tutorial": "Consider some participant's segment  and one of the author's segment . How does the length of intersection change when you move  from left to right? It first increases until the centers of both segments coincide (that's the easiest to notice on the segments of the same length) and then decreases. The increase is totally symmetrical to the decrease.With that idea you can conclude that the author's segment, whose center is the closest to the center of participant's segment, has the larger intersection length.Let's sort the participants' segments by their center. You can see that the first author will be optimal for the prefix of the segments and the second author\u00a0\u2014 for the remaining suffix.So you can just iterate over the length of the prefix and update the answer with all options.Overall complexity: .", "solution": "#include <bits/stdc++.h>\n\n#define forn(i, n) for (int i = 0; i < int(n); i++)\n\nusing namespace std;\n\nstruct seg{\n\tint l, r;\n};\n\nint main() {\n\tint n, m, k;\n\tcin >> n >> m >> k;\n\tvector<seg> a(m);\n\tforn(i, m){\n\t\tcin >> a[i].l >> a[i].r;\n\t\t--a[i].l;\n\t}\n\tsort(a.begin(), a.end(), [](const seg &a, const seg &b){\n\t\treturn a.l + a.r < b.l + b.r;\n\t});\n\tvector<int> su(m + 1);\n\tforn(i, n - k + 1){\n\t\tint cur = 0;\n\t\tfor (int j = m - 1; j >= 0; --j){\n\t\t\tcur += max(0, min(i + k, a[j].r) - max(i, a[j].l));\n\t\t\tsu[j] = max(su[j], cur);\n\t\t}\n\t}\n\tint ans = su[0];\n\tforn(i, n - k + 1){\n\t\tint cur = 0;\n\t\tforn(j, m){\n\t\t\tcur += max(0, min(i + k, a[j].r) - max(i, a[j].l));\n\t\t\tans = max(ans, cur + su[j + 1]);\n\t\t}\n\t}\n\tcout << ans << endl;\n\treturn 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}