{"link": "https://codeforces.com//contest/1065/problem/B", "problemId": "235279", "shortId": "1065B", "contest_number": "1065", "name": "B. Vasya and Isolated Vertices", "statement": "Vasya has got an undirected graph consisting of  vertices and  edges. This graph doesn't contain any self-loops or multiple edges. Self-loop is an edge connecting a vertex to itself. Multiple edges are a pair of edges such that they connect the same pair of vertices. Since the graph is undirected, the pair of edges  and  is considered to be multiple edges. Isolated vertex of the graph is a vertex such that there is no edge connecting this vertex to any other vertex.Vasya wants to know the minimum and maximum possible number of isolated vertices in an undirected graph consisting of  vertices and  edges. ", "input": "The only line contains two integers  and . ", "output": "In the only line print two numbers  and  \u2014 the minimum and maximum number of isolated vertices, respectively.", "tutorial": "Vasya can decrease number of isolated vertices up to  using one edge and pairing them. So minimum number of isolated vertices is .To calculate maximum number of isolated vertices let's keep number of non-isolated vertices knowing that each pair connected by edge (i.e. size of clique). Let we have size of clique  and  edges remained unassigned at current step. If  then answer is . Otherwise we need to increase clique with one vertex. Maximum number of edges we can add to connect this vertex is . So, subtract it from  and increase  by one. Repeat this step while  greater than zero. Answer is .One corner case is next: if , then answer is , not .", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n    int n;\n    long long m;\n    cin >> n >> m;\n    long long cur = 1;\n    long long rem = m;\n    while(rem > 0){\n        long long d = min(cur, rem);\n        rem -= d;\n        ++cur;\n    }\n    assert(rem == 0);\n    \n    long long res = n;\n    if(cur > 1) res = n - cur;\n    \n    cout << max(0ll, n - m * 2) << ' ' << res << endl;\n    return 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}