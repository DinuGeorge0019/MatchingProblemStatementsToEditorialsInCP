{"link": "https://codeforces.com//contest/813/problem/A", "problemId": "108588", "shortId": "813A", "contest_number": "813", "name": "A. The Contest", "statement": "Pasha is participating in a contest on one well-known website. This time he wants to win the contest and will do anything to get to the first place!This contest consists of  problems, and Pasha solves th problem in  time units (his solutions are always correct). At any moment of time he can be thinking about a solution to only one of the problems (that is, he cannot be solving two problems at the same time). The time Pasha spends to send his solutions is negligible. Unfortunately, there are too many participants, and the website is not always working. Pasha received the information that the website will be working only during  time periods, th period is represented by its starting moment  and ending moment . Of course, Pasha can send his solution only when the website is working. In other words, Pasha can send his solution at some moment  iff there exists a period  such that .Pasha wants to know his best possible result. We need to tell him the minimal moment of time by which he is able to have , if he acts optimally, or say that it's impossible no matter how Pasha solves the problems.", "input": "The first line contains one integer  \u2014 the number of problems. The second line contains  integers  \u2014 the time Pasha needs to solve th problem. The third line contains one integer  \u2014 the number of periods of time when the website is working. Next  lines represent these periods. th line contains two numbers  and  \u2014 the starting and the ending moment of th period. ", "output": "If Pasha can solve and submit all the problems before the end of the contest, print the minimal moment of time by which he can have all the solutions submitted. Otherwise print \"-1\" (without brackets).", "tutorial": "Notice that we can keep solved tasks and then submit all at once. So the solution goes down to this: you should find the first moment of time  that the site works at that moment and . Also it's convinient that the intervals are already sorted in increasing order.Let's sum up all elements of array  and write it to some variable . The answer is obtained this way: if the sum lies in the current interval then the answer is the sum. Otherwise there are two cases. If there exists some interval  that  then the answer is . In other case the answer is \"-1\".", "solution": "R=lambda:list(map(int,input().split()))\ninput()\na=sum(R())\nfor i in range(int(input())):\n  c,d=R()\n  if c<=a<=d:\n    print(a)\n    exit(0)\n  elif a<c:\n    print(c)\n    exit(0)\nprint(-1)\n", "interactive": false, "noSolution": false, "noTutorial": false}