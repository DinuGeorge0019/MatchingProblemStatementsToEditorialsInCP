{"link": "https://codeforces.com//contest/1398/problem/C", "problemId": "699503", "shortId": "1398C", "contest_number": "1398", "name": "C. Good Subarrays", "statement": "You are given an array  consisting of integers from  to . A subarray  is good if the sum of elements of this subarray is equal to the length of this subarray ().For example, if , then there are  good subarrays:  and .Calculate the number of good subarrays of the array .", "input": "The first line contains one integer  ()\u00a0\u2014 the number of test cases. The first line of each test case contains one integer  ()\u00a0\u2014 the length of the array . The second line of each test case contains a string consisting of  decimal digits, where the -th digit is equal to the value of . It is guaranteed that the sum of  over all test cases does not exceed .", "output": "For each test case print one integer \u2014 the number of good subarrays of the array .", "tutorial": "We use zero indexing in this solution. We also use half-closed interval (so subarray  is ).Let's precalculate the array , where  (so  if sum of first  elements of ).Then subarray  is good if , so .Thus, we have to group all prefix by value  for  from  to . And if the have  prefix with same value of  then we have to add  to the answer.", "solution": "for _ in range(int(input())):\n    n = int(input())\n    a = input()\n    d = {0 : 1}\n    res, s = 0, 0\n    \n    for i in range(n):\n        s += int(a[i])\n        x = s - i - 1\n        if x not in d:\n            d[x] = 0\n        d[x] += 1\n        res += d[x] - 1\n        \n    print(res)", "interactive": false, "noSolution": false, "noTutorial": false}