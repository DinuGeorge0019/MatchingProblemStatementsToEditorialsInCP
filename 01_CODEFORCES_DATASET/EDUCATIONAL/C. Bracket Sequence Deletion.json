{"link": "https://codeforces.com//contest/1657/problem/C", "problemId": "1339153", "shortId": "1657C", "contest_number": "1657", "name": "C. Bracket Sequence Deletion", "statement": "You are given a bracket sequence consisting of  characters '' and/or '. You perform several operations with it.During one operation, you choose the  prefix of this string (some amount of first characters of the string) that is  and remove it from the string.The prefix is considered  if one of the following two conditions is satisfied:  this prefix is a regular bracket sequence;  this prefix is a palindrome of length . A bracket sequence is called regular if it is possible to obtain a correct arithmetic expression by inserting characters '' and '' into this sequence. For example, sequences ,  and  are regular, while ,  and  are not.The bracket sequence is called palindrome if it reads the same back and forth. For example, the bracket sequences ,  and  are palindromes, while bracket sequences ,  and  are not palindromes.You stop performing the operations when it's not possible to find a  prefix. Your task is to find the number of operations you will perform on the given string and the number of remaining characters in the string.You have to answer  independent test cases.", "input": "The first line of the input contains one integer  () \u2014 the number of test cases. The next  lines describe test cases. The first line of the test case contains one integer  () \u2014 the length of the bracket sequence. The second line of the test case contains  characters '' and/or '' \u2014 the bracket sequence itself. It is guaranteed that the sum of  over all test cases do not exceed  ().", "output": "For each test case, print two integers  and  \u2014 the number of operations you will perform on the given bracket sequence and the number of characters that remain in the string after performing all operations.", "tutorial": "Consider the first character of the string. If it is '', then we can remove the first two characters of the string and continue (because the prefix of length  will be either a palindrome or a regular bracket sequence). If the first character of the string is '' then this is a bad case. Of course, the regular bracket sequence can't start with '', so this prefix should be a palindrome. And what is the shortest palindrome we can get with the first character ''? It is the closing bracket '', then some (possibly, zero) amount of opening brackets '', and another one closing bracket. We can see that we can't find a palindrome shorter than this one because we have to find a pair for the first character. So, if the first character of the string is '', then we just remove anything until the next character '' inclusive. To not remove any characters explicitly, we can just use pointers instead. And the last thing is to carefully handle cases when we can't do any operations.", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n#ifdef _DEBUG\n    freopen(\"input.txt\", \"r\", stdin);\n//  freopen(\"output.txt\", \"w\", stdout);\n#endif\n    \n    int t;\n    cin >> t;\n    while (t--) {\n        int n;\n        string s;\n        cin >> n >> s;\n        int l = 0;\n        int cnt = 0;\n        while (l + 1 < n) {\n            if (s[l] == '(' || (s[l] == ')' && s[l + 1] == ')')) {\n                l += 2;\n            } else {\n                int r = l + 1;\n                while (r < n && s[r] != ')') {\n                    ++r;\n                }\n                if (r == n) {\n                    break;\n                }\n                l = r + 1;\n            }\n            ++cnt;\n        }\n        cout << cnt << ' ' << n - l << '\\n';\n    }\n    \n    return 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}