{"link": "https://codeforces.com//contest/1680/problem/B", "problemId": "1398256", "shortId": "1680B", "contest_number": "1680", "name": "B. Robots", "statement": "There is a field divided into  rows and  columns. Some cells are empty (denoted as ), other cells contain robots (denoted as ).You can send a command to  at the same time. The command can be of one of the four types:  move up;  move right;  move down;  move left. When you send a command,  attempt to take one step in the direction you picked. If a robot tries to move outside the field, it explodes; otherwise,  moves to an adjacent cell in the chosen direction.You can send as many commands as you want (possibly, zero), in any order. Your goal is to make at least one robot reach the upper left corner of the field. Can you do this without forcing any of the robots to explode?", "input": "The first line contains one integer  ()\u00a0\u2014 the number of test cases. Each test case starts with a line containing two integers  and  ()\u00a0\u2014 the number of rows and the number of columns, respectively. Then  lines follow; each of them contains a string of  characters. Each character is either  (empty cell} or  (robot). Additional constraint on the input: in each test case, there is at least one robot on the field.", "output": "If it is possible to make at least one robot reach the upper left corner of the field so that no robot explodes, print . Otherwise, print .", "tutorial": "Let's assume that the rows are numbered from  to  from top to bottom, and columns are numbered from  to  from left to right. If there is no robot in the cell  initially, we have to perform several moves up and/or left. If the first row with at least one robot is the -th row, then we can make at most  steps up (and we should do at least  steps up, since otherwise there will me no robot in the upper row). Similarly, if the first column with at least one robot is the -th column, then we can make at most  steps to the left (and we should do at least  steps to the left, since otherwise there will me no robot in the leftmost column).Now there are two possible solutions, both starting with finding  and : we afterwards either simulate  moves up and  moves to the left and check that everything is fine, or just check that there is a robot in the cell  (since only this robot can end up in ).", "solution": "t = int(input())\nfor i in range(t):\n    n, m = map(int, input().split())\n    s = []\n    for j in range(n):\n        s.append(input())\n    minx = 10 ** 9\n    miny = 10 ** 9\n    for x in range(n):\n        for y in range(m):\n            if s[x][y] == 'R':\n                minx = min(minx, x)\n                miny = min(miny, y)\n    print('YES' if s[minx][miny] == 'R' else 'NO')", "interactive": false, "noSolution": false, "noTutorial": false}