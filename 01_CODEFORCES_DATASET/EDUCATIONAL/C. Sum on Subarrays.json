{"link": "https://codeforces.com//contest/1809/problem/C", "problemId": "1839363", "shortId": "1809C", "contest_number": "1809", "name": "C. Sum on Subarrays", "statement": "For an array , let's denote its   as the array .For example, the array  has  non-empty subarrays:  ;  ;  ;  ;  ;  . You are given two integers  and . Construct an array  consisting of  integers such that:  all elements of  are from  to ;   has exactly  subarrays with positive sums;  the rest  subarrays of  have negative sums. ", "input": "The first line contains one integer  () \u2014 the number of test cases. Each test case consists of one line containing two integers  and  (; ).", "output": "For each test case, print  integers \u2014 the elements of the array meeting the constraints. It can be shown that the answer always exists. If there are multiple answers, print any of them.", "tutorial": "There are many ways to solve this problem. I will describe the following recursive solution:  if , let's compose an array where every segment ending with the -th element is positive, and every other segment is negative. This array can be , where  is the -th element of the array (note that when ,  doesn't belong to the array, so it consists of only negative numbers).  but if , solve the same problem with  and  recursively, get an array of length  with  positive subarrays, and append  to it to make all  segments ending with the last element positive. ", "solution": "def solve(n, k):\n    if n == 0:\n        return []\n    if k < n:\n        a = [-1 for i in range(n)]\n        if k > 0:\n            a[k - 1] = 200\n        a[k] = -400\n    else:\n        a = solve(n - 1, k - n)\n        a.append(1000)\n    return a\n\nt = int(input())\nfor i in range(t):\n    n, k = map(int, input().split())\n    b = solve(n, k)\n    print(*b)", "interactive": false, "noSolution": false, "noTutorial": false}