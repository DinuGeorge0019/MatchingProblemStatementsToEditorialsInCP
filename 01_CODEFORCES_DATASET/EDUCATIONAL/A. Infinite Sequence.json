{"link": "https://codeforces.com//contest/622/problem/A", "problemId": "47915", "shortId": "622A", "contest_number": "622", "name": "A. Infinite Sequence", "statement": "Consider the infinite sequence of integers: . The sequence is built in the following way: at first the number  is written out, then the numbers from  to , then the numbers from  to , then the numbers from  to  and so on. Note that the sequence contains numbers, not digits. For example number  first appears in the sequence in position  (the elements are numerated from one).Find the number on the -th position of the sequence.", "input": "The only line contains integer  () \u2014 the position of the number to find. Note that the given number is too large, so you should use -bit integer type to store it. In  you can use the  integer type and in  you can use  integer type.", "output": "Print the element in the -th position of the sequence (the elements are numerated from one).", "tutorial": "Let's decrease  by one. Now let's determine the block with the -th number. To do that let's at first subtract  from , then subtract , then subtract  and so on until we got negative . The number of subtractions will be the number of the block and the position in the block will be the last nonnegative number we will get.\n", "solution": "\n            #include <bits/stdc++.h>\n\u00a0\n#define forn(i, n) for (int i = 0; i < int(n); i++)\n#define ford(i, n) for (int i = int(n) - 1; i >= 0; i--)\n#define fore(i, l, r) for (int i = int(l); i < int(r); i++)\n#define correct(x, y, n, m) (0 <= (x) && (x) < (n) && 0 <= (y) && (y) < (m))\n#define all(a) (a).begin(), (a).end()\n#define sz(a) int((a).size())\n#define pb(a) push_back(a)\n#define mp(x, y) make_pair((x), (y))\n#define x first\n#define y second\n\u00a0\nusing namespace std;\n\u00a0\ntypedef long long li;\ntypedef long double ld;\ntypedef pair<int, int> pt;\n\u00a0\ntemplate<typename X> inline X abs(const X& a) { return a < 0? -a: a; }\ntemplate<typename X> inline X sqr(const X& a) { return a * a; }\n\u00a0\nconst int INF = int(1e9);\nconst li INF64 = li(1e18);\nconst ld EPS = 1e-9, PI = 3.1415926535897932384626433832795;\n\u00a0\nli n;\n\u00a0\ninline bool read() {\n\u00a0 \u00a0 return !!(cin >> n);\n}\n\u00a0\ninline void solve() {\n\u00a0 \u00a0 n--;\n\u00a0 \u00a0 for (li i = 1; i <= n; i++) {\n\u00a0 \u00a0 \u00a0 \u00a0 n -= i;\n\u00a0 \u00a0 }\n\u00a0 \u00a0 cout << n + 1 << endl;\n}\n\u00a0\nint main() {\n#ifdef SU1\n\u00a0 \u00a0 assert(freopen(\"input.txt\", \"rt\", stdin));\n\u00a0 \u00a0 //assert(freopen(\"output.txt\", \"wt\", stdout));\n#endif\n\u00a0 \u00a0 \n\u00a0 \u00a0 cout << setprecision(10) << fixed;\n\u00a0 \u00a0 cerr << setprecision(5) << fixed;\n\u00a0\n\u00a0 \u00a0 while (read()) {\n\u00a0 \u00a0 \u00a0 \u00a0 solve();\n\u00a0 \u00a0 \u00a0 \u00a0 //break;\n\u00a0 \u00a0 }\n\u00a0 \u00a0 \n\u00a0 \u00a0 return 0;\n}\n        ", "interactive": false, "noSolution": false, "noTutorial": false}