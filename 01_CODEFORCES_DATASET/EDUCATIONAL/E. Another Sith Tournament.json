{"link": "https://codeforces.com//contest/678/problem/E", "problemId": "62343", "shortId": "678E", "contest_number": "678", "name": "E. Another Sith Tournament", "statement": "The rules of Sith Tournament are well known to everyone.  Sith take part in the Tournament. The Tournament starts with the random choice of two Sith who will fight in the first battle. As one of them loses, his place is taken by the next randomly chosen Sith who didn't fight before. Does it need to be said that each battle in the Sith Tournament ends with a death of one of opponents? The Tournament ends when the only Sith remains alive.Jedi Ivan accidentally appeared in the list of the participants in the Sith Tournament. However, his skills in the Light Side of the Force are so strong so he can influence the choice of participants either who start the Tournament or who take the loser's place after each battle. Of course, he won't miss his chance to take advantage of it. Help him to calculate the probability of his victory.", "input": "The first line contains a single integer  ()\u00a0\u2014 the number of participants of the Sith Tournament. Each of the next  lines contains  real numbers, which form a matrix  (). Each its element  is the probability that the -th participant defeats the -th in a duel. The elements on the main diagonal  are equal to zero. For all different ,  the equality  holds. All probabilities are given with no more than six decimal places. Jedi Ivan is the number  in the list of the participants.", "output": "Output a real number\u00a0\u2014 the probability that Jedi Ivan will stay alive after the Tournament. Absolute or relative error of the answer must not exceed .", "tutorial": "Let's solve the problem using dynamic programming.  \u2014 the maximal probability of Ivans victory if the siths from the  already fought and the -th sith left alive. To calculate that DP we should iterate over the next sith (he will fight against the -th sith): .\n", "solution": "const int N = 20, EXPN = (1 << 18) + 3;\n\nint n;\nld p[N][N];\n\nbool read() {\n\tif (!(cin >> n)) return false;\n\tforn(i, n) forn(j, n) assert(cin >> p[i][j]);\n\treturn true;\n}\n\nld z[EXPN][N];\n\nld solve(int mask, int i) {\n\tld& ans = z[mask][i];\n\tif (ans > -0.5) return ans;\n\tif (mask == (1 << n) - 1) return ans = !i;\n\tans = 0;\n\tforn(j, n)\n\t\tif (!(mask & (1 << j))) {\n\t\t\tld cur = 0;\n\t\t\tcur += solve(mask | (1 << j), i) * p[i][j];\n\t\t\tcur += solve(mask | (1 << j), j) * p[j][i];\n\t\t\tans = max(ans, cur);\n\t\t}\n\treturn ans;\n}\n\nvoid solve() {\n\tif (n == 1) {\n\t\tputs(\"1\");\n\t\treturn;\n\t}\n\n\tforn(i, 1 << n) forn(j, n) z[i][j] = -1;\n\n\tld ans = 0;\n\tforn(i, n)\n\t\tforn(j, i) {\n\t\t\tint mask = (1 << i) | (1 << j);\n\t\t\tld cur = 0;\n\t\t\tcur += solve(mask, i) * p[i][j];\n\t\t\tcur += solve(mask, j) * p[j][i];\n\t\t\tans = max(ans, cur);\n\t\t}\n\tcout << ans << endl;\n}", "interactive": false, "noSolution": false, "noTutorial": false}