{"link": "https://codeforces.com//contest/1295/problem/B", "problemId": "526701", "shortId": "1295B", "contest_number": "1295", "name": "B. Infinite Prefixes", "statement": "You are given string  of length  consisting of -s and -s. You build an infinite string  as a concatenation of an infinite number of strings , or  For example, if  , then  ...Calculate the number of prefixes of  with  equal to . The balance of some string  is equal to , where  is the number of occurrences of  in , and  is the number of occurrences of  in . The number of such prefixes can be infinite; if it is so, you must say that.A prefix is a string consisting of several first letters of a given string, without any reorders. An empty prefix is also a valid prefix. For example, the string \"abcd\" has 5 prefixes: empty string, \"a\", \"ab\", \"abc\" and \"abcd\".", "input": "The first line contains the single integer  () \u2014 the number of test cases. Next  lines contain descriptions of test cases \u2014 two lines per test case. The first line contains two integers  and  (, ) \u2014 the length of string  and the desired balance, respectively. The second line contains the binary string  (, ). It's guaranteed that the total sum of  doesn't exceed .", "output": "Print  integers \u2014 one per test case. For each test case print the number of prefixes or  if there is an infinite number of such prefixes.", "tutorial": "Let's denote a prefix of length  as . We can note that each  where  and  is a concatenation. Then balance  of prefix of length  is equal to .Now there two cases:  is equal to  or not. If  then if exist such  () that  then for each   and answer is .Otherwise, for each such  there will no more than one possible : since there are zero or one solution to the equation . The solution exists if and only if  and . So, just precalc  and for each  check the equation.", "solution": "#include<bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long li;\n\nint n, x;\nstring s;\n\ninline bool read() {\n\tif(!(cin >> n >> x >> s))\n\t\treturn false;\n\treturn true;\n}\n\ninline void solve() {\n\tint ans = 0;\n\tbool infAns = false;\n\t\n\tint cntZeros = (int)count(s.begin(), s.end(), '0');\n\tint total = cntZeros - (n - cntZeros);\n\t\n\tint bal = 0;\n\tfor(int i = 0; i < n; i++) {\n\t\tif(total == 0) {\n\t\t\tif(bal == x)\n\t\t\t\tinfAns = true;\n\t\t}\n\t\telse if(abs(x - bal) % abs(total) == 0) {\n\t\t\tif((x - bal) / total >= 0)\n\t\t\t\tans++;\n\t\t}\n\t\t\n\t\tif(s[i] == '0')\n\t\t\tbal++;\n\t\telse\n\t\t\tbal--;\n\t}\n\t\n\tif(infAns) ans = -1;\n\tcout << ans << endl;\n}\n\nint main() {\n#ifdef _DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin);\n#endif\n\tios_base::sync_with_stdio(false);\n\tcin.tie(0), cout.tie(0);\n\tcout << fixed << setprecision(15);\n\t\n\tint tc; cin >> tc;\n\twhile(tc--) {\n\t\tread();\n\t\tsolve();\n\t}\n\t\n\treturn 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}