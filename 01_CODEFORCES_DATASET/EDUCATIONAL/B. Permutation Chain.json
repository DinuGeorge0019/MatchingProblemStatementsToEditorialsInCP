{"link": "https://codeforces.com//contest/1716/problem/B", "problemId": "1494201", "shortId": "1716B", "contest_number": "1716", "name": "B. Permutation Chain", "statement": "A permutation of length  is a sequence of integers from  to  such that each integer appears in it exactly once.Let the fixedness of a permutation  be the number of fixed points in it\u00a0\u2014 the number of positions  such that , where  is the -th element of the permutation .You are asked to build a sequence of permutations , starting from the identity permutation (permutation ). Let's call it a permutation chain. Thus,  is the -th permutation of length .For every  from  onwards, the permutation  should be obtained from the permutation  by swapping any two elements in it (not necessarily neighboring). The fixedness of the permutation  should be strictly lower than the fixedness of the permutation .Consider some chains for :  , \u00a0\u2014 that is a valid chain of length . From  to , the elements on positions  and  get swapped, the fixedness decrease from  to .  , \u00a0\u2014 that is not a valid chain. The first permutation should always be  for .  , , \u00a0\u2014 that is not a valid chain. From  to , the elements on positions  and  get swapped but the fixedness increase from  to .  , , \u00a0\u2014 that is a valid chain of length . From  to , the elements on positions  and  get swapped, the fixedness decrease from  to . From  to , the elements on positions  and  get swapped, the fixedness decrease from  to . Find the longest permutation chain. If there are multiple longest answers, print any of them.", "input": "The first line contains a single integer  ()\u00a0\u2014 the number of testcases. The only line of each testcase contains a single integer  ()\u00a0\u2014 the required length of permutations in the chain.", "output": "For each testcase, first, print the length of a permutation chain . Then print  permutations .  should be an identity permutation of length  (). For each  from  to ,  should be obtained by swapping two elements in . It should also have a strictly lower fixedness than .", "tutorial": "Ideally, we would want the fixedness values to be . That would make a chain of length .However, it's impossible to have fixedness of  after one swap. The first swap always makes a permutation with fixedness .Okay, how about  then? That turns out to always be achievable.For example, swap elements  and , then elements  and , then  and  and so on.Overall complexity:  per testcase.", "solution": "for _ in range(int(input())):\n\tn = int(input())\n\tp = [i + 1 for i in range(n)]\n\tprint(n)\n\tfor i in range(n):\n\t\tprint(*p)\n\t\tif i < n - 1:\n\t\t\tp[i], p[i + 1] = p[i + 1], p[i]", "interactive": false, "noSolution": false, "noTutorial": false}