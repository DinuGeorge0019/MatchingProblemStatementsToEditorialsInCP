{"link": "https://codeforces.com//contest/1257/problem/D", "problemId": "470639", "shortId": "1257D", "contest_number": "1257", "name": "D. Yet Another Monster Killing Problem", "statement": "You play a computer game. In this game, you lead a party of  heroes, and you have to clear a dungeon with  monsters. Each monster is characterized by its power . Each hero is characterized by his power  and endurance .The heroes clear the dungeon day by day. In the beginning of each day, you choose a hero (exactly one) who is going to enter the dungeon this day.When the hero enters the dungeon, he is challenged by the first monster which was not defeated during the previous days (so, if the heroes have already defeated  monsters, the hero fights with the monster ). When the hero fights the monster, there are two possible outcomes:  if the monster's power is strictly greater than the hero's power, the hero retreats from the dungeon. The current day ends;  otherwise, the monster is defeated. After defeating a monster, the hero either continues fighting with the next monster or leaves the dungeon. He leaves the dungeon either if he has already defeated the number of monsters equal to his endurance during this day (so, the -th hero cannot defeat more than  monsters during each day), or if all monsters are defeated \u2014 otherwise, he fights with the next monster. When the hero leaves the dungeon, the current day ends.Your goal is to defeat the last monster. What is the minimum number of days that you need to achieve your goal? Each day you have to use exactly one hero; it is possible that some heroes don't fight the monsters at all. Each hero can be used arbitrary number of times.", "input": "The first line contains one integer  () \u2014 the number of test cases. Then the test cases follow. The first line of each test case contains one integer  () \u2014 the number of monsters in the dungeon. The second line contains  integers , , ...,  (), where  is the power of the -th monster. The third line contains one integer  () \u2014 the number of heroes in your party. Then  lines follow, each describing a hero. Each line contains two integers  and  (, ) \u2014 the power and the endurance of the -th hero. It is guaranteed that the sum of  over all test cases does not exceed .", "output": "For each test case print one integer \u2014 the minimum number of days you have to spend to defeat all of the monsters (or  if it is impossible).", "tutorial": "At first, lets precalc array ;  is equal to maximum hero power whose endurance is greater than or equal to . Now let's notice that every day it's profitable for as to kill as many monster as possible. Remains to understand how to calculate it.Suppose that we already killed  monsters. If  then answer is , because we can't kill the -th monster. Otherwise we can kill at least  monsters. All we have to do it increase the value  until conditions  holds. After calculating the value  we just move to the next day with  killed monsters.", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int N = int(2e5) + 99;\n\nint t;\nint n;\nint a[N];\nint m;\nint p[N], s[N];\nint bst[N];\n\nint main() {\t\n\tscanf(\"%d\", &t);\n\tfor(int tc = 0; tc < t; ++tc){\n\t\tscanf(\"%d\", &n);\n\t\tfor(int i = 0; i <= n; ++i) bst[i] = 0;\n\t\tfor(int i = 0; i < n; ++i)\n\t\t\tscanf(\"%d\", a + i);\n\t\tscanf(\"%d\", &m);\n\t\tfor(int i = 0; i < m; ++i){\n\t\t\tscanf(\"%d %d\", p + i, s + i);\n\t\t\tbst[s[i]] = max(bst[s[i]], p[i]);\n\t\t}\n\t\tfor(int i = n - 1; i >= 0; --i)\n\t\t\tbst[i] = max(bst[i], bst[i + 1]);\t\n\t\t\n\n\t\tint pos = 0;\n\t\tint res = 0;\n\t\tbool ok = true;\n\t\twhile(pos < n){\n\t\t\t++res;\n\t\t\tint npos = pos;\n\t\t\tint mx = 0;\n\t\t\twhile(true){\n\t\t\t\tmx = max(mx, a[npos]);\n\t\t\t\tif(mx > bst[npos - pos + 1]) break;\n\t\t\t\t++npos;\n\t\t\t}\n\t\n\t\t\tif(pos == npos){\n\t\t\t\tok = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tpos = npos;\n\t\t}\n\n\t\tif(!ok) res = -1;\n\t\tprintf(\"%d\\n\", res);\n\t}\n\n\treturn 0;\n}                             \t            \t", "interactive": false, "noSolution": false, "noTutorial": false}