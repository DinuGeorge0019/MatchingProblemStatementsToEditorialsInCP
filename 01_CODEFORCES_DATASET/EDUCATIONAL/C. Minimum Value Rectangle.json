{"link": "https://codeforces.com//contest/1027/problem/C", "problemId": "209490", "shortId": "1027C", "contest_number": "1027", "name": "C. Minimum Value Rectangle", "statement": "You have  sticks of the given lengths.Your task is to choose exactly four of them in such a way that they can form a rectangle. No sticks can be cut to pieces, each side of the rectangle must be formed by a single stick. No stick can be chosen multiple times. It is guaranteed that it is always possible to choose such sticks.Let  be the area of the rectangle and  be the perimeter of the rectangle. The chosen rectangle should have the value  minimal possible. The value is taken without any rounding.If there are multiple answers, print any of them.Each testcase contains several lists of sticks, for each of them you are required to solve the problem separately.", "input": "The first line contains a single integer  () \u2014 the number of lists of sticks in the testcase. Then  lines follow \u2014 lines  and  of them describe the -th list. The first line of the pair contains a single integer  () \u2014 the number of sticks in the -th list. The second line of the pair contains  integers  () \u2014 lengths of the sticks in the -th list. It is guaranteed that for each list there exists a way to choose four sticks so that they form a rectangle. The total number of sticks in all  lists doesn't exceed  in each testcase.", "output": "Print  lines. The -th line should contain the answer to the -th list of the input. That is the lengths of the four sticks you choose from the -th list, so that they form a rectangle and the value  of this rectangle is minimal possible. You can print these four lengths in arbitrary order. If there are multiple answers, print any of them.", "tutorial": "Let's work with the formula a bit:      Let , then the formula becomes . Considering , , thus  is strictly increasing and has its minimum at .So the solution will be to sort the list, extract the pairs of sticks of equal length and check only neighbouring pairs in sorted order for the answer.Overall complexity: .", "solution": "#include <bits/stdc++.h>\n\n#define forn(i, n) for (int i = 0; i < int(n); i++)\n\ntypedef long long li;\n\nusing namespace std;\n\nconst int N = 1000 * 1000 + 13;\n\nint n, m;\nint a[N];\nint b[N];\n\nint main() {\n    int T;\n    scanf(\"%d\", &T);\n    forn(_, T){\n        scanf(\"%d\", &n);\n        forn(i, n)\n            scanf(\"%d\", &a[i]);\n        sort(a, a + n);\n    \n        m = 0;\n        forn(i, n - 1){\n            if (a[i] == a[i + 1]){\n                b[m++] = a[i];\n                ++i;\n            }\n        }\n    \n        int A = b[0], B = b[1];\n        li P2 = (A + B) * li(A + B);\n        li S = A * li(B);\n    \n        forn(i, m - 1){\n            li p2 = (b[i] + b[i + 1]) * li(b[i] + b[i + 1]);\n            li s = b[i] * li(b[i + 1]);\n            if (s * P2 > S * p2){\n                A = b[i];\n                B = b[i + 1];\n                S = s;\n                P2 = p2;\n            }\n        }\n    \n        printf(\"%d %d %d %d\\n\", A, A, B, B);\n    }\n}", "interactive": false, "noSolution": false, "noTutorial": false}