{"link": "https://codeforces.com//contest/903/problem/F", "problemId": "138455", "shortId": "903F", "contest_number": "903", "name": "F. Clear The Matrix", "statement": "You are given a matrix  with  rows and  columns. Each element of the matrix is either an asterisk () or a dot ().You may perform the following operation arbitrary number of times: choose a square submatrix of  with size  (where ) and replace each element of the chosen submatrix with a dot. Choosing a submatrix of size  costs  coins.What is the minimum number of coins you have to pay to replace all asterisks with dots?", "input": "The first line contains one integer  () \u2014 the number of columns in . The second line contains  integers , , ,  () \u2014 the cost to replace the square submatrix of size , ,  or , respectively. Then four lines follow, each containing  characters and denoting a row of matrix . Each character is either a dot or an asterisk.", "output": "Print one integer \u2014 the minimum number of coins to replace all asterisks with dots.", "tutorial": "Constraints lead us to some kind of dp solution (is it usually called dp on broken profile?). Let  will be the minimum price to get to -th column and -th row with  selected.  is the previous  cells inclusive from  (if  then its exactly current column and two previous ones). Transitions for submatrices ,  and  are straighforward, just update mask with new ones and add  to current value.If the first cell of these  is empty or  is set in this position, then you can go to  (or  and  if ) for free.Finally you can go to  with the price of .Initial value can be  in  (the first  cells of the matrix).The answer will be stored in some valid  of . However, you can add  extra empty columns and take the answer right from , it will be of the same price.Overall complexity: .", "solution": "#include <stdio.h>\n#include <algorithm>\n#include <assert.h>\n#include <bitset>\n#include <cmath>\n#include <complex>\n#include <deque>\n#include <functional>\n#include <iostream>\n#include <limits.h>\n#include <map>\n#include <math.h>\n#include <queue>\n#include <set>\n#include <stdlib.h>\n#include <string.h>\n#include <string>\n#include <time.h>\n#include <unordered_map>\n#include <unordered_set>\n#include <vector>\n\n#pragma warning(disable:4996)\n#pragma comment(linker, \"/STACK:336777216\")\nusing namespace std;\n\n#define mp make_pair\n#define all(x) (x).begin(), (x).end()\n#define ldb ldouble\n\ntypedef tuple<int, int, int> t3;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double db;\ntypedef long double ldb;\ntypedef pair <int, int> pii;\ntypedef pair <ll, ll> pll;\ntypedef pair <ll, int> pli;\ntypedef pair <db, db> pdd;\n\nint IT_MAX = 1 << 20;\nconst ll MOD = 1000000007;\nconst int INF = 0x3f3f3f3f;\nconst ll LL_INF = 0x3f3f3f3f3f3f3f3f;\nconst db PI = acos(-1);\nconst db ERR = 1e-9;\n#define szz(x) (int)(x).size()\n#define rep(i, n) for(int i=0;i<n;i++)\n#define Se second\n#define Fi first\n\nint A[5];\nint val[5];\nchar in[4][1050];\n\nint nxt[65536][120];\nint cost[120];\n\nint dp[1050][4096];\nint main() {\n\tint N, i, j, k, l, m;\n\tscanf(\"%d\", &N);\n\tfor (i = 1; i <= 4; i++) scanf(\"%d\", &A[i]);\n\tfor (i = 0; i < 4; i++) scanf(\"%s\", in[i]);\n\tfor (i = 1; i <= 4; i++) {\n\t\tfor (j = 0; j < i; j++) for (k = 0; k < i; k++) val[i] |= 1 << (4 * j + k);\n\t}\n\n\tint p = 0;\n\tfor (i = 0; i <= 1; i++) {\n\t\tfor (j = 0; j <= 2; j++) {\n\t\t\tfor (k = 0; k <= 3; k++) {\n\t\t\t\tfor (l = 0; l <= 4; l++) {\n\t\t\t\t\tint totc = A[i] + A[j] + A[k] + A[l];\n\t\t\t\t\tcost[p] = totc;\n\t\t\t\t\tint v = (val[i] << 3) | (val[j] << 2) | (val[k] << 1) | val[l];\n\t\t\t\t\tfor (m = 0; m < 65536; m++) nxt[m][p] = m & ~v;\n\t\t\t\t\tp++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tmemset(dp, 0x3f, sizeof(dp));\n\tint st = 0;\n\tfor (i = 0; i < 1; i++) {\n\t\tfor (j = 0; j < 4; j++) {\n\t\t\tst = st * 2;\n\t\t\tif (in[j][i] == '*') st++;\n\t\t}\n\t}\n\tfor (i = 0; i < 120; i++) dp[0][nxt[st][i]] = min(dp[0][nxt[st][i]], cost[i]);\n\tfor (i = 1; i < N; i++) {\n\t\tint v = 0;\n\t\tfor (j = 0; j < 4; j++) v = v * 2 + (int)(in[j][i] == '*');\n\t\tfor (j = 0; j < 4096; j++) {\n\t\t\tif (dp[i-1][j] > 1000000) continue;\n\n\t\t\tl = j * 16 + v;\n\t\t\tfor (k = 0; k < 120; k++) {\n\t\t\t\tint x = nxt[l][k];\n\t\t\t\tif (x < 4096) dp[i][x] = min(dp[i][x], dp[i - 1][j] + cost[k]);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn !printf(\"%d\\n\", dp[N - 1][0]);\n}", "interactive": false, "noSolution": false, "noTutorial": false}