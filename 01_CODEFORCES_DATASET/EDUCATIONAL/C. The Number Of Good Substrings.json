{"link": "https://codeforces.com//contest/1217/problem/C", "problemId": "404645", "shortId": "1217C", "contest_number": "1217", "name": "C. The Number Of Good Substrings", "statement": "You are given a binary string  (recall that a string is binary if each character is either  or ).Let  be the decimal representation of integer  written in binary form (possibly with leading zeroes). For example  and .The substring  is good if .For example string  has  good substrings: , , ,  and . Your task is to calculate the number of good substrings of string .You have to answer  independent queries.", "input": "The first line contains one integer  () \u2014 the number of queries. The only line of each query contains string  (), consisting of only digits  and . It is guaranteed that .", "output": "For each query print one integer \u2014 the number of good substrings of string .", "tutorial": "At first, lets precalc the array . The value of  if equal the maximum position  in range  such that . After that lets iterate over the right boundary of substring and high -bit position (denote it as  and  respectively).Note that if  then .So we iterate over such pair  that  and .Lets look at value . If , then we have to increase the length of substring without increasing the value of . So we need to check if there exists a position  such that  and . This position exists if the condition  is met ( is equal to -1). ", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int N = int(3e5) + 99;\n\nint t;\nstring s;\nint nxt[N];\n\nint main() {\n\tcin >> t;\n\tfor(int tc = 0; tc < t; ++tc){\n\t\tcin >> s;\n\t\tfor(int i = 0; i < s.size(); ++i)\n\t\t\tif(s[i] == '1') nxt[i] = i;\n\t\t\telse nxt[i] = (i == 0? -1 : nxt[i - 1]);\t\t\n\t\tint res = 0;\n\t\tfor(int r = 0; r < s.size(); ++r){\n\t\t\tint sum = 0;\n\t\t\tfor(int l = r; l >= 0 && r - l < 20; --l){\n\t\t\t\tif(s[l] == '0') continue;\n\t\t\t\tsum += 1 << (r - l);\n\t\t\t\tif(sum <= r - (l == 0? -1 : nxt[l - 1]))\n\t\t\t\t\t++res;\n\t\t\t}\n\t\t}\n\t\tcout << res << endl;\n\t}\t\n\n\treturn 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}