{"link": "https://codeforces.com//contest/873/problem/B", "problemId": "127820", "shortId": "873B", "contest_number": "873", "name": "B. Balanced Substring", "statement": "You are given a string  consisting only of characters  and . A substring  of  is a string , and its length equals to . A substring is called  if the number of zeroes () equals to the number of ones in this substring.You have to determine the length of the longest  substring of .", "input": "The first line contains  () \u2014 the number of characters in . The second line contains a string  consisting of exactly  characters. Only characters  and  can appear in .", "output": "If there is no non-empty  substring in , print . Otherwise, print the length of the longest  substring.", "tutorial": "Let  be the number of zeroes and  \u2014 the number of ones on prefix of length ; also let  (). The interesting property of  is that the substring  is balanced iff . That leads to a solution: for each value of  maintain the minimum  where this  is obtained (let it be called ), and for each index  in the string update answer with .", "solution": "#include <bits/stdc++.h>\n\n#define all(a) (a).begin(), (a).end()\n#define sz(a) (int)(a).size()\n#define pb push_back\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef double ld;\ntypedef pair<ll, ll> pll;\n\nint main() {\n\n\tios_base::sync_with_stdio(false);\n\tcin.tie(0);\n\tcout.tie(0);\n\n\t//ifstream cin(\"input.txt\");\n\t//ofstream cout(\"output.txt\");\n\n\tint n;\n\tcin >> n;\n\n\tmap<int, int> mapa;\n\tstring s;\n\tcin >> s;\n\n\tint x = 0, y = 0;\n\tmapa[0] = -1;\n\tint ans = 0;\n\n\tfor (int i = 0; i < n; ++i) {\n\t\tif (s[i] == '0') {\n\t\t\t++x;\n\t\t} else {\n\t\t\t++y;\n\t\t}\n\t\tif (mapa.count(y - x)) {\n\t\t\tans = max(ans, i - mapa[y - x]);\n\t\t} else {\n\t\t\tmapa[y - x] = i;\n\t\t}\t\t\n\t}\n\n\tcout << ans << \"\\n\";\n\n}", "interactive": false, "noSolution": false, "noTutorial": false}