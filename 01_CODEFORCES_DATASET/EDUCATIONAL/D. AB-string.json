{"link": "https://codeforces.com//contest/1238/problem/D", "problemId": "434108", "shortId": "1238D", "contest_number": "1238", "name": "D. AB-string", "statement": "The string  is good if each letter of this string belongs to at least one palindrome of length  than .A palindrome is a string that reads the same backward as forward. For example, the strings , , ,  are palindromes, but the strings , ,  are not.Here are some examples of good strings:    =  (letters ,  belong to palindrome  and letters , ,  belong to palindrome );   =  (letters , ,  belong to palindrome  and letter  belongs to palindrome );   =  (all letters belong to palindrome ); You are given a string  of length , consisting of  letters  and .You have to calculate the number of good substrings of string .", "input": "The first line contains one integer  () \u2014 the length of the string . The second line contains the string , consisting of letters  and .", "output": "Print one integer \u2014 the number of good substrings of string .", "tutorial": "Instead of counting the number of good substrings, let's count the number of bad substrings , then number of good substrings is equal to .Let's call a character  in string  is bad if there is no such palindrome  that . Any character in substring  is good. It can be proven as follows. If  or  then  belong to a palindrome of length . If  and  then  belong to a palindrome .So only characters  and  can be bad. But at the same time character  is bad if there is no character  such that  and . It is true because substring  is palindrome (index  is minimum index such that ).So, there are only  patterns of bad strings:   ;  ;  ;  ; All that remains is to count the number of substrings of this kind.", "solution": "n = int(input())\ns = input()\nres = n * (n - 1) // 2\n\nfor x in range(2):\n\tcur = 1\n\tfor i in range(1, n):\n\t\tif s[i] == s[i - 1]:\n\t\t\tcur += 1\n\t\telse:\n\t\t\tres -= cur - x\n\t\t\tcur = 1\n\ts = s[::-1]\n\nprint(res) ", "interactive": false, "noSolution": false, "noTutorial": false}