{"link": "https://codeforces.com//contest/1251/problem/A", "problemId": "449544", "shortId": "1251A", "contest_number": "1251", "name": "A. Broken Keyboard", "statement": "Recently Polycarp noticed that some of the buttons of his keyboard are malfunctioning. For simplicity, we assume that Polycarp's keyboard contains  buttons (one for each letter of the Latin alphabet). Each button is either working fine or malfunctioning. To check which buttons need replacement, Polycarp pressed some buttons in sequence, and a string  appeared on the screen. When Polycarp presses a button with character , one of the following events happened:  if the button was working correctly, a character  appeared at the end of the string Polycarp was typing;  if the button was malfunctioning,  characters  appeared at the end of the string. For example, suppose the buttons corresponding to characters  and  are working correctly, and the button corresponding to  is malfunctioning. If Polycarp presses the buttons in the order , , , , , , , then the string he is typing changes as follows:             .You are given a string  which appeared on the screen after Polycarp pressed some buttons. Help Polycarp to determine which buttons are working correctly for sure (that is, this string could not appear on the screen if any of these buttons was malfunctioning).You may assume that the buttons don't start malfunctioning when Polycarp types the string: each button either works correctly throughout the whole process, or malfunctions throughout the whole process.", "input": "The first line contains one integer  () \u2014 the number of test cases in the input. Then the test cases follow. Each test case is represented by one line containing a string  consisting of no less than  and no more than  lowercase Latin letters.", "output": "For each test case, print one line containing a string . The string  should contain all characters which correspond to buttons that work correctly . If all buttons may malfunction,  should be empty.", "tutorial": "If a key malfunctions, each sequence of presses of this key gives a string with even number of characters. So, if there is a substring consisting of odd number of equal characters , such that it cannot be extended to the left or to the right without adding other characters, then it could not be produced by presses of button  if  was malfunctioning.The only thing that's left is to find all maximal by inclusion substrings consisting of the same character.", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nbool ans[26];\n\nvoid solve() {\n\tstring s;\n\tcin >> s;\n\t\n\tmemset(ans, 0, sizeof(ans));\n\t\n\tfor (int i = 0; i < s.size(); i++) {\n\t\tint j = i;\n\t\twhile (j + 1 < s.size() && s[j + 1] == s[i])\n\t\t\tj++;\n\t\tif ((j - i) % 2 == 0)\n\t\t\tans[s[i] - 'a'] = true;\n\t\ti = j;\n\t}\n\t\n\tfor (int i = 0; i < 26; i++) if (ans[i])\n\t\tcout << char('a' + i);\n\tcout << endl;\n}\n\nint main() {\n\tint q;\n\tcin >> q;\n\twhile (q--) solve();\n}", "interactive": false, "noSolution": false, "noTutorial": false}