{"link": "https://codeforces.com//contest/1197/problem/D", "problemId": "376705", "shortId": "1197D", "contest_number": "1197", "name": "D. Yet Another Subarray Problem", "statement": "You are given an array  and two integers  and .You can choose some subarray . The cost of subarray  is equal to , where  is the least integer greater than or equal to . For example, if ,  and , then the cost of some subarrays are:  ;  ;  ;  ;  . Your task is to find the maximum cost of some subarray (possibly empty) of array .", "input": "The first line contains three integers , , and  (). The second line contains  integers  ().", "output": "Print the maximum cost of some subarray of array .", "tutorial": "At first let's solve this problem when $$$m = 1$$$ and $$$k = 0$$$ (it is the problem of finding subarray with maximum sum). For each position from $$$1$$$ to $$$n$$$ we want to know the value of $$$maxl_i = \\max\\limits_{1 \\le j \\le i + 1} sum(j, i)$$$, where $$$sum(l, r) = \\sum\\limits_{k = l}^{k \\le r} a_k$$$, and $$$sum(x+1, x) = 0$$$. We will calculate it the following way. $$$maxl_i$$$ will be the maximum of two values:   $$$0$$$ (because we can take segments of length $$$0$$$);  $$$a_i + maxl_{i-1}$$$. The maximum sum of some subarray is equal to $$$\\max\\limits_{1\\le i \\le n} maxl_i$$$.So, now we can calculate the values of $$$best_i = \\max\\limits_{0 \\le len, i - len \\cdot m \\ge 0} (sum(i-len \\cdot m + 1, i) - len * k)$$$ the same way. $$$best_i$$$ is the maximum of two values:   0;  $$$sum(i - m + 1, i) - k + best_{i-m}$$$. After calculating all values $$$best_i$$$ we can easily solve this problem. At first, let's iterate over the elements $$$best_i$$$. When we fix some element $$$best_i$$$, lets iterate over the value $$$len = 1, 2, \\dots, m$$$ and update the answer with value $$$best_i + sum(i - len, i - 1) - k$$$.", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int N = int(3e5) + 99;\n\nint n, m, k;\nint a[N];\nlong long bst[N];\nlong long psum[N];\n\nlong long sum(int l, int r){\n    l = max(l, 0);\n\treturn psum[r] - (l == 0? 0 : psum[l - 1]);\n}\n\nint main() {\n\tcin >> n >> m >> k;\n\tfor(int i = 0; i < n; ++i){\n\t\tcin >> a[i];\n\t\tpsum[i] = a[i] + (i == 0? 0 : psum[i - 1]);\n\t}\n\n\tlong long res = 0;\n\tfor(int len = 1; len <= m && len <= n; ++len)\n\t\t\tres = max(res, sum(0, len - 1) - k);\n\tfor(int i = 0; i < n; ++i){\n\t\tif(i + 1 >= m){\n\t\t\tlong long nbst = sum(i - m + 1, i) - k;\n\t\t\tif(i - m >= 0) nbst += bst[i - m];\n\t\t\tbst[i] = max(bst[i], + nbst);\n\t\t}\n\n\t\tfor(int len = 0; len < m && i + len < n; ++len)\n\t\t\tres = max(res, bst[i] + sum(i + 1, i + len) - k * (len > 0));\n\t}\t\n\n\tcout << res << endl;\n\treturn 0;\n}                             \t", "interactive": false, "noSolution": false, "noTutorial": false}