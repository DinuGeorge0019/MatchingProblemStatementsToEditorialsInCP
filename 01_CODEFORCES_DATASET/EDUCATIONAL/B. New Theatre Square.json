{"link": "https://codeforces.com//contest/1359/problem/B", "problemId": "634673", "shortId": "1359B", "contest_number": "1359", "name": "B. New Theatre Square", "statement": "You might have remembered Theatre square from the problem 1A. Now it's finally getting repaved.The square still has a rectangular shape of  meters. However, the picture is about to get more complicated now. Let  be the -th square in the -th row of the pavement.You are given the picture of the squares:  if  \"\", then the -th square in the -th row should be ;  if  \"\", then the -th square in the -th row should be . The black squares are paved already. You have to pave the white squares. There are two options for pavement tiles:   tiles\u00a0\u2014 each tile costs  burles and covers exactly  square;   tiles\u00a0\u2014 each tile costs  burles and covers exactly  adjacent squares of the .  What is the smallest total price of the tiles needed to cover all the white squares?", "input": "The first line contains a single integer  ()\u00a0\u2014 the number of testcases. Then the description of  testcases follow. The first line of each testcase contains four integers , ,  and  (; ; )\u00a0\u2014 the size of the Theatre square, the price of the  tile and the price of the  tile. Each of the next  lines contains  characters. The -th character in the -th line is . If  \"\", then the -th square in the -th row should be black, and if  \"\", then the -th square in the -th row should be white. ", "output": "For each testcase print a single integer\u00a0\u2014 the smallest total price of the tiles needed to cover all the white squares in burles.", "tutorial": "Notice that rows can be solved completely separately of each other. Each tile takes either one or two squares but it's always in the same row.So let's take a look at a single row. There are sequences of dot characters separated by some asterisks. Once again each of these sequences can be solved independently of the others.Thus, we have these empty strips of empty squares  which, when solved, can be summed up into the whole answer.There are two cases, depending on if a  is cheaper than two  tiles. If it is then we want to use of many  tiles as possible. So given , we can place   tiles and cover the rest  squares with  tiles.If it isn't cheaper then we want to cover everything with  tiles and never use  ones. So all  should be .The easier way to implement this might be the following. Let's update the price of the  tile with the minimum of  and . This way the first algorithm will produce exactly the same result of the second one in the case when a  tile isn't cheaper than two  ones.Overall complexity:  per testcase.", "solution": "t = int(input())\nfor _ in range(t):\n\tn, m, x, y = map(int, input().split())\n\tans = 0\n\ty = min(y, 2 * x)\n\tfor __ in range(n):\n\t\ts = input()\n\t\ti = 0\n\t\twhile i < m:\n\t\t\tif s[i] == '*':\n\t\t\t\ti += 1\n\t\t\t\tcontinue\n\t\t\tj = i\n\t\t\twhile j + 1 < m and s[j + 1] == '.':\n\t\t\t\tj += 1\n\t\t\tl = j - i + 1\n\t\t\tans += l % 2 * x + l // 2 * y\n\t\t\ti = j + 1\n\tprint(ans)", "interactive": false, "noSolution": false, "noTutorial": false}