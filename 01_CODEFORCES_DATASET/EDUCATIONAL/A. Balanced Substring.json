{"link": "https://codeforces.com//contest/1569/problem/A", "problemId": "1103179", "shortId": "1569A", "contest_number": "1569", "name": "A. Balanced Substring", "statement": "You are given a string , consisting of  letters, each letter is either '' or ''. The letters in the string are numbered from  to . is a continuous substring of letters from index  to  of the string inclusive. A string is called balanced if the number of letters '' in it is equal to the number of letters ''. For example, strings \"\" and \"\" are balanced and strings \"\" and \"\" are not.Find any non-empty balanced substring  of string . Print its  and  (). If there is no such substring, then print  .", "input": "The first line contains a single integer  ()\u00a0\u2014 the number of testcases. Then the descriptions of  testcases follow. The first line of the testcase contains a single integer  ()\u00a0\u2014 the length of the string. The second line of the testcase contains a string , consisting of  letters, each letter is either '' or ''.", "output": "For each testcase print two integers. If there exists a non-empty balanced substring , then print   (). Otherwise, print  .", "tutorial": "Any non-empty balanced string contains at least one letter '' and at least one letter ''. That implies that there's an '' adjacent to a '' somewhere in that string. Both strings \"\" and \"\" are balanced. Thus, any balanced string contains a balanced substring of length . So the solution is to check all  pairs of adjacent letters. If there exists a pair of different ones, print it.Overall complexity:  per testcase.", "solution": "for _ in range(int(input())):\n\tn = int(input())\n\ts = input()\n\tfor i in range(n - 1):\n\t\tif s[i] != s[i + 1]:\n\t\t\tprint(i + 1, i + 2)\n\t\t\tbreak\n\telse:\n\t\tprint(-1, -1)", "interactive": false, "noSolution": false, "noTutorial": false}