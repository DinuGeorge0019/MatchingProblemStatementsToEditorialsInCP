{"link": "https://codeforces.com//contest/1598/problem/C", "problemId": "1138072", "shortId": "1598C", "contest_number": "1598", "name": "C. Delete Two Elements", "statement": "Monocarp has got an array  consisting of  integers. Let's denote  as the mathematic mean of these elements (note that it's possible that  is not an integer). The mathematic mean of an array of  elements is the sum of elements divided by the number of these elements (i.\u2009e. sum divided by ).Monocarp wants to delete exactly two elements from  so that the mathematic mean of the remaining  elements is still equal to .Your task is to calculate the number of pairs of positions  () such that if the elements on these positions are deleted, the mathematic mean of  remaining elements is equal to  (that is, it is equal to the mathematic mean of  elements of the original array ).", "input": "The first line contains a single integer  ()\u00a0\u2014 the number of testcases. The first line of each testcase contains one integer  () \u2014 the number of elements in the array. The second line contains a sequence of integers  (), where  is the -th element of the array. The sum of  over all testcases doesn't exceed .", "output": "Print one integer \u2014 the number of pairs of positions  () such that if the elements on these positions are deleted, the mathematic mean of  remaining elements is equal to  (that is, it is equal to the mathematic mean of  elements of the original array ).", "tutorial": "First of all, instead of the mathematic mean, let's consider the sum of elements. If the mathematic mean is , then the sum of elements of the array is . Let's denote the sum of elements in the original array as . Note  is always an integer.If we remove two elements from the array, the resulting sum of elements should become . So, the sum of the elements we remove should be exactly .If  is not an integer, the answer is  (to check that, you can simply compare  with ). Otherwise, we have to find the number of pairs  such that  and . This is a well-known problem.To solve it, you can calculate the number of occurrences of each element and store it in some associative data structure (for example,  in C++). Let  be the number of occurrences of element . Then, you should iterate on the element  you want to remove and check how many elements match it, that is, how many elements give exactly  if you add  to them. The number of these elements is just . Let's sum up all these values for every element in the array.Unfortunately, this sum is not the answer yet. We need to take care of two things:  if for some index , , then  matches itself, so you have to subtract the number of such elements from the answer;  every pair of elements is counted twice: the first time when we consider the first element of the pair, and the second time \u2014 when we consider the second element of the pair. So, don't forget to divide the answer by . ", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n  int t;\n  scanf(\"%d\", &t);\n  while (t--) {\n    int n;\n    scanf(\"%d\", &n);\n    vector<int> a(n);\n    map<int, int> cnt;\n    for (auto &x : a) {\n      scanf(\"%d\", &x);\n      cnt[x] += 1;\n    }\n    long long sum = accumulate(a.begin(), a.end(), 0LL);\n    if ((2 * sum) % n != 0) {\n      puts(\"0\");\n      continue;\n    }\n    long long need = (2 * sum) / n;\n    long long ans = 0;\n    for (int i = 0; i < n; ++i) {\n      int a1 = a[i];\n      int a2 = need - a1;\n      if (cnt.count(a2)) ans += cnt[a2];\n      if (a1 == a2) ans -= 1;\n    }\n    printf(\"%lld\\n\", ans / 2);\n  }\n}", "interactive": false, "noSolution": false, "noTutorial": false}