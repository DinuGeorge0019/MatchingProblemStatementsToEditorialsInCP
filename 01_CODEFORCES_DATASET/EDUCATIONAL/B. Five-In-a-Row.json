{"link": "https://codeforces.com//contest/825/problem/B", "problemId": "114545", "shortId": "825B", "contest_number": "825", "name": "B. Five-In-a-Row", "statement": "Alice and Bob play 5-in-a-row game. They have a playing field of size . In turns they put either crosses or noughts, one at a time. Alice puts crosses and Bob puts noughts.In current match they have made some turns and now it's Alice's turn. She wonders if she can put cross in such empty cell that she wins immediately.Alice wins if some crosses in the field form line of length . This line can be horizontal, vertical and diagonal.", "input": "You are given matrix  ( lines of  characters each) with capital Latin letters  being a cross, letters  being a nought and  being an empty cell. The number of  cells is equal to the number of  cells and there is at least one of each type. There is at least one empty cell. It is guaranteed that in the current arrangement nobody has still won.", "output": "Print  if it's possible for Alice to win in one turn by putting cross in some empty cell. Otherwise print .", "tutorial": "This one is a pure implementation task. Just check every possible line of length . If the current one contains  crosses and  empty cell then the answer is .", "solution": "#ifdef __GNUC__\n#pragma GCC target(\"sse4,avx\")\n#endif\n#include <immintrin.h>\n#include <algorithm>\n#include <string>\n#include <iostream>\n#include <vector>\n#include <cstdint>\n#include <numeric>\n\nvoid run(std::istream& in, std::ostream& out) {\n    std::vector<std::string> field(10);\n    for (int i = 0; i < 10; i++) {\n        in >> field[i];\n    }\n    for (int i = 0; i < 10; i++) {\n        for (int j = 0; j <= 5; j++) {\n            int stat = 0;\n            int empty = 0;\n            for (int k = 0; k < 5; k++) {\n                if (field[i][j + k] == 'X') {\n                    stat++;\n                } else if (field[i][j + k] == '.') {\n                    empty++;\n                }\n            }\n            if (stat == 4 && empty == 1) {\n                out << \"YES\\n\";\n                return;\n            }\n        }\n    }\n    for (int i = 0; i < 10; i++) {\n        for (int j = 0; j <= 5; j++) {\n            int stat = 0;\n            int empty = 0;\n            for (int k = 0; k < 5; k++) {\n                if (field[j + k][i] == 'X') {\n                    stat++;\n                } else if (field[j + k][i] == '.') {\n                    empty++;\n                }\n            }\n            if (stat == 4 && empty == 1) {\n                out << \"YES\\n\";\n                return;\n            }\n        }\n    }\n\n    for (int i = 0; i <= 5; i++) {\n        for (int j = 0; j <= 5; j++) {\n            int stat = 0;\n            int empty = 0;\n            for (int k = 0; k < 5; k++) {\n                if (field[i + k][j + k] == 'X') {\n                    stat++;\n                } else if (field[i + k][j + k] == '.') {\n                    empty++;\n                }\n            }\n            if (stat == 4 && empty == 1) {\n                out << \"YES\\n\";\n                return;\n            }\n        }\n    }\n\n    for (int i = 0; i <= 5; i++) {\n        for (int j = 4; j < 10; j++) {\n            int stat = 0;\n            int empty = 0;\n            for (int k = 0; k < 5; k++) {\n                if (field[i + k][j - k] == 'X') {\n                    stat++;\n                } else if (field[i + k][j - k] == '.') {\n                    empty++;\n                }\n            }\n            if (stat == 4 && empty == 1) {\n                out << \"YES\\n\";\n                return;\n            }\n        }\n    }\n    out << \"NO\\n\";\n}\n\nint main() {\n    std::cin.sync_with_stdio(false);\n    std::cin.tie(nullptr);\n    run(std::cin, std::cout);\n    return 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}