{"link": "https://codeforces.com//contest/622/problem/D", "problemId": "47918", "shortId": "622D", "contest_number": "622", "name": "D. Optimal Number Permutation", "statement": "You have array  that contains all integers from  to  twice. You can arbitrary permute any numbers in .Let number  be in positions  () in the permuted array . Let's define the value  \u2014 the distance between the positions of the number . Permute the numbers in array  to minimize the value of the sum .", "input": "The only line contains integer  ().", "output": "Print  integers \u2014 the permuted array  that minimizes the value of the sum .", "tutorial": "Let's build the answer with the sum equal to zero. Let  be even. Let's place odd numbers in the first half of the array: the number  in the positions  and , the number  in the positions  and  and so on. Similarly let's place even numbers in the second half: the number  in the position  and , the number  in the positions  and  and so on. We can place the number  in the leftover positions. We can build the answer for odd  in a similar way.\nEasy to see that our construction will give zero sum.\n", "solution": "\n            #include <bits/stdc++.h>\n\u00a0\n#define forn(i, n) for (int i = 0; i < int(n); i++)\n#define ford(i, n) for (int i = int(n) - 1; i >= 0; i--)\n#define fore(i, l, r) for (int i = int(l); i < int(r); i++)\n#define correct(x, y, n, m) (0 <= (x) && (x) < (n) && 0 <= (y) && (y) < (m))\n#define all(a) (a).begin(), (a).end()\n#define sz(a) int((a).size())\n#define pb(a) push_back(a)\n#define mp(x, y) make_pair((x), (y))\n#define x first\n#define y second\n\u00a0\nusing namespace std;\n\u00a0\ntypedef long long li;\ntypedef long double ld;\ntypedef pair<int, int> pt;\n\u00a0\ntemplate<typename X> inline X abs(const X& a) { return a < 0? -a: a; }\ntemplate<typename X> inline X sqr(const X& a) { return a * a; }\n\u00a0\nconst int INF = int(1e9);\nconst li INF64 = li(1e18);\nconst ld EPS = 1e-9, PI = 3.1415926535897932384626433832795;\n\u00a0\nint n;\n\u00a0\ninline bool read() {\n\u00a0 \u00a0 return !!(cin >> n);\n}\n\u00a0\nconst int N = 1200300;\n\u00a0\nint ans[N];\n\u00a0\ninline void solve() {\n\u00a0 \u00a0 forn(i, 2 * n) ans[i] = n;\n\u00a0 \u00a0 fore(i, 1, n) {\n\u00a0 \u00a0 \u00a0 \u00a0 int x;\n\u00a0 \u00a0 \u00a0 \u00a0 if (i & 1) x = i >> 1;\n\u00a0 \u00a0 \u00a0 \u00a0 else x = n - 1 + (i >> 1);\n\u00a0 \u00a0 \u00a0 \u00a0 int y = x + (n - i);\n\u00a0 \u00a0 \u00a0 \u00a0 ans[x] = ans[y] = i;\n\u00a0 \u00a0 }\n\u00a0\n\u00a0 \u00a0 forn(i, 2 * n) {\n\u00a0 \u00a0 \u00a0 \u00a0 if (i) putchar(' ');\n\u00a0 \u00a0 \u00a0 \u00a0 printf(\"%d\", ans[i]);\n\u00a0 \u00a0 }\n\u00a0 \u00a0 puts(\"\");\n}\n\u00a0\nint main() {\n#ifdef SU1\n\u00a0 \u00a0 assert(freopen(\"input.txt\", \"rt\", stdin));\n\u00a0 \u00a0 //assert(freopen(\"output.txt\", \"wt\", stdout));\n#endif\n\u00a0 \u00a0 \n\u00a0 \u00a0 cout << setprecision(10) << fixed;\n\u00a0 \u00a0 cerr << setprecision(5) << fixed;\n\u00a0\n\u00a0 \u00a0 while (read()) {\n\u00a0 \u00a0 \u00a0 \u00a0 solve();\n\u00a0 \u00a0 \u00a0 \u00a0 //break;\n\u00a0 \u00a0 }\n\u00a0 \u00a0 \n\u00a0 \u00a0 return 0;\n}\n        ", "interactive": false, "noSolution": false, "noTutorial": false}