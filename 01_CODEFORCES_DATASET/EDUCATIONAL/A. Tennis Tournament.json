{"link": "https://codeforces.com//contest/628/problem/A", "problemId": "48823", "shortId": "628A", "contest_number": "628", "name": "A. Tennis Tournament", "statement": "A tennis tournament with  participants is running. The participants are playing by an olympic system, so the winners move on and the losers drop out.The tournament takes place in the following way (below,  is the number of the participants of the current round):  let  be the maximal power of the number  such that ,   participants compete in the current round and a half of them passes to the next round, the other  participants pass to the next round directly,  when only one participant remains, the tournament finishes. Each match requires  bottles of water for each participant and one bottle for the judge. Besides  towels are given to each participant for the whole tournament.Find the number of bottles and towels needed for the tournament.Note that it's a tennis tournament so in each match two participants compete (one of them will win and the other will lose).", "input": "The only line contains three integers  () \u2014 the number of participants and the parameters described in the problem statement.", "output": "Print two integers  and  \u2014 the number of bottles and towels need for the tournament.", "tutorial": "Here you can simply model the process. Or you can note that after each match some player drops out. In total  players will drop out. So the first answer is . Obviously the second answer is .\n", "solution": "\n            #include <bits/stdc++.h>\n\u00a0\n#define forn(i, n) for (int i = 0; i < int(n); i++)\n#define ford(i, n) for (int i = int(n) - 1; i >= 0; i--)\n#define fore(i, l, r) for (int i = int(l); i < int(r); i++)\n#define correct(x, y, n, m) (0 <= (x) && (x) < (n) && 0 <= (y) && (y) < (m))\n#define all(a) (a).begin(), (a).end()\n#define sz(a) int((a).size())\n#define pb(a) push_back(a)\n#define mp(x, y) make_pair((x), (y))\n#define x first\n#define y second\n\u00a0\nusing namespace std;\n\u00a0\ntypedef long long li;\ntypedef long double ld;\ntypedef pair<int, int> pt;\n\u00a0\ntemplate<typename X> inline X abs(const X& a) { return a < 0? -a: a; }\ntemplate<typename X> inline X sqr(const X& a) { return a * a; }\n\u00a0\nconst int INF = int(1e9);\nconst li INF64 = li(1e18);\nconst ld EPS = 1e-9, PI = 3.1415926535897932384626433832795;\n\u00a0\nint n, b, p;\n\u00a0\ninline bool read() {\n\u00a0 \u00a0 return !!(cin >> n >> b >> p);\n}\n\u00a0\ninline void solve() {\n\u00a0 \u00a0 int x = 0, y = n * p;\n\u00a0 \u00a0 while (n > 1) {\n\u00a0 \u00a0 \u00a0 \u00a0 int k = 1;\n\u00a0 \u00a0 \u00a0 \u00a0 while (k * 2 <= n) k *= 2;\n\u00a0 \u00a0 \u00a0 \u00a0 x += (k / 2) * (2 * b + 1);\n\u00a0 \u00a0 \u00a0 \u00a0 n -= k / 2;\n\u00a0 \u00a0 }\n\u00a0 \u00a0 cout << x << ' ' << y << endl;\n}\n\u00a0\nint main() {\n#ifdef SU1\n\u00a0 \u00a0 assert(freopen(\"input.txt\", \"rt\", stdin));\n\u00a0 \u00a0 //assert(freopen(\"output.txt\", \"wt\", stdout));\n#endif\n\u00a0 \u00a0 \n\u00a0 \u00a0 cout << setprecision(10) << fixed;\n\u00a0 \u00a0 cerr << setprecision(5) << fixed;\n\u00a0\n\u00a0 \u00a0 while (read()) {\n\u00a0 \u00a0 \u00a0 \u00a0 solve();\n\u00a0 \u00a0 \u00a0 \u00a0 //break;\n\u00a0 \u00a0 }\n\u00a0 \u00a0 \n\u00a0 \u00a0 return 0;\n}\n        ", "interactive": false, "noSolution": false, "noTutorial": false}