{"link": "https://codeforces.com//contest/1535/problem/C", "problemId": "1005284", "shortId": "1535C", "contest_number": "1535", "name": "C. Unstable String", "statement": "You are given a string  consisting of the characters , , and .Let's call a string  if it consists of the characters  and  and any two adjacent characters are different (i.\u00a0e. it has the form  or ).Let's call a string  if it consists of the characters , , and , and you can replace the characters  to  or  (for each character, the choice is independent), so that the string becomes .For example, the strings , , and  are beautiful, and the strings  and  are not.Calculate the number of beautiful contiguous substrings of the string .", "input": "The first line contains a single integer  ()\u00a0\u2014 number of test cases. The first and only line of each test case contains the string  () consisting of characters , , and . It is guaranteed that the sum of the string lengths over all test cases does not exceed .", "output": "For each test case, output a single integer\u00a0\u2014 the number of  substrings of the string .", "tutorial": "Let's find a simple condition when the string is not beautiful. A string is not beautiful if there are two characters  (or two characters ) at an odd distance, or  and  at an even distance (because in this case, the string cannot be made unstable).Iterate over the right border of the substring . Let  be the maximum index such that the substring  is not beautiful (or  if the substring  is beautiful). Then we have to add  to the answer (since any substring of a beautiful string is also beautiful).Denote  as the last occurrence of  ( or ) at the position of parity .Let ,  is the parity of , then , i.\u2009e. find the nearest character that breaks a beautiful substring ( at an odd distance or  at an even distance)The case for  is similar. If , then we can choose what this character will be. Obviously, we need to choose the option with the smaller value of .", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n  int t;\n  cin >> t;\n  while (t--) {\n    string s;\n    cin >> s;\n    vector<vector<int>> lst(2, vector<int>(2, -1));\n    long long ans = 0;\n    for (int i = 0; i < int(s.size()); ++i) {\n      int j = i - 1;\n      int p = i & 1;\n      if (s[i] != '1') j = min(j, max(lst[0][p ^ 1], lst[1][p]));\n      if (s[i] != '0') j = min(j, max(lst[0][p], lst[1][p ^ 1]));\n      ans += i - j;\n      if (s[i] != '?') lst[s[i] - '0'][p] = i;\n    }\n    cout << ans << '\\n';\n  }\n}\n", "interactive": false, "noSolution": false, "noTutorial": false}