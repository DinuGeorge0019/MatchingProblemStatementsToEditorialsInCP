{"link": "https://codeforces.com//contest/1626/problem/D", "problemId": "1263150", "shortId": "1626D", "contest_number": "1626", "name": "D. Martial Arts Tournament", "statement": "Monocarp is planning to host a martial arts tournament. There will be three divisions based on weight: lightweight, middleweight and heavyweight. The winner of each division will be determined by a single elimination system.In particular, that implies that the number of participants in each division should be a power of two. Additionally, each division should have a non-zero amount of participants. participants have registered for the tournament so far, the -th of them weighs . To split participants into divisions, Monocarp is going to establish two integer weight boundaries  and  (). All participants who weigh strictly less than  will be considered lightweight. All participants who weigh greater or equal to  will be considered heavyweight. The remaining participants will be considered middleweight.It's possible that the distribution doesn't make the number of participants in each division a power of two. It can also lead to empty divisions. To fix the issues, Monocarp can invite an arbitrary number of participants to each division.Note that Monocarp can't kick out any of the  participants who have already registered for the tournament.However, he wants to invite as little extra participants as possible. Help Monocarp to choose  and  in such a way that the total amount of extra participants required is as small as possible. Output that amount.", "input": "The first line contains a single integer  ()\u00a0\u2014 the number of testcases. The first line of each testcase contains a single integer  ()\u00a0\u2014 the number of the registered participants. The second line of each testcase contains  integers  ()\u00a0\u2014 the weights of the registered participants. The sum of  over all testcases doesn't exceed .", "output": "For each testcase, print a single integer\u00a0\u2014 the smallest number of extra participants Monocarp is required to invite after he chooses the weight boundaries  and .", "tutorial": "Sort the weights, now choosing  and  will split the array into three consecutive segments.Consider a naive solution to the problem. You can iterate over the length of the first segment and the second segment. The third segment will include everyone remaining.Now you have to check if there exist some  and  that produce such segment.  can be equal to the first element of the second segment (since only all elements of the first segment are smaller than it). Similarly,  can be equal to the first element of the third segment.However, if the last element of some segment is equal to the first element of the next segment, no  or  can split the array like that.Otherwise, you can split an array like that. So you can iterate over the lengths, check the correctness and choose the best answer.Now let's optimize it using the condition about powers of two.First, iterate over the size of the middle division (which is a power of two). Then over the length of the first segment (which can be not a power of two). Check if the first segment is valid.So we fixed the length of the first segment and some value which is greater or equal than the length of the second segment. That value isn't necessarily equal to the length of the second segment because the produced segment might be invalid.So there is a greedy idea that the second segment should be as long as possible under the constraint that it doesn't exceed the fixed value. The intuition is the following. Consider the longest possible valid segment. Now take the last element away from it. We will have to invite one more participant to the middle division. And that element will also get added to the third segment, increasing its length. So potentially, you can only increase the required number of participants to invite.This can be implemented in the following fashion. For each position  precalculate \u00a0\u2014 the closest possible segment border from the left. Iterate over the size of the middle division  as a power of two. Iterate over the length of the first segment . Find the closest border to the left of . Get the lengths of the second and the third segments. Find the closest powers of two to each length and update the answer.Overall complexity:  per testcase.", "solution": "calc = 1\nnxt = [1, 0]\n\nfor _ in range(int(input())):\n  n = int(input())\n  a = sorted(list(map(int, input().split())))\n  while calc <= n:\n    for i in range(calc):\n      nxt.append(calc - i - 1)\n    calc *= 2\n  left = []\n  for i in range(n + 1):\n    if i == 0 or i == n or a[i] != a[i - 1]:\n      left.append(i)\n    else:\n      left.append(left[-1])\n  mid = 1\n  ans = n + 2\n  while mid <= n:\n    for len1 in range(n + 1):\n      if left[len1] == len1:\n        len2 = left[min(n, len1 + mid)] - len1\n        len3 = n - len1 - len2\n        ans = min(ans, nxt[len1] + (mid - len2) + nxt[len3])\n    mid *= 2\n  print(ans)", "interactive": false, "noSolution": false, "noTutorial": false}