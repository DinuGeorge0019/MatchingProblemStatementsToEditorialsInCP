{"link": "https://codeforces.com//contest/808/problem/B", "problemId": "106398", "shortId": "808B", "contest_number": "808", "name": "B. Average Sleep Time", "statement": "It's been almost a week since Polycarp couldn't get rid of insomnia. And as you may already know, one week in Berland lasts  days!When Polycarp went to a doctor with his problem, the doctor asked him about his sleeping schedule (more specifically, the average amount of hours of sleep per week). Luckily, Polycarp kept records of sleep times for the last  days. So now he has a sequence , where  is the sleep time on the -th day.The number of records is so large that Polycarp is unable to calculate the average value by himself. Thus he is asking you to help him with the calculations. To get the average Polycarp is going to consider  consecutive days as a week. So there will be  weeks to take into consideration. For example, if ,  and , then the result is .You should write a program which will calculate average sleep times of Polycarp over all weeks.", "input": "The first line contains two integer numbers  and  (). The second line contains  integer numbers  ().", "output": "Output average sleeping time over all weeks.  The answer is considered to be correct if its absolute or relative error does not exceed . In particular, it is enough to output real number with at least 6 digits after the decimal point.", "tutorial": "To get the sum for -th week you need to take sum of ()-th week, subtract first element of ()-th week from it and add up last element of -th week. All common elements will remain.Thus by moving right week by week calculate sum of all weeks and divide it by .Overall complexity: .", "solution": "import java.io.*;\nimport java.util.*;\n\npublic class ER21qB {\n\n  public static void main(String[] args) {\n    InputReader in = new InputReader(System.in);\n    PrintWriter w = new PrintWriter(System.out);\n\n    int n = in.nextInt();\n    int k = in.nextInt();\n    \n    int a[] = in.nextIntArray(n);\n    \n    long p[] = new long[n + 1];\n    p[0] = 0;\n    for (int i = 1; i <= n; i++)\n    \tp[i] = p[i - 1] + a[i - 1];\n    \n    double ans = 0;\n    for (int i = 1; i + k - 1 <= n; i++) {\n    \tans += (p[i + k - 1] - p[i - 1]) * 1.0 / (n - k + 1);\n    }\n    \n    w.println(ans);\n    w.close();\n  }\n\n  static class InputReader {\n\n    private final InputStream stream;\n    private final byte[] buf = new byte[8192];\n    private int curChar, snumChars;\n\n    public InputReader(InputStream st) {\n      this.stream = st;\n    }\n\n    public int read() {\n      if (snumChars == -1)\n        throw new InputMismatchException();\n      if (curChar >= snumChars) {\n        curChar = 0;\n        try {\n          snumChars = stream.read(buf);\n        } catch (IOException e) {\n          throw new InputMismatchException();\n        }\n        if (snumChars <= 0)\n          return -1;\n      }\n      return buf[curChar++];\n    }\n\n    public int nextInt() {\n      int c = read();\n      while (isSpaceChar(c)) {\n        c = read();\n      }\n      int sgn = 1;\n      if (c == '-') {\n        sgn = -1;\n        c = read();\n      }\n      int res = 0;\n      do {\n        res *= 10;\n        res += c - '0';\n        c = read();\n      } while (!isSpaceChar(c));\n      return res * sgn;\n    }\n\n    public long nextLong() {\n      int c = read();\n      while (isSpaceChar(c)) {\n        c = read();\n      }\n      int sgn = 1;\n      if (c == '-') {\n        sgn = -1;\n        c = read();\n      }\n      long res = 0;\n      do {\n        res *= 10;\n        res += c - '0';\n        c = read();\n      } while (!isSpaceChar(c));\n      return res * sgn;\n    }\n\n    public int[] nextIntArray(int n) {\n      int a[] = new int[n];\n      for (int i = 0; i < n; i++) {\n        a[i] = nextInt();\n      }\n      return a;\n    }\n\n    public String readString() {\n      int c = read();\n      while (isSpaceChar(c)) {\n        c = read();\n      }\n      StringBuilder res = new StringBuilder();\n      do {\n        res.appendCodePoint(c);\n        c = read();\n      } while (!isSpaceChar(c));\n      return res.toString();\n    }\n\n    public String nextLine() {\n      int c = read();\n      while (isSpaceChar(c))\n        c = read();\n      StringBuilder res = new StringBuilder();\n      do {\n        res.appendCodePoint(c);\n        c = read();\n      } while (!isEndOfLine(c));\n      return res.toString();\n    }\n\n    public boolean isSpaceChar(int c) {\n      return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\n    }\n\n    private boolean isEndOfLine(int c) {\n      return c == '\\n' || c == '\\r' || c == -1;\n    }\n\n  }\n\n}", "interactive": false, "noSolution": false, "noTutorial": false}