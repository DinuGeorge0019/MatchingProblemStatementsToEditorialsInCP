{"link": "https://codeforces.com//contest/803/problem/F", "problemId": "104511", "shortId": "803F", "contest_number": "803", "name": "F. Coprime Subsequences", "statement": "Let's call a non-empty sequence of positive integers   if the greatest common divisor of all elements of this sequence is equal to .Given an array  consisting of  positive integers, find the number of its  subsequences. Since the answer may be very large, print it modulo .Note that two subsequences are considered different if chosen indices are different. For example, in the array  there are  different subsequences: ,  and .", "input": "The first line contains one integer number  (). The second line contains  integer numbers  ().", "output": "Print the number of  subsequences of  modulo .", "tutorial": "This problem can be solved using inclusion-exclusion.Let  be the number of subsequences such that all elements of the subsequence are divisible by . We can calculate , which is the number of elements divisible by , by factorizing all elements of the sequence and generating their divisors, and .Then we can apply the inclusion-exclusion principle and get the resulting formula: , where  is the M\u00f6bius function.", "solution": "#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#include <vector>\n#include <set>\n#include <map>\n#include <cmath>\n#include <ctime>\n#include <string>\n#include <cstring>\n#include <complex>\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int, int> pii;\n#define mp make_pair\n\nconst ll MOD = (ll)1e9 + 7;\nll add(ll x, ll y)\n{\n    x += y;\n    if (x >= MOD) return x - MOD;\n    return x;\n}\nll sub(ll x, ll y)\n{\n    x -= y;\n    if (x < 0) return x + MOD;\n    return x;\n}\nll mult(ll x, ll y)\n{\n    return (x * y) % MOD;\n}\n\nconst int N = 100100;\nll a[N];\nll mu[N];\n\nint main()\n{\n//    freopen(\"input.txt\", \"r\", stdin);\n//    freopen(\"output.txt\", \"w\", stdout);\n\n    for (int i = 1; i < N; i++)\n        a[i] = 1;\n\n    int n;\n    scanf(\"%d\", &n);\n    while(n--)\n    {\n        int x;\n        scanf(\"%d\", &x);\n        a[x] = add(a[x], a[x]);\n    }\n    for (int x = 1; x < N; x++)\n        for (int y = 2 * x; y < N; y += x)\n            a[x] = mult(a[x], a[y]);\n\n    mu[1] = 1;\n    for (int x = 1; x < N; x++)\n        for (int y = 2 * x; y < N; y += x)\n            mu[y] = sub(mu[y], mu[x]);\n\n    ll ans = 0;\n    for (int i = 1; i < N; i++)\n        ans = add(ans, mult(mu[i], sub(a[i], 1)));\n    printf(\"%lld\\n\", ans);\n\n    return 0;\n}\n", "interactive": false, "noSolution": false, "noTutorial": false}