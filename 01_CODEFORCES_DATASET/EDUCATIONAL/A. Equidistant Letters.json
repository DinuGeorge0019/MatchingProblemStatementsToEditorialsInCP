{"link": "https://codeforces.com//contest/1626/problem/A", "problemId": "1263147", "shortId": "1626A", "contest_number": "1626", "name": "A. Equidistant Letters", "statement": "You are given a string , consisting of lowercase Latin letters. Every letter appears in it no more than twice.Your task is to rearrange the letters in the string in such a way that for each pair of letters that appear exactly twice, the distance between the letters in the pair is the same. You are not allowed to add or remove letters.It can be shown that the answer always exists. If there are multiple answers, print any of them.", "input": "The first line contains a single integer  ()\u00a0\u2014 the number of testcases. Each testcase consists of a non-empty string , consisting of lowercase Latin letters. Every letter appears in the string no more than twice. The length of the string doesn't exceed .", "output": "For each testcase, print a single string. Every letter should appear in it the same number of times as it appears in string . For each pair of letters that appear exactly twice, the distance between the letters in the pair should be the same. If there are multiple answers, print any of them.", "tutorial": "Let's consider a very special case of equal distances. What if all distances were equal to ? It implies that if some letter appears exactly twice, both occurrences are placed right next to each other.That construction can be achieved if you sort the string, for example: first right down all letters 'a', then all letters 'b' and so on. If a letter appears multiple times, all its occurrences will be next to each other, just as we wanted.Overall complexity:  or  per testcase.", "solution": "for _ in range(int(input())):\n  print(''.join(sorted(input())))", "interactive": false, "noSolution": false, "noTutorial": false}