{"link": "https://codeforces.com//contest/1681/problem/E", "problemId": "1408806", "shortId": "1681E", "contest_number": "1681", "name": "E. Labyrinth Adventures", "statement": "You found a map of a weirdly shaped labyrinth. The map is a grid, consisting of  rows and  columns. The rows of the grid are numbered from  to  from bottom to top. The columns of the grid are numbered from  to  from left to right.The labyrinth has  layers. The first layer is the bottom left corner (cell ). The second layer consists of all cells that are in the grid and adjacent to the first layer by a side or a corner. The third layer consists of all cells that are in the grid and adjacent to the second layer by a side or a corner. And so on. The labyrinth with  layers, for example, is shaped as follows:   The layers are separated from one another with walls. However, there are doors in these walls.Each layer (except for layer ) has exactly two doors to the next layer. One door is placed on the top wall of the layer and another door is placed on the right wall of the layer. For each layer from  to  you are given positions of these two doors. The doors can be passed in both directions: either from layer  to layer  or from layer  to layer .If you are standing in some cell, you can move to an adjacent by a side cell if a wall doesn't block your move (e.g. you can't move to a cell in another layer if there is no door between the cells).Now you have  queries of sort: what's the minimum number of moves one has to make to go from cell  to cell .", "input": "The first line contains a single integer  ()\u00a0\u2014 the number of layers in the labyrinth. The -th of the next  lines contains four integers  and  ()\u00a0\u2014 the coordinates of the doors. Both cells are on the -th layer. The first cell is adjacent to the top wall of the -th layer by a side\u00a0\u2014 that side is where the door is. The second cell is adjacent to the right wall of the -th layer by a side\u00a0\u2014 that side is where the door is. The next line contains a single integer  ()\u00a0\u2014 the number of queries. The -th of the next  lines contains four integers  and  ()\u00a0\u2014 the coordinates of the cells in the -th query.", "output": "For each query, print a single integer\u00a0\u2014 the minimum number of moves one has to make to go from cell  to cell .", "tutorial": "WLOG, assume all queries ask to move from a lower layer to a higher layer. The first thing to notice in the problem is that it is always optimal to never go down a layer. You have an optimal path that is going down some layers, and then returning to the same layer. So it leaves a layer in some its cell and returns to it in some other cell (or the same one). The best distance it can achieve is the Manhattan distance between these two cells. However, we can also achieve the Manhattan distance by just going along this layer, and the answer will be at least as optimal.If the query asks about the cells of the same layer, just answer with the Manhattan distance. Otherwise, we can describe the path as follows: go from the first cell to some door on its layer, enter the door and go to another door on the next layer, so on until the layer of the second cell, where you go from a door to the second cell.Thus, we could potentially write \u00a0\u2014 the shortest distance from the start to the -th door of the -th layer. Initialize both doors of the first layer, take the best answer from the both doors of the last layer. That would be  per query, which is too slow.Let's optimize it with some precalculations. In particular, we want to know the shortest distance between one door of some layer and one door of another layer.We can use the technique similar to binary lifting. Calculate the distance between a pair of doors on layers which are  apart for all  up to . Let  be the distance from door  of layer  to door  of layer .  can be initialized straightforwardly. Then, to calculate , we can use the values for :  and  for some intermediate door  on layer .To obtain the answer, use  jumps to reach the layer one before the last one. Then iterate over the last door.Alternatively, you could pack this dynamic programming into a segment tree, use divide and conquer on queries or do square root decomposition.Overall complexity: .", "solution": "#include <bits/stdc++.h>\n\n#define forn(i, n) for (int i = 0; i < int(n); i++)\n\nusing namespace std;\n\nconst long long INF64 = 1e18;\n\ntypedef pair<int, int> pt;\n#define x first\n#define y second\n\nint main() {\n\tint n;\n\tscanf(\"%d\", &n);\n\tvector<vector<pt>> d(n - 1, vector<pt>(2));\n\tforn(i, n - 1) forn(j, 2){\n\t\tscanf(\"%d%d\", &d[i][j].x, &d[i][j].y);\n\t\t--d[i][j].x, --d[i][j].y;\n\t}\n\tint lg = 1;\n\twhile ((1 << lg) < n - 1) ++lg;\n\tvector<vector<vector<vector<long long>>>> dp(n - 2, vector<vector<vector<long long>>>(lg, vector<vector<long long>>(2, vector<long long>(2, INF64))));\n\tforn(i, n - 2) forn(k, 2){\n\t\tdp[i][0][0][k] = abs(d[i][0].x + 1 - d[i + 1][k].x) + abs(d[i][0].y - d[i + 1][k].y) + 1;\n\t\tdp[i][0][1][k] = abs(d[i][1].x - d[i + 1][k].x) + abs(d[i][1].y + 1 - d[i + 1][k].y) + 1;\n\t}\n\tfor (int l = 1; l < lg; ++l) forn(i, n - 2) forn(j, 2) forn(k, 2) forn(t, 2) if (i + (1 << (l - 1)) < n - 2){\n\t\tdp[i][l][j][k] = min(dp[i][l][j][k], dp[i][l - 1][j][t] + dp[i + (1 << (l - 1))][l - 1][t][k]);\n\t}\n\tint m;\n\tscanf(\"%d\", &m);\n\tforn(_, m){\n\t\tint x1, y1, x2, y2;\n\t\tscanf(\"%d%d%d%d\", &x1, &y1, &x2, &y2);\n\t\t--x1, --y1, --x2, --y2;\n\t\tint l1 = max(x1, y1), l2 = max(x2, y2);\n\t\tif (l1 > l2){\n\t\t\tswap(l1, l2);\n\t\t\tswap(x1, x2);\n\t\t\tswap(y1, y2);\n\t\t}\n\t\tif (l1 == l2){\n\t\t\tprintf(\"%d\\n\", abs(x1 - x2) + abs(y1 - y2));\n\t\t\tcontinue;\n\t\t}\n\t\tvector<long long> ndp(2);\n\t\tndp[0] = abs(x1 - d[l1][0].x) + abs(y1 - d[l1][0].y);\n\t\tndp[1] = abs(x1 - d[l1][1].x) + abs(y1 - d[l1][1].y);\n\t\tfor (int i = lg - 1; i >= 0; --i) if (l1 + (1 << i) < l2){\n\t\t\tvector<long long> tmp(2, INF64);\n\t\t\tforn(j, 2) forn(k, 2)\n\t\t\t\ttmp[k] = min(tmp[k], ndp[j] + dp[l1][i][j][k]);\n\t\t\tndp = tmp;\n\t\t\tl1 += (1 << i);\n\t\t}\n\t\tlong long ans = INF64;\n\t\tans = min(ans, ndp[0] + abs(d[l1][0].x + 1 - x2) + abs(d[l1][0].y - y2) + 1);\n\t\tans = min(ans, ndp[1] + abs(d[l1][1].x - x2) + abs(d[l1][1].y + 1 - y2) + 1);\n\t\tprintf(\"%lld\\n\", ans);\n\t}\n\treturn 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}