{"link": "https://codeforces.com//contest/1487/problem/B", "problemId": "897748", "shortId": "1487B", "contest_number": "1487", "name": "B. Cat Cycle", "statement": "Suppose you are living with two cats: A and B. There are  napping spots where both cats usually sleep.Your cats like to sleep and also like all these spots, so they change napping spot each hour cyclically:   Cat A changes its napping place in order:  In other words, at the first hour it's on the spot  and then goes in decreasing order cyclically;  Cat B changes its napping place in order:  In other words, at the first hour it's on the spot  and then goes in increasing order cyclically. The cat B is much younger, so they have a strict hierarchy: A and B don't lie together. In other words, if both cats'd like to go in spot  then the A takes this place and B moves to the next place in its order (if  then to , but if  then to ). Cat B follows his order, so .Calculate, where cat B will be at hour ?", "input": "The first line contains a single integer  ()\u00a0\u2014 the number of test cases. The first and only line of each test case contains two integers  and  (; )\u00a0\u2014 the number of spots and hour .", "output": "For each test case, print one integer\u00a0\u2014 the index of the spot where cat B will sleep at hour .", "tutorial": "If  is even, then each hour A and B are on the spots with different parity, so they will never meet. Otherwise, let's look closely what happens.At the start, A in  and B in . But since we can form a cycle from spots then it means that  and  in reality are neighbors. After that, A and B (starting from neighboring positions) just go in opposite directions and meet each other in the opposite spot after exactly  steps.After meeting B \"jumps over\" A making  extra step and the situation become practically the same: A and B are neighbors and move in the opposite direction.In other words, each  steps B makes one extra step, so the answer (if both  and spots are -indexed) is ", "solution": "fun main() {\n    repeat(readLine()!!.toInt()) {\n        var (n, k) = readLine()!!.split(' ').map { it.toInt() }\n        k--\n        val floor = n / 2\n        println((k + (n % 2) * k / floor) % n + 1)\n    }\n}", "interactive": false, "noSolution": false, "noTutorial": false}