{"link": "https://codeforces.com//contest/1251/problem/E2", "problemId": "449549", "shortId": "1251E2", "contest_number": "1251", "name": "E2. Voting  Hard Version ", "statement": "Now elections are held in Berland and you want to win them. More precisely, you want everyone to vote for you.There are  voters, and two ways to convince each of them to vote for you. The first way to convince the -th voter is to pay him  coins. The second way is to make  other voters vote for you, and the -th voter will vote for free.Moreover, the process of such voting takes place in several steps. For example, if there are five voters with , , , , , then you can buy the vote of the fifth voter, and eventually everyone will vote for you. Set of people voting for you will change as follows: .Calculate the minimum number of coins you have to spend so that everyone votes for you.", "input": "The first line contains one integer  () \u2014 the number of test cases. The first line of each test case contains one integer  () \u2014 the number of voters. The next  lines contains the description of voters. -th line contains two integers  and  (). It is guaranteed that the sum of all  over all test cases does not exceed .", "output": "For each test case print one integer \u2014 the minimum number of coins you have to spend so that everyone votes for you.", "tutorial": "Denote the number of voters with  as . Also denote , i.e.  is equal to number of voters with .Let's group all voters by value . We'll consider all these group in decreasing value of . Assume that now we consider group with . Then there are two cases:  if  then all these voters will vote for you for free.  is equal to the number of votes bought in previous steps;  if  then we have to buy  additional votes. Moreover the value  of this \"bought\" voter must be greater than or equal to . Since these voters indistinguishable we have to buy  cheapest voter (with a minimal value of ). So, all we have to do it maintain values  not yet bought voters in some data structure (for example  in ).", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int N = int(3e5) + 99;\n\nint t, n;\nvector <int> v[N];\n\nint main() {\t\n\tint t;\n\tscanf(\"%d\", &t);\n\tfor(int tc = 0; tc < t; ++tc){\n\t\tscanf(\"%d\", &n);\n\t\tfor(int i = 0; i < n; ++i)\n\t\t\tv[i].clear();\n\t\tfor(int i = 0; i < n; ++i){\n\t\t\tint x, s;\n\t\t\tscanf(\"%d %d\", &x, &s);\n\t\t\tv[x].push_back(s);\n\t\t}\t\t\n\t\t\n\t\tmultiset <int > q;\n\t\tlong long res = 0;\n\t\tint pref = n;\n\t\tint cnt = 0;\n\t\tfor(int i = n - 1; i >= 0; --i){\n\t\t\tpref -= v[i].size();\n\t\t\tint need = i - pref;\n\t\t\tfor(auto x : v[i]) q.insert(x);\n\n\t\t\twhile(cnt < need){\n\t\t\t\t++cnt;\n\t\t\t\tres += *q.begin();\t\t\t\t\n\t\t\t\tq.erase(q.begin());\n\t\t\t}\n\t\t}\t\t\n\n        \tprintf(\"%lld\\n\", res);\n        }\n\treturn 0;\n}                             \t", "interactive": false, "noSolution": false, "noTutorial": false}