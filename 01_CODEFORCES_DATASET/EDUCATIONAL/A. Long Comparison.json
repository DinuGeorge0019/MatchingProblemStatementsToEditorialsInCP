{"link": "https://codeforces.com//contest/1613/problem/A", "problemId": "1209361", "shortId": "1613A", "contest_number": "1613", "name": "A. Long Comparison", "statement": "Monocarp wrote down two numbers on a whiteboard. Both numbers follow a specific format: a positive integer  with  zeros appended to its end.Now Monocarp asks you to compare these two numbers. Can you help him?", "input": "The first line contains a single integer  ()\u00a0\u2014 the number of testcases. The first line of each testcase contains two integers  and  ()\u00a0\u2014 the description of the first number. The second line of each testcase contains two integers  and  ()\u00a0\u2014 the description of the second number.", "output": "For each testcase print the result of the comparison of the given two numbers. If the first number is smaller than the second one, print '<'. If the first number is greater than the second one, print '>'. If they are equal, print '='.", "tutorial": "First, let's say that appending the number with  zeros is the same as multiplying it by .The given numbers are so large that they can't fit into any reasonable integer type. Even if you use a language with unlimited length integers (python, for example) or store the numbers in strings, you should still face the time limit issue. So let's learn to shrink the numbers a bit.Note that the result of the comparison of two numbers doesn't change if you divide both numbers by the same positive number. So we can keep dividing both numbers by  until one of them is not divisible anymore. Let's also ignore the trailing zeros in  and  and leave them as is. If the first number is appended with  zeros and the second numbers is appended with  zeros, we can subtract  from both values, effectively dividing both numbers by .This way, one of the numbers becomes short enough to fit into an integer type (because it has  and  is only up to ). The other number might still be large enough.However, if it's really large, we can instantly say that it's larger than another one. Say, if its  is at least . This number it at least  and the other number is at most .Otherwise, we can calculate this number as well and compare the values normally.Overall complexity:  per testcase.", "solution": "#include <bits/stdc++.h>\n \nusing namespace std;\n \nint main(){\n\tint t;\n\tcin >> t;\n\twhile (t--){\n\t\tlong long x1, x2;\n\t\tint p1, p2;\n\t\tcin >> x1 >> p1 >> x2 >> p2;\n\t\tint mn = min(p1, p2);\n\t\tp1 -= mn;\n\t\tp2 -= mn;\n\t\tif (p1 >= 7)\n\t\t\tcout << \">\" << endl;\n\t\telse if (p2 >= 7)\n\t\t\tcout << \"<\" << endl;\n\t\telse{\n\t\t\tfor (int i = 0; i < p1; ++i) x1 *= 10;\n\t\t\tfor (int i = 0; i < p2; ++i) x2 *= 10;\n\t\t\tif (x1 < x2)\n\t\t\t\tcout << \"<\" << endl;\n\t\t\telse if (x1 > x2)\n\t\t\t\tcout << \">\" << endl;\n\t\t\telse\n\t\t\t\tcout << \"=\" << endl;\n\t\t}\n\t}\n}", "interactive": false, "noSolution": false, "noTutorial": false}