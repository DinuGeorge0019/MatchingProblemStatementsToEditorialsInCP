{"link": "https://codeforces.com//contest/1657/problem/B", "problemId": "1339152", "shortId": "1657B", "contest_number": "1657", "name": "B. XY Sequence", "statement": "You are given four integers , ,  and . You should build a sequence  where  and for each  you can choose:   either   or . Your goal is to build such a sequence  that  for all  and  is maximum possible.", "input": "The first line contains a single integer  ()\u00a0\u2014 the number of test cases. Next  cases follow. The first and only line of each test case contains four integers , ,  and  (; ). It's guaranteed that the total sum of  doesn't exceed .", "output": "For each test case, print one integer\u00a0\u2014 the maximum possible .", "tutorial": "Strategy is quite easy: we go from  to  and if  we take this variant (we set ); otherwise we set . Note that all  are in range  so there won't be any overflow/underflow.It's also not hard to prove that this strategy maximizes the sum. By contradiction: suppose the optimal answer has some index  where  but . Let's find first position  where  and swap operations between  and . As a result, , all  from  were increased while  remained the same, i.\u00a0e. there is no violation of the rules and the total sum increased\u00a0\u2014 contradiction.", "solution": "fun main() {\n    repeat(readLine()!!.toInt()) {\n        val (n, B, x, y) = readLine()!!.split(' ').map { it.toInt() }\n        var cur = 0L\n        var ans = 0L\n        for (i in 1..n) {\n            cur += if (cur + x <= B) x else -y\n            ans += cur\n        }\n        println(ans)\n    }\n}", "interactive": false, "noSolution": false, "noTutorial": false}