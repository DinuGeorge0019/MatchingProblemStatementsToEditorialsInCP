{"link": "https://codeforces.com//contest/1257/problem/C", "problemId": "470638", "shortId": "1257C", "contest_number": "1257", "name": "C. Dominated Subarray", "statement": "Let's call an array   by value  in the next situation.At first, array  should have at least  elements. Now, let's calculate number of occurrences of each number  in  and define it as . Then  is dominated (by ) if (and only if)  for any other number . For example, arrays ,  and  are dominated (by ,  and  respectevitely) but arrays ,  and  are not.Small remark: since any array can be dominated only by one number, we can not specify this number and just say that array is either dominated or not.You are given array . Calculate its shortest dominated subarray or say that there are no such subarrays.The subarray of  is a contiguous part of the array , i.\u2009e. the array  for some .", "input": "The first line contains single integer  () \u2014 the number of test cases. Each test case consists of two lines. The first line contains single integer  () \u2014 the length of the array . The second line contains  integers  () \u2014 the corresponding values of the array . It's guaranteed that the total length of all arrays in one test doesn't exceed .", "output": "Print  integers \u2014 one per test case. For each test case print the only integer \u2014 the length of the shortest dominated subarray, or  if there are no such subarrays.", "tutorial": "At first, let's prove that the shortest dominated subarray has pattern like  with  and dominated by value . Otherwise, we can decrease its length by erasing an element from one of its ends which isn't equal to  and it'd still be dominated.Now we should go over all pairs of the same numbers and check its subarrays... Or not? Let's look closely at the pattern: if  and all  are pairwise distinct then the pattern is dominated subarray itself. Otherwise, we can find in our pattern other shorter pattern and either the found pattern is dominated or it has the pattern inside it and so on.What does it mean? It means that the answer is just the shortest pattern we can find. And all we need to find is the shortest subarray with the same first and last elements or just distance between two consecutive occurrences of each number. We can do it by iterating over current position  and keeping track of the last occurrence of each number in some array . Then the current distance is .The total complexity is .", "solution": "#include<bits/stdc++.h>\nusing namespace std;\n\n#define sz(a) int((a).size())\n\nint n;\nvector<int> a;\n\ninline bool read() {\n\tif(!(cin >> n))\n\t\treturn false;\n\ta.resize(n);\n\tfor(int i = 0; i < n; i++)\n\t\tcin >> a[i];\n\treturn true;\n}\n\ninline void solve() {\n\tint ans = n + 5;\n\tvector<int> lst(n + 1, -1);\n\tfor(int i = 0; i < n; i++) {\n\t\tif(lst[a[i]] != -1)\n\t\t\tans = min(ans, i - lst[a[i]] + 1);\n\t\tlst[a[i]] = i;\n\t}\n\tif(ans > n)\n\t\tans = -1;\n\tcout << ans << endl;\n}\n\nint main() {\n#ifdef _DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin);\n#endif\n\tios_base::sync_with_stdio(false);\n\tcin.tie(0), cout.tie(0);\n\tcout << fixed << setprecision(15);\n\t\n\tint tc; cin >> tc;\n\twhile(tc--) {\n\t\tassert(read());\n\t\tsolve();\n\t}\n\treturn 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}