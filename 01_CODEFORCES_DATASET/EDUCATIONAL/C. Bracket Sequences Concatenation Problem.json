{"link": "https://codeforces.com//contest/990/problem/C", "problemId": "188992", "shortId": "990C", "contest_number": "990", "name": "C. Bracket Sequences Concatenation Problem", "statement": "A bracket sequence is a string containing only characters \"(\" and \")\".A regular bracket sequence is a bracket sequence that can be transformed into a correct arithmetic expression by inserting characters \"1\" and \"+\" between the original characters of the sequence. For example, bracket sequences \"()()\", \"(())\" are regular (the resulting expressions are: \"(1)+(1)\", \"((1+1)+1)\"), and \")(\" and \"(\" are not.You are given  bracket sequences . Calculate the number of pairs  such that the bracket sequence  is a regular bracket sequence. Operation  means concatenation i.e. \"()(\" + \")()\" = \"()()()\".If  and  are regular bracket sequences and , then both pairs  and  must be counted in the answer. Also, if  is a regular bracket sequence, the pair  must be counted in the answer.", "input": "The first line contains one integer  \u2014 the number of bracket sequences. The following  lines contain bracket sequences \u2014  strings consisting only of characters \"(\" and \")\". The sum of lengths of all bracket sequences does not exceed .", "output": "In the single line print a single integer \u2014 the number of pairs  such that the bracket sequence  is a regular bracket sequence.", "tutorial": "Let  be the mirror reflection of the string . For example: (\"((\") = \"))\", (\"))(\") = \")((\", (\"()\") = \"()\".Let string be good if it does not have a prefix, which have more closing brackets than opening ones. For example, \"((\", \"(())(\", \"()()\" are good, and \"())\", \")((\", \"()())\" are not.The balance  of the string  is the difference between number of opening and closing brackets in . For example, (\"(()\") = 1, (\"()\") = 0.Let  be the number of good strings with a balance .The answer to the problem is .", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int N = int(3e5) + 7;\n\nint n;\nstring s[N];\nchar buf[N];\nint cnt[N];\n\nint getBalance(string &s){\n\tint bal = 0;\n\tfor(int i = 0; i < s.size(); ++i){\n\t\tif(s[i] == '(')\n\t\t\t++bal;\n\t\telse\n\t\t\t--bal;\n\t\t\n\t\tif(bal < 0)\n\t\t\treturn -1;\n\t}\n\t\n\treturn bal;\n}\n\nstring rev(string &s){\n\tstring revs = s;\n\treverse(revs.begin(), revs.end());\n\tfor(int i = 0; i < revs.size(); ++i)\n\t\tif(revs[i] == '(')\n\t\t\trevs[i] = ')';\n\t\telse\n\t\t\trevs[i] = '(';\n\t\t\n\treturn revs;\n}\n\nint main(){\n\tscanf(\"%d\", &n);\n\tfor(int i = 0; i < n; ++i){\n\t\tscanf(\"%s\", buf);\n\t\ts[i] = buf;\n\t}\n\n\tfor(int i = 0; i < n; ++i){\n\t\tint bal = getBalance(s[i]);\n\t\tif(bal != -1)\n\t\t\t++cnt[bal];\n\t}\n\t\n\tlong long res = 0;\t\n\tfor(int i = 0; i < n; ++i){\n\t\ts[i] = rev(s[i]);\n\t\tint bal = getBalance(s[i]);\n\t\tif(bal != -1)\n\t\t\tres += cnt[bal];\n\t}\n\t\n\tprintf(\"%I64d\\n\", res);\n\treturn 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}