{"link": "https://codeforces.com//contest/1327/problem/C", "problemId": "571326", "shortId": "1327C", "contest_number": "1327", "name": "C. Game with Chips", "statement": "Petya has a rectangular Board of size . Initially,  chips are placed on the board, -th chip is located in the cell at the intersection of -th row and -th column.In one action, Petya can move  to the left, right, down or up by  cell.If the chip was in the  cell, then after the operation:   left, its coordinates will be ;  right, its coordinates will be ;  down, its coordinates will be ;  up, its coordinates will be . If the chip is located by the wall of the board, and the action chosen by Petya moves it towards the wall, then the chip remains in its current position.For each chip, Petya chose the position which it should visit. Note that it's not necessary for a chip to end up in this position.Since Petya does not have a lot of free time, he is ready to do no more than  actions.You have to find out what actions Petya should do so that each chip visits the position that Petya selected for it at least once. Or determine that it is not possible to do this in  actions.", "input": "The first line contains three integers  () \u2014 the number of rows and columns of the board and the number of chips, respectively. The next  lines contains two integers each  () \u2014 the starting position of the -th chip. The next  lines contains two integers each  () \u2014 the position that the -chip should visit at least once.", "output": "In the first line print the number of operations so that each chip visits the position that Petya selected for it at least once. In the second line output the sequence of operations. To indicate operations left, right, down, and up, use the characters  respectively. If the required sequence does not exist, print  in the single line.", "tutorial": "Note that  is a fairly large number of operations. Therefore, we can first collect all the chips in one cell, and then go around the entire board.Let's calculate the required number of operations.First, let's collect all the chips in the  cell. To do this, let's do  operations  so that all the chips are in the first row, then do  operations . After such operations, wherever the chip is initially located, it will end up in the  cell.After that, we need to go around the entire board. Let's do it in such a way that the rows with odd numbers are be bypassed from left to right, and the even ones \u2014 from right to left. We also need  operations  to move from one row to the next one.In total, we got  operations, which is completely suitable for us.", "solution": "n, m, _ = map(int, input().split())\n\nprint(2 * (n - 1) + (n + 1) * (m - 1))\nprint(\"U\" * (n - 1) + \"L\" * (m - 1), end=\"\")\nfor i in range(n):\n    if i != 0:\n        print(\"D\", end=\"\")\n    if i % 2 == 0:\n        print(\"R\" * (m - 1), end=\"\")\n    else:\n        print(\"L\" * (m - 1), end=\"\")", "interactive": false, "noSolution": false, "noTutorial": false}