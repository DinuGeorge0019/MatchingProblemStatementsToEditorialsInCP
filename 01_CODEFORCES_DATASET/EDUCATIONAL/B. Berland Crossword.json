{"link": "https://codeforces.com//contest/1494/problem/B", "problemId": "913251", "shortId": "1494B", "contest_number": "1494", "name": "B. Berland Crossword", "statement": "Berland crossword is a puzzle that is solved on a square grid with  rows and  columns. Initially all the cells are white.To solve the puzzle one has to color some cells on the border of the grid black in such a way that:   exactly  cells in the top row are black;  exactly  cells in the rightmost column are black;  exactly  cells in the bottom row are black;  exactly  cells in the leftmost column are black. Note that you can color zero cells black and leave every cell white.Your task is to check if there exists a solution to the given puzzle.", "input": "The first line contains a single integer  ()\u00a0\u2014 the number of testcases. Then the descriptions of  testcases follow. The only line of each testcase contains  integers  (; ).", "output": "For each testcase print \"\" if the solution exists and \"\" otherwise. You may print every letter in any case you want (so, for example, the strings , ,  and  are all recognized as positive answer).", "tutorial": "Consider some corner of the picture. If it's colored black, then it contributes to counts to both of the adjacent sides. Otherwise, it contributes to none. All the remaining cells can contribute only to the side they are on. There are  of such cells on each side.So let's try all  options of coloring the corners. After fixing the colors of the corners, we can calculate the number of cells that have to be colored on each side. That is calculated by taking the initial requirement and subtracting the adjacent colored corners from it. If any of the numbers is below  or above  then that corner coloring doesn't work. Otherwise, you can always color the cells in some way.Overall complexity:  per testcase.", "solution": "for _ in range(int(input())):\n    n, U, R, D, L = map(int, input().split())\n    for mask in range(16):\n        rU, rR, rD, rL = U, R, D, L\n        if mask & 1:\n            rU -= 1\n            rL -= 1\n        if mask & 2:\n            rL -= 1\n            rD -= 1\n        if mask & 4:\n            rD -= 1\n            rR -= 1\n        if mask & 8:\n            rR -= 1\n            rU -= 1\n        if min(rU, rR, rD, rL) >= 0 and max(rU, rR, rD, rL) <= n - 2:\n            print(\"YES\")\n            break\n    else:\n        print(\"NO\")", "interactive": false, "noSolution": false, "noTutorial": false}