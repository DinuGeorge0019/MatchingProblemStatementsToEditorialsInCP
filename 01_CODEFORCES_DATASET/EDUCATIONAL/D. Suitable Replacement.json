{"link": "https://codeforces.com//contest/825/problem/D", "problemId": "114547", "shortId": "825D", "contest_number": "825", "name": "D. Suitable Replacement", "statement": "You are given two strings  and  consisting of small Latin letters, string  can also contain  characters.  of string  is calculated by following metric:Any two letters can be swapped positions, these operations can be performed arbitrary number of times over any pair of positions. Among all resulting strings , you choose the one with the largest number of  occurrences of string .  is this number of occurrences.You should replace all  characters with small Latin letters in such a way that the  of string  is maximal.", "input": "The first line contains string  (). The second line contains string  ().", "output": "Print string  with  replaced with small Latin letters in such a way that  of that string is maximal. If there are multiple strings with maximal  then print any of them.", "tutorial": "Notice that the order of letters doesn't matter at all,  depends only on amount of each letter.Let  be the possibility that string  will occur in  at least  times after replacing all  signs and after some swaps. If  is true then  is also true. That leads to binary search over the answer.Let  be the amount of letters  in  and  \u2014 the amount of letters  in .  is the number of  signs.  is true if . If some letter appears in  less times than needed then replace some  signs with it. Answer can be restored greedily by replacing  signs with the letters needed.Overall complexity: , where  is the size of the alphabet.", "solution": "#ifdef __GNUC__\n#pragma GCC target(\"sse4,avx\")\n#endif\n#include <immintrin.h>\n#include <algorithm>\n#include <string>\n#include <iostream>\n#include <vector>\n#include <cstdint>\n#include <numeric>\n#include <array>\n\nvoid run(std::istream &in, std::ostream &out) {\n    std::string s, t;\n    in >> s >> t;\n    std::array<int, 26> statT = {};\n    for (char c : t) {\n        statT[c - 'a']++;\n    }\n    std::array<int, 26> statS = {};\n    int empty = 0;\n    for (char c : s) {\n        if (c == '?') {\n            empty++;\n        } else {\n            statS[c - 'a']++;\n        }\n    }\n    int k;\n    for (k = 1; ; k++) {\n        int res = 0;\n        for (int i = 0; i < 26; i++) {\n            res += std::max(statT[i] * k - statS[i], 0);\n        }\n        if (res > empty) {\n            k--;\n            break;\n        }\n    }\n    std::string res;\n    for (int i = 0; i < 26; i++) {\n        int d = std::max(statT[i] * k - statS[i], 0);\n        res.append(d, 'a' + i);\n    }\n    size_t pos = 0;\n    for (char& c : s) {\n        if (c == '?') {\n            if (pos < res.size()) {\n                c = res[pos];\n                pos++;\n            } else {\n                c = 'a';\n            }\n        }\n    }\n    out << s << std::endl;\n}\n\nint main() {\n  std::cin.sync_with_stdio(false);\n  std::cin.tie(nullptr);\n  run(std::cin, std::cout);\n  return 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}