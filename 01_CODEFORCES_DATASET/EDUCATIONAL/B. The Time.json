{"link": "https://codeforces.com//contest/622/problem/B", "problemId": "47916", "shortId": "622B", "contest_number": "622", "name": "B. The Time", "statement": "You are given the current time in -hour format . Find and print the time after  minutes.Note that you should find only the time after  minutes, see the examples to clarify the problem statement.You can read more about -hour format here https://en.wikipedia.org/wiki/24-hour_clock.", "input": "The first line contains the current time in the format  (). The hours and the minutes are given with two digits (the hours or the minutes less than  are given with the leading zeroes). The second line contains integer  () \u2014 the number of the minutes passed.", "output": "The only line should contain the time after  minutes in the format described in the input. Note that you should print exactly two digits for the hours and the minutes (add leading zeroes to the numbers if needed). See the examples to check the input/output format.", "tutorial": "In this problem we can simply increase  times the current time by one minute (after each increasing we should check the hours and the minutes for overflow).\nAnother solution is to use the next formulas as the answer: .\n", "solution": "\n            #include <bits/stdc++.h>\n\u00a0\n#define forn(i, n) for (int i = 0; i < int(n); i++)\n#define ford(i, n) for (int i = int(n) - 1; i >= 0; i--)\n#define fore(i, l, r) for (int i = int(l); i < int(r); i++)\n#define correct(x, y, n, m) (0 <= (x) && (x) < (n) && 0 <= (y) && (y) < (m))\n#define all(a) (a).begin(), (a).end()\n#define sz(a) int((a).size())\n#define pb(a) push_back(a)\n#define mp(x, y) make_pair((x), (y))\n#define x first\n#define y second\n\u00a0\nusing namespace std;\n\u00a0\ntypedef long long li;\ntypedef long double ld;\ntypedef pair<int, int> pt;\n\u00a0\ntemplate<typename X> inline X abs(const X& a) { return a < 0? -a: a; }\ntemplate<typename X> inline X sqr(const X& a) { return a * a; }\n\u00a0\nconst int INF = int(1e9);\nconst li INF64 = li(1e18);\nconst ld EPS = 1e-9, PI = 3.1415926535897932384626433832795;\n\u00a0\nint h, m;\nint add;\n\u00a0\ninline bool read() {\n\u00a0 \u00a0 if (scanf(\"%d:%d%d\", &h, &m, &add) != 3) return false;\n\u00a0 \u00a0 return true;\n}\n\u00a0\ninline void solve() {\n\u00a0 \u00a0 while (add) {\n\u00a0 \u00a0 \u00a0 \u00a0 if (++m == 60) {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 m = 0;\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (++h == 24) h = 0;\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 \u00a0 \u00a0 add--;\n\u00a0 \u00a0 }\n\u00a0 \u00a0 printf(\"%02d:%02d\\n\", h, m);\n}\n\u00a0\nint main() {\n#ifdef SU1\n\u00a0 \u00a0 assert(freopen(\"input.txt\", \"rt\", stdin));\n\u00a0 \u00a0 //assert(freopen(\"output.txt\", \"wt\", stdout));\n#endif\n\u00a0 \u00a0 \n\u00a0 \u00a0 cout << setprecision(10) << fixed;\n\u00a0 \u00a0 cerr << setprecision(5) << fixed;\n\u00a0\n\u00a0 \u00a0 while (read()) {\n\u00a0 \u00a0 \u00a0 \u00a0 solve();\n\u00a0 \u00a0 \u00a0 \u00a0 //break;\n\u00a0 \u00a0 }\n\u00a0 \u00a0 \n\u00a0 \u00a0 return 0;\n}\n        ", "interactive": false, "noSolution": false, "noTutorial": false}