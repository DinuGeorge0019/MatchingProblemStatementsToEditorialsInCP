{"link": "https://codeforces.com//contest/1555/problem/B", "problemId": "1062141", "shortId": "1555B", "contest_number": "1555", "name": "B. Two Tables", "statement": "You have an axis-aligned rectangle room with width  and height , so the lower left corner is in point  and the upper right corner is in .There is a rectangular table standing in this room. The sides of the table are parallel to the walls, the lower left corner is in , and the upper right corner in .You want to place another rectangular table in this room with width  and height  with the width of the table parallel to the width of the room.The problem is that sometimes there is not enough space to place the second table without intersecting with the first one (there are no problems with tables touching, though).You  any of the tables, but you can move the first table inside the room.    What is the minimum distance you should move the first table to free enough space for the second one?", "input": "The first line contains the single integer  ()\u00a0\u2014 the number of the test cases. The first line of each test case contains two integers  and  ()\u00a0\u2014 the width and the height of the room. The second line contains four integers , ,  and  (; )\u00a0\u2014 the coordinates of the corners of the first table. The third line contains two integers  and  (; )\u00a0\u2014 the width and the height of the second table.", "output": "For each test case, print the minimum distance you should move the first table, or  if there is no way to free enough space for the second table. Your answer will be considered correct if its absolute or relative error doesn't exceed .", "tutorial": "Firstly, let's notice the next property: if two axis-aligned rectangles don't intersect, then we can draw a vertical or horizontal line between them. In other words, either $$$\\max(x_1, x_2) \\le \\min(x_3, x_4)$$$ or $$$\\max(x_3, x_4) \\le \\min(x_1, x_2)$$$ if $$$x_1$$$ and $$$x_2$$$ are coordinates of the one rectangle and $$$x_3$$$ and $$$x_4$$$ of the other one (analogically, for $$$y$$$ coordinates).Now, suppose you want to move the first table by $$$(dx, dy)$$$. Note that if in result they will be divided by vertical line then we can set $$$dy = 0$$$\u00a0\u2014 they still will be divided, but the total distance will decrease. Analogically, if divided by horizontal line, we can set $$$dx = 0$$$.In other words, it's always optimal to move the table either horizontally or vertically.Let's look at the case of horizontal move: at first, we need to check that both tables can fit in the room, or their total width $$$w + (x_2 - x_1) \\le W$$$. If yes, then we calculate the movement distance $$$dx$$$ as follows: if we move the table right then there should be at least $$$w$$$ to the left of it, or $$$w \\le x_1 + dx$$$ $$$\\Leftrightarrow$$$ $$$dx \\ge w - x_1$$$. Since we want to minimize $$$dx$$$ then we take $$$dx = \\max(0, w - x_1)$$$.If we want to move the table left, then there should be at least $$$w$$$ to the right, or $$$x_2 - dx \\le W - w$$$ $$$\\Leftrightarrow$$$ $$$dx \\ge x_2 - (W - w)$$$, minimizing $$$dx$$$ means taking $$$dx = \\max(0, x_2 - (W - w))$$$. So, the result is $$$\\min(\\max(0, w - x_1), \\max(0, x_2 - (W - w)))$$$.The vertical case can be handled in the same manner, if $$$h + (y_2 - y_1) \\le H$$$ then the result is $$$\\min(\\max(0, h - y_1), \\max(0, y_2 - (H - h)))$$$.The answer is the minimum among all possible variants, or $$$-1$$$ if both cases are impossible.", "solution": "#include<bits/stdc++.h>\n\nusing namespace std;\n\n#define fore(i, l, r) for(int i = int(l); i < int(r); i++)\n#define sz(a) int((a).size())\n\n#define x first\n#define y second\n\ntypedef long long li;\ntypedef pair<int, int> pt;\n\nconst int INF = int(1e9);\n\nint W, H;\nint x1, y1, x2, y2;\nint w, h;\n\ninline bool read() {\n\tif(!(cin >> W >> H))\n\t\treturn false;\n\tcin >> x1 >> y1 >> x2 >> y2;\n\tcin >> w >> h;\n\treturn true;\n}\n\ninline void solve() {\n\tint ans = INF;\n\tif (x2 - x1 + w <= W) {\n\t\tans = min(ans, max(0, w - x1));\n\t\tans = min(ans, max(0, x2 - (W - w)));\n\t}\n\tif (y2 - y1 + h <= H) {\n\t\tans = min(ans, max(0, h - y1));\n\t\tans = min(ans, max(0, y2 - (H - h)));\n\t}\n\tif (ans == INF)\n\t\tcout << -1 << endl;\n\telse\n\t\tcout << double(ans) << endl;\n}\n\nint main() {\n#ifdef _DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin);\n#endif\t\n\tcout << fixed << setprecision(9);\n\tint t; cin >> t;\n\twhile(t--) {\n\t\t(read());\n\t\tsolve();\n\t}\n\treturn 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}