{"link": "https://codeforces.com//contest/1476/problem/B", "problemId": "881703", "shortId": "1476B", "contest_number": "1476", "name": "B. Inflation", "statement": "You have a statistic of price changes for one product represented as an array of  positive integers , where  is the initial price of the product and  is how the price was increased during the -th month.Using these price changes you are asked to calculate the inflation coefficients for each month as the ratio of current price increase  to the price at the start of this month .Your boss said you clearly that the inflation coefficients must not exceed  %, so you decided to  some values  in such a way, that all  remain integers and the inflation coefficients for each month don't exceed  %.You know, that the bigger changes\u00a0\u2014 the more obvious cheating. That's why you need to minimize the total sum of changes.What's the minimum total sum of changes you need to make all inflation coefficients not more than  %?", "input": "The first line contains a single integer  ()\u00a0\u2014 the number of test cases. The first line of each test case contains two integers  and  (; )\u00a0\u2014 the length of array  and coefficient . The second line of each test case contains  integers  ()\u00a0\u2014 the array .", "output": "For each test case, print the minimum total sum of changes you need to make all inflation coefficients not more than  %.", "tutorial": "Suppose we decided to increase some  by . How does it affect all inflation coefficients? Let's the -th inflation coefficient be . We now that .If , then  doesn't change. If  then it's denominator increases by  and  decreases. If  then it's numerator increases and  increases as well.But, if we increase  instead of  then all decreased  will decrease as well and also  will decrease. Finally, if we increase  then all  decrease and there is no  that increases\u00a0\u2014 so it's always optimal to increase only .Now we need to calculate what is minimum  we should add to . There are two ways: we can either binary search this value  knowing that  is always enough. Then we just need to check that all  (that is equivalent to checking that ).Or we can note that each  and we need to make  or that  or . Since we should fulfill all conditions then we should take  as maximum over all fractions.Since  is just a prefix sum, we can check condition for each  in . It total, the time complexity is either  or  per test case.", "solution": "#include<bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long li;\n\nconst int INF = int(1e9);\n\nint main() {\n  int t; cin >> t;\n  while(t--) {\n    int n, k;\n    cin >> n >> k;\n    vector<int> p(n);\n    for (int i = 0; i < n; i++)\n      cin >> p[i];\n    \n    li x = 0;\n    li pSum = p[0];\n    for (int i = 1; i < n; i++) {\n      x = max(x, (100ll * p[i] - k * pSum + k - 1) / k);\n      pSum += p[i];\n    }\n    cout << x << endl;\n  }\n  return 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}