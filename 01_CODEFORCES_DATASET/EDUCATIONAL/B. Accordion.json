{"link": "https://codeforces.com//contest/1101/problem/B", "problemId": "281055", "shortId": "1101B", "contest_number": "1101", "name": "B. Accordion", "statement": "An  is a string (yes, in the real world accordions are musical instruments, but let's forget about it for a while) which can be represented as a concatenation of: an opening bracket (ASCII code ), a colon (ASCII code ), some (possibly zero) vertical line characters (ASCII code ), another colon, and a closing bracket (ASCII code ). The length of the accordion is the number of characters in it.For example, ,  and  are accordions having length ,  and . , , ,  are not accordions. You are given a string . You want to transform it into an accordion by removing some (possibly zero) characters from it. Note that you may not insert new characters or reorder existing ones. Is it possible to obtain an accordion by removing characters from , and if so, what is the maximum possible length of the result?", "input": "The only line contains one string  (). It consists of lowercase Latin letters and characters , ,  and .", "output": "If it is not possible to obtain an accordion by removing some characters from , print . Otherwise print maximum possible length of the resulting accordion.", "tutorial": "No cases. No any special thoughts. Just greedy.The solution consists of six steps:   Remove the prefix of the string until the position of leftmost '' character. If there is no such character, print ;  Remove the prefix of the string until the position of leftmost '' character. If there is no such character, print ;  Reverse the string;  Remove the prefix of the string until the position of leftmost '' character. If there is no such character, print ;  Remove the prefix of the string until the position of leftmost '' character. If there is no such character, print ;  Print the number of '' characters in the remaining string plus four. ", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nvoid rem(string &s, const string &c) {\n\tauto pos = s.find(c);\n\tif (pos == string::npos) {\n\t\tcout << -1 << endl;\n\t\texit(0);\n\t}\n\ts.erase(0, pos + 1);\n}\n\nint main() {\n#ifdef _DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin);\n//\tfreopen(\"output.txt\", \"w\", stdout);\n#endif\n\t\n\tstring s;\n\tcin >> s;\n\t\n\trem(s, \"[\");\n\trem(s, \":\");\n\treverse(s.begin(), s.end());\n\trem(s, \"]\");\n\trem(s, \":\");\n\t\n\tcout << count(s.begin(), s.end(), '|') + 4 << endl;\n\t\n\treturn 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}