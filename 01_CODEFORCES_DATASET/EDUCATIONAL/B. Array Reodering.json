{"link": "https://codeforces.com//contest/1535/problem/B", "problemId": "1005283", "shortId": "1535B", "contest_number": "1535", "name": "B. Array Reodering", "statement": "You are given an array  consisting of  integers.Let's call a pair of indices ,   if  and  (where  is the greatest common divisor of  and ).Find the maximum number of  index pairs if you can reorder the array  in an arbitrary way.", "input": "The first line contains a single integer  ()\u00a0\u2014 the number of test cases. The first line of the test case contains a single integer  ()\u00a0\u2014 the number of elements in the array. The second line of the test case contains  integers  (). It is guaranteed that the sum of  over all test cases does not exceed .", "output": "For each test case, output a single integer\u00a0\u2014 the maximum number of  index pairs if you can reorder the array  in an arbitrary way.", "tutorial": "If the value of  is even, then  at least , regardless of the value of . Therefore, we can put all the even values before the odd ones (it does not matter in what order). Now it remains to arrange the odd values. In fact, their order is not important, because  (for odd  and ). This means that each pair will be considered exactly  time, regardless of the order of the odd elements.", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n  int t;\n  cin >> t;\n  while (t--) {\n    int n;\n    cin >> n;\n    vector<int> a(n);\n    for (int &x : a) cin >> x;\n    sort(a.begin(), a.end(), [](int x, int y) {\n      return x % 2 < y % 2;\n    });\n    int ans = 0;\n    for (int i = 0; i < n; ++i) {\n      for (int j = i + 1; j < n; ++j) {\n        ans += __gcd(a[i], a[j] * 2) > 1;\n      }\n    }\n    cout << ans << endl;\n  }\n}\n", "interactive": false, "noSolution": false, "noTutorial": false}