{"link": "https://codeforces.com//contest/1814/problem/B", "problemId": "1867157", "shortId": "1814B", "contest_number": "1814", "name": "B. Long Legs", "statement": "A robot is placed in a cell  of an infinite grid. This robot has adjustable length legs. Initially, its legs have length .Let the robot currently be in the cell  and have legs of length . In one move, it can perform one of the following three actions:   jump into the cell ;  jump into the cell ;  increase the length of the legs by , i.\u2009e. set it to . What's the smallest number of moves robot has to make to reach a cell ?", "input": "The first line contains a single integer  ()\u00a0\u2014 the number of test cases. The only line of each test case contains two integers  and  ()\u00a0\u2014 the ending cell.", "output": "For each test case, print a single integer\u00a0\u2014 the smallest number of moves the robot is required to make to reach a cell  from a cell .", "tutorial": "Let's fix the number of leg length increases we do. Let the final length be $$$k$$$. Notice that for all $$$i$$$ from $$$1$$$ to $$$k$$$ there is some time when the length is exactly $$$i$$$. Thus, we can perform jumps of form $$$(x, y) \\rightarrow (x + i, y)$$$ or $$$(x, y) \\rightarrow (x, y + i)$$$.What's the jumping strategy, then? Obviously, we can solve the problem independently for $$$a$$$ and $$$b$$$. Consider $$$a$$$. We would love to just make jumps of length $$$k$$$ as that's the maximum possible length. Unfortunately, that only works when $$$a$$$ is divisible by $$$k$$$. Otherwise, we are left with some remainder which is smaller than $$$k$$$. But we have already figured out how to jump to any value from $$$1$$$ to $$$k$$$. So, that only adds another jump. You can say that the total number of jumps is $$$\\lceil \\frac a k \\rceil$$$.Same for $$$b$$$. Finally, for a fixed $$$k$$$, the answer is $$$\\lceil \\frac a k \\rceil + \\lceil \\frac b k \\rceil + (k - 1)$$$.The constraints tell us that we are not allowed to iterate over all $$$k$$$ from $$$1$$$ to $$$\\max(a, b)$$$. It feels like huge $$$k$$$ will never be optimal, but let's try to base our intuition on something.Try to limit the options by studying the formula. Let's simplify. Assume $$$a = b$$$ and also get rid of the ceil. Not like that changes the formula a lot. Now it becomes $$$2 \\frac a k + (k - 1)$$$. We can see that when we increase $$$k$$$, $$$2 \\frac a k$$$ becomes smaller and $$$(k - 1)$$$ becomes larger. However, we care more about how fast they become smaller and larger. You can just guess or write down the derivative explicitly and figure out that the first term shrinks faster than the second term grows until around $$$\\sqrt a \\cdot c$$$ for some constant $$$c$$$ (apparently, $$$c = \\sqrt 2$$$). Thus, their sum decreases until then, then increases.Thus, you can search for the best $$$k$$$ around $$$\\sqrt a$$$ or $$$\\sqrt b$$$ or $$$\\sqrt{\\max(a, b)}$$$. It doesn't really matter, since, for implementation, you can basically try all $$$k$$$ until around $$$10^5$$$, which is safely enough.", "solution": "for _ in range(int(input())):\n\ta, b = map(int, input().split())\n\tans = a + b\n\tfor m in range(1, 100000):\n\t\tans = min(ans, (a + m - 1) // m + (b + m - 1) // m + (m - 1))\n\tprint(ans)", "interactive": false, "noSolution": false, "noTutorial": false}