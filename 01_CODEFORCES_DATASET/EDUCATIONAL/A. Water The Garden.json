{"link": "https://codeforces.com//contest/920/problem/A", "problemId": "152861", "shortId": "920A", "contest_number": "920", "name": "A. Water The Garden", "statement": "It is winter now, and Max decided it's about time he watered the garden.The garden can be represented as  consecutive garden beds, numbered from  to .  beds contain water taps (-th tap is located in the bed ), which, if turned on, start delivering water to neighbouring beds. If the tap on the bed  is turned on, then after one second has passed, the bed  will be watered; after two seconds have passed, the beds from the segment  will be watered (if they exist); after  seconds have passed , the beds from the segment  will be watered (if they exist).   The garden from test . White colour denotes a garden bed without a tap, red colour \u2014 a garden bed with a tap.   The garden from test  after  seconds have passed after turning on the tap. White colour denotes an unwatered garden bed, blue colour \u2014 a watered bed. Max wants to , and now he wonders, what is the minimum number of seconds that have to pass after he turns on some taps until the whole garden is watered. Help him to find the answer!", "input": "The first line contains one integer  \u2014 the number of test cases to solve (). Then  test cases follow. The first line of each test case contains two integers  and  (, ) \u2014 the number of garden beds and water taps, respectively. Next line contains  integers  () \u2014 the location of -th water tap. It is guaranteed that for each  condition  holds. It is guaranteed that the sum of  over all test cases doesn't exceed . .", "output": "For each test case print one integer \u2014 the minimum number of seconds that have to pass after Max turns on some of the water taps, until the whole garden is watered.", "tutorial": "The answer is the maximal value among the following values:  (to cover all water beds within some segment),  (to cover water beds before the first tap),  (to cover all water beds after the last tap).", "solution": "#include <stdio.h>\n#include <algorithm>\n#include <assert.h>\n#include <bitset>\n#include <cmath>\n#include <complex>\n#include <deque>\n#include <functional>\n#include <iostream>\n#include <limits.h>\n#include <map>\n#include <math.h>\n#include <queue>\n#include <set>\n#include <stdlib.h>\n#include <string.h>\n#include <string>\n#include <time.h>\n#include <unordered_map>\n#include <unordered_set>\n#include <vector>\n\n#pragma warning(disable:4996)\n#pragma comment(linker, \"/STACK:336777216\")\nusing namespace std;\n\n#define mp make_pair\n#define all(x) (x).begin(), (x).end()\n#define ldb ldouble\n\ntypedef tuple<int, int, int> t3;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double db;\ntypedef long double ldb;\ntypedef pair <int, int> pii;\ntypedef pair <ll, ll> pll;\ntypedef pair <ll, int> pli;\ntypedef pair <db, db> pdd;\n\nint IT_MAX = 1 << 17;\nll MOD = 1000000007;\nconst int INF = 0x3f3f3f3f;\nconst ll LL_INF = 0x3f3f3f3f3f3f3f3f;\nconst db PI = acos(-1);\nconst db ERR = 1e-10;\n#define szz(x) (int)(x).size()\n#define rep(i, n) for(int i=0;i<n;i++)\n#define Se second\n#define Fi first\n\nbool chk[205];\nbool tchk[205];\nint main() {\n\tint T;\n\tscanf(\"%d\", &T);\n\twhile (T--) {\n\t\tint N, K, i, j;\n\t\tscanf(\"%d %d\", &N, &K);\n\n\t\tfor (i = 0; i <= N + 1; i++) chk[i] = false;\n\t\tfor (i = 1; i <= K; i++) {\n\t\t\tint t;\n\t\t\tscanf(\"%d\", &t);\n\t\t\tchk[t] = true;\n\t\t}\n\t\tfor (i = 0;; i++) {\n\t\t\tint c = 0;\n\t\t\tfor (j = 1; j <= N; j++) if (chk[j]) c++;\n\t\t\tif (c == N) break;\n\n\t\t\tfor (j = 1; j <= N; j++) tchk[j] = chk[j - 1] | chk[j] | chk[j + 1];\n\t\t\tfor (j = 1; j <= N; j++) chk[j] = tchk[j];\n\t\t}\n\t\tprintf(\"%d\\n\", i + 1);\n\t}\n\treturn 0;\n}\n//*/", "interactive": false, "noSolution": false, "noTutorial": false}