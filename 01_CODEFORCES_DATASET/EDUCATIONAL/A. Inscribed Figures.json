{"link": "https://codeforces.com//contest/1156/problem/A", "problemId": "338448", "shortId": "1156A", "contest_number": "1156", "name": "A. Inscribed Figures", "statement": "The math faculty of Berland State University has suffered the sudden drop in the math skills of enrolling students. This year the highest grade on the entrance math test was 8. Out of 100! Thus, the decision was made to make the test easier.Future students will be asked just a single question. They are given a sequence of integer numbers , each number is from  to  and  for each valid . The -th number represents a type of the -th figure:  circle;  isosceles triangle with the length of height equal to the length of base;  square. The figures of the given sequence are placed somewhere on a Cartesian plane in such a way that:  -th figure is inscribed into the -th one;  each triangle base is parallel to OX;  the triangle is oriented in such a way that the vertex opposite to its base is at the top;  each square sides are parallel to the axes;  for each  from  to  figure  has the maximum possible length of side for triangle and square and maximum radius for circle. The task is to calculate the number of  points (not necessarily with integer coordinates) where figures touch. The trick is, however, that the number is sometimes infinite. But that won't make the task difficult for you, will it?So can you pass the math test and enroll into Berland State University?", "input": "The first line contains a single integer  () \u2014 the number of figures. The second line contains  integer numbers  (, ) \u2014 types of the figures.", "output": "The first line should contain either the word \"\" if the number of distinct points where figures touch is infinite or \"\" otherwise. If the number is finite than print it in the second line. It's guaranteed that the number fits into 32-bit integer type.", "tutorial": "Firstly, let's find out when the answer is infinite.Obviously, any point of intersection is produced by at least a pair of consecutive figures. Take a look at every possible pair and you'll see that only square inscribed in triangle and vice verse produce infinite number of points in intersection. The other cases are finite.From now we assume that initial sequence has no 2 and 3 next to each other. Basically, it's all triangles and squares separated by circles.If the task was to count all pairs of intersecting figures, the solution will be the following. Square next to circle gives 4 points, triangle next to circle gives 3 points.Unfortunately, the task asked for distinct points. Notice that there is a single subsegment which can produce coinciding points (square  circle  triangle). So you have to find each triplet (3 1 2) and subtract their count from the sum.Overall complexity: .", "solution": "#include <bits/stdc++.h>\n\n#define forn(i, n) for(int i = 0; i < int(n); i++) \n\nusing namespace std;\n\nint main(){\n\tint n;\n\tscanf(\"%d\", &n);\n\tint sum = 0;\n\tint lst = 1;\n\tvector<int> figs;\n\tforn(i, n){\n\t\tint x;\n\t\tscanf(\"%d\", &x);\n\t\tif (lst != 1 && x != 1){\n\t\t\tputs(\"Infinite\");\n\t\t\treturn 0;\n\t\t}\n\t\tif (x != 1){\n\t\t\tfigs.push_back(x);\n\t\t\tsum += x + 1;\n\t\t\tif (i != 0 && i != n - 1)\n\t\t\t\tsum += x + 1;\n\t\t}\n\t\tlst = x;\n\t}\n\tforn(i, int(figs.size()) - 1) if (figs[i] == 3 && figs[i + 1] == 2)\n\t\t--sum;\n\tprintf(\"Finite\\n%d\\n\", sum);\n}", "interactive": false, "noSolution": false, "noTutorial": false}