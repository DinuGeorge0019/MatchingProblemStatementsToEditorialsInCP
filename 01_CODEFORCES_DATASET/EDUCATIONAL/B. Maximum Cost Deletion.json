{"link": "https://codeforces.com//contest/1550/problem/B", "problemId": "1045982", "shortId": "1550B", "contest_number": "1550", "name": "B. Maximum Cost Deletion", "statement": "You are given a string  of length  consisting only of the characters  and .You perform the following operation until the string becomes empty: choose some  substring of  characters, erase it from the string and glue the remaining two parts together (any of them can be empty) in the same order. For example, if you erase the substring  from the string , you will get the string . When you delete a substring of length , you get  points.Your task is to calculate the maximum number of points that you can score in total, if you have to make the given string empty.", "input": "The first line contains a single integer  ()\u00a0\u2014 the number of testcases. The first line of each testcase contains three integers ,  and  ()\u00a0\u2014 the length of the string  and the parameters  and . The second line contains the string . The string  consists only of the characters  and .", "output": "For each testcase, print a single integer\u00a0\u2014 the maximum number of points that you can score.", "tutorial": "Let  be the length of the substring deleted at the -th step. Then the number of points will be equal to  or . The sum of all  is equal to  (because in the end we deleted the entire string), so the final formula has the form . Obviously, for , you should delete the characters one by one so that . Now  and you have to delete the string in the minimum number of operations. Let the string  consist of  blocks of zeros and ones, then  is the minimum number of operations for which the entire string can be deleted. As long as the number of blocks is more than , we will delete the second block, the number of blocks will decrease by  after each such operation (the block that we delete will disappear, and the first and third blocks will merge into one).", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n  int t;\n  cin >> t;\n  while (t--) {\n    int n, a, b;\n    string s;\n    cin >> n >> a >> b >> s;\n    int m = unique(s.begin(), s.end()) - s.begin();\n    cout << n * a + max(n * b, (m / 2 + 1) * b) << '\\n'; \n  }\n}", "interactive": false, "noSolution": false, "noTutorial": false}