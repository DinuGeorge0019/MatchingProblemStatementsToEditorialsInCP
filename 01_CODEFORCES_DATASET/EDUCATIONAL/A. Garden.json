{"link": "https://codeforces.com//contest/915/problem/A", "problemId": "146468", "shortId": "915A", "contest_number": "915", "name": "A. Garden", "statement": "Luba thinks about watering her garden. The garden can be represented as a segment of length . Luba has got  buckets, the -th bucket allows her to water some continuous subsegment of garden of length   each hour. .Luba has to choose  of the buckets in order to water the garden as fast as possible (as mentioned above, each hour she will water some continuous subsegment of length  if she chooses the -th bucket). Help her to determine the minimum number of hours she has to spend watering the garden. It is guaranteed that Luba can always choose a bucket so it is possible water the garden.See the examples for better understanding.", "input": "The first line of input contains two integer numbers  and  () \u2014 the number of buckets and the length of the garden, respectively. The second line of input contains  integer numbers  () \u2014 the length of the segment that can be watered by the -th bucket in one hour. It is guaranteed that there is at least one bucket such that it is possible to water the garden in integer number of hours using only this bucket.", "output": "Print one integer number \u2014 the minimum number of hours required to water the garden.", "tutorial": "In this problem we just need to find maximum divisor of  that belongs to array . Let's call it . Then we need to print .", "solution": "#define _CRT_SECURE_NO_DEPRECATE\n#pragma comment(linker, \"/STACK:167772160000\")\n#include <iostream>\n#include <fstream>\n#include <cstdio>\n#include <stdio.h>\n#include <cstdlib>\n#include <stdlib.h>\n#include <string>\n#include <list>\n#include <fstream>\n#include <algorithm>\n#include <cmath>\n#include <map>\n#include <vector>\n#include <iomanip>\n#include <queue>\n#include <deque>\n#include <set>\n#include <stack>\n#include <sstream>\n#include <assert.h>\n#include <functional>\n#include <climits>\n#include <cstring>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<ll, ll> pll;\ntypedef pair<int, int> pii;\ntypedef pair<double, double> pdd;\n//typedef uint64_t ull;\n//typedef std::pair<long double,long double> pdd;\n#define for8(i) for( i = 1; i<=8; i++)\n#define fori(N)          for(int i = 0; i<(N); i++)\n#define forj(N)         for(int j = 0; j<(N); j++)\n#define fork(N)         for(int k = 0; k<(N); k++)\n#define forl(N)         for(int l = 0; l<(N); l++)\n#define ford(N)         for(int d = 0; d<(N); d++)\n#define fori1(N)          for(int i = 1; i<=(N); i++)\n#define forj1(N)         for(int j = 1; j<=(N); j++)\n#define fork1(N)         for(int k = 1; k<=(N); k++)\n#define ford1(N)         for(int d = 1; d<=(N); d++)\n#define PI (2*asin(1))\n#define read(n) scanf(\"%d\", &n);\n#define read2(n, m) scanf(\"%d%d\", &n, &m);\n#define readll(n) scanf(\"%I64d\", &n);\n#define mp make_pair\n\n\nint main()\n{\n\tios::sync_with_stdio(false); cin.tie(0);\n#if defined(_DEBUG) || defined(_RELEASE)\n\tfreopen(\"input.txt\", \"r\", stdin);\n\tfreopen(\"output.txt\", \"w\", stdout);\n#endif\n\tint ans = 1E9;\n\tint n, k; cin >> n >> k;\n\tfori(n) {\n\t\tint a; cin >> a;\n\t\tif (k%a != 0)continue;\n\t\tans = min(ans, k / a);\n\t}\n\tcout << ans;\n\treturn 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}