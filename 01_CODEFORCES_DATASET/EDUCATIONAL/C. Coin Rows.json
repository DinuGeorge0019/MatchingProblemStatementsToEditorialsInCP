{"link": "https://codeforces.com//contest/1555/problem/C", "problemId": "1062142", "shortId": "1555C", "contest_number": "1555", "name": "C. Coin Rows", "statement": "Alice and Bob are playing a game on a matrix, consisting of  rows and  columns. The cell in the -th row in the -th column contains  coins in it.Initially, both Alice and Bob are standing in a cell . They are going to perform a sequence of moves to reach a cell .The possible moves are:   Move right\u00a0\u2014 from some cell  to ;  Move down\u00a0\u2014 from some cell  to . First, Alice makes  until she reaches . She collects the coins in all cells she visit (including the starting cell).When Alice finishes, Bob starts his journey. He also performs the moves to reach  and collects the coins in all cells that he visited, .The score of the game is the total number of coins Bob collects.Alice wants to minimize the score. Bob wants to maximize the score. What will the score of the game be if both players play optimally?", "input": "The first line contains a single integer  ()\u00a0\u2014 the number of testcases. Then the descriptions of  testcases follow. The first line of the testcase contains a single integer  ()\u00a0\u2014 the number of columns of the matrix. The -th of the next  lines contain  integers  ()\u00a0\u2014 the number of coins in the cell in the -th row in the -th column of the matrix. The sum of  over all testcases doesn't exceed .", "output": "For each testcase print a single integer\u00a0\u2014 the score of the game if both players play optimally.", "tutorial": "First, observe that each of the players has only $$$m$$$ options for their path\u00a0\u2014 which column to go down in.Let's consider a Bob's response to a strategy chosen by Alice. The easiest way to approach that is to look at the picture of the Alice's path.  The path clearly separates the field into two independent pieces\u00a0\u2014 suffix of the first row and the prefix of the second row. Bob can't grab the coins from both of them at once. However, he can grab either of them fully. So the optimal path for him will be one of these two options.You can precalculate some prefix sums and become able to get the Bob's score given the Alice's path. Alice has $$$m$$$ possibly paths, so you can iterate over them and choose the minimum answer.However, prefix sums are not required, since you can quickly recalculate both needed sums while iterating over the Alice's column to go down in.Overall complexity: $$$O(m)$$$ per testcase.", "solution": "#include <bits/stdc++.h>\n\n#define forn(i, n) for (int i = 0; i < int(n); i++)\n\nusing namespace std;\n\nconst int INF = 2e9 + 10;\n\nint main() {\n\tint t;\n\tscanf(\"%d\", &t);\n\tforn(_, t){\n\t\tint n;\n\t\tscanf(\"%d\", &n);\n\t\tvector<vector<int>> a(2, vector<int>(n));\n\t\tforn(i, 2) forn(j, n)\n\t\t\tscanf(\"%d\", &a[i][j]);\n\t\tint ans = INF;\n\t\tint sum1 = 0, sum2 = 0;\n\t\tforn(i, n) sum1 += a[0][i];\n\t\tforn(i, n){\n\t\t\tsum1 -= a[0][i];\n\t\t\tans = min(ans, max(sum1, sum2));\n\t\t\tsum2 += a[1][i];\n\t\t}\n\t\tprintf(\"%d\\n\", ans);\n\t}\n}\n", "interactive": false, "noSolution": false, "noTutorial": false}