{"link": "https://codeforces.com//contest/1644/problem/C", "problemId": "1306304", "shortId": "1644C", "contest_number": "1644", "name": "C. Increase Subarray Sums", "statement": "You are given an array , consisting of  integers. You are also given an integer value .Let  be the maximum sum of a contiguous subarray of  after applying the following operation: add  to the elements on exactly   positions. An empty subarray should also be considered, it has sum .Note that the subarray doesn't have to include all of the increased elements.Calculate the maximum value of  for all  from  to  independently.", "input": "The first line contains a single integer  ()\u00a0\u2014 the number of testcases. The first line of the testcase contains two integers  and  (; )\u00a0\u2014 the number of elements in the array and the value to add. The second line contains  integers  (). The sum of  over all testcases doesn't exceed .", "output": "For each testcase, print  integers\u00a0\u2014 the maximum value of  for all  from  to  independently.", "tutorial": "Consider the naive solution.Iterate over . Then iterate over the segment that will have the maximum sum. Let its length be . Since  is non-negative, it's always optimal to increase the elements inside the segment. So if , then the sum of the segment increases by . Otherwise, only the elements inside the segment will affect the sum, thus, it will increase by . That can be written as .Notice that we only care about two parameters for each segment. Its length and its sum. Moreover, if there are several segments with the same length, we only care about the one with the greatest sum.Thus, the idea of the solution is the following. For each length, find the segment of this length with the greatest sum. Then calculate  in  by iterating over the length of the segment.Overall complexity:  per testcase.", "solution": "INF = 10**9\n\nfor _ in range(int(input())):\n\tn, x = map(int, input().split())\n\ta = list(map(int, input().split()))\n\tmx = [-INF for i in range(n + 1)]\n\tmx[0] = 0\n\tfor l in range(n):\n\t\ts = 0\n\t\tfor r in range(l, n):\n\t\t\ts += a[r]\n\t\t\tmx[r - l + 1] = max(mx[r - l + 1], s)\n\tans = [0 for i in range(n + 1)]\n\tfor k in range(n + 1):\n\t\tbst = 0\n\t\tfor i in range(n + 1):\n\t\t\tbst = max(bst, mx[i] + min(k, i) * x)\n\t\tans[k] = bst\n\tprint(\" \".join([str(x) for x in ans]))", "interactive": false, "noSolution": false, "noTutorial": false}