{"link": "https://codeforces.com//contest/620/problem/B", "problemId": "45928", "shortId": "620B", "contest_number": "620", "name": "B. Grandfather Dovlet\u2019s calculator", "statement": "Once Max found an electronic calculator from his grandfather Dovlet's chest. He noticed that the numbers were written with seven-segment indicators (https://en.wikipedia.org/wiki/Seven-segment_display).  Max starts to type all the values from  to . After typing each number Max resets the calculator. Find the total number of segments printed on the calculator.For example if  and  then at first the calculator will print  segments, then \u2014  segments and at last it will print  segments. So the total number of printed segments is .", "input": "The only line contains two integers  () \u2014 the first and the last number typed by Max.", "output": "Print the only integer  \u2014 the total number of printed segments.", "tutorial": "Let's simply iterate over all the values from  to  and add to the answer the number of segments of the current value . To count the number of segments we should iterate over all the digits of the number  and add to the answer the number of segments of the current digit . These values can be calculated by the image from the problem statement and stored in some array in code.\n", "solution": "\n            #include <bits/stdc++.h>\n\u00a0\n#define forn(i, n) for (int i = 0; i < int(n); i++)\n#define ford(i, n) for (int i = int(n) - 1; i >= 0; i--)\n#define fore(i, l, r) for (int i = int(l); i < int(r); i++)\n#define correct(x, y, n, m) (0 <= (x) && (x) < (n) && 0 <= (y) && (y) < (m))\n#define all(a) (a).begin(), (a).end()\n#define sz(a) int((a).size())\n#define pb(a) push_back(a)\n#define mp(x, y) make_pair((x), (y))\n#define x first\n#define y second\n\u00a0\nusing namespace std;\n\u00a0\ntypedef long long li;\ntypedef long double ld;\ntypedef pair<int, int> pt;\n\u00a0\ntemplate<typename X> inline X abs(const X& a) { return a < 0? -a: a; }\ntemplate<typename X> inline X sqr(const X& a) { return a * a; }\n\u00a0\nconst int INF = int(1e9);\nconst li INF64 = li(1e18);\nconst ld EPS = 1e-9, PI = 3.1415926535897932384626433832795;\n\u00a0\nint a, b;\n\u00a0\ninline bool read() {\n\u00a0 \u00a0 return !!(cin >> a >> b);\n}\n\u00a0\nint c[] = { 6, 2, 5, 5, 4, 5, 6, 3, 7, 6 };\n\u00a0\ninline void solve() {\n\u00a0 \u00a0 int ans = 0;\n\u00a0 \u00a0 fore(i, a, b + 1) {\n\u00a0 \u00a0 \u00a0 \u00a0 int x = i;\n\u00a0 \u00a0 \u00a0 \u00a0 while (x) {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ans += c[x % 10];\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 x /= 10;\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 }\n\u00a0 \u00a0 cout << ans << endl;\n}\n\u00a0\nint main() {\n#ifdef SU1\n\u00a0 \u00a0 assert(freopen(\"input.txt\", \"rt\", stdin));\n\u00a0 \u00a0 //assert(freopen(\"output.txt\", \"wt\", stdout));\n#endif\n\u00a0 \u00a0 \n\u00a0 \u00a0 cout << setprecision(10) << fixed;\n\u00a0 \u00a0 cerr << setprecision(5) << fixed;\n\u00a0\n\u00a0 \u00a0 while (read()) {\n\u00a0 \u00a0 \u00a0 \u00a0 solve();\n\u00a0 \u00a0 \u00a0 \u00a0 //break;\n\u00a0 \u00a0 }\n\u00a0 \u00a0 \n\u00a0 \u00a0 return 0;\n}\n        ", "interactive": false, "noSolution": false, "noTutorial": false}