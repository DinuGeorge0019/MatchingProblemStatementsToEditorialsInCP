{"link": "https://codeforces.com//contest/911/problem/A", "problemId": "142495", "shortId": "911A", "contest_number": "911", "name": "A. Nearest Minimums", "statement": "You are given an array of  integer numbers . Find the distance between two closest (nearest) minimums in it. It is guaranteed that in the array a minimum occurs at least two times.", "input": "The first line contains positive integer  () \u2014 size of the given array. The second line contains  integers  () \u2014 elements of the array. It is guaranteed that in the array a minimum occurs at least two times.", "output": "Print the only number \u2014 distance between two nearest minimums in the array.", "tutorial": "This task can be done by one array traversal. Maintain  \u2014 current minimum value,  \u2014 position of the last occurrence of ,  \u2014 current minumum distance between two occurrences of . Now for each  if  then do , , . For  do , . In the end  will be the global minimum of array and  will keep the closest its occurrences.Overall complexity: .", "solution": "#include <bits/stdc++.h>\n#ifndef ONLINE_JUDGE\n# include <sys/time.h>\n# include <sys/resource.h>\n#endif\n\n/*** TEMPLATE CODE STARTS HERE ***/\n\n#ifndef M_PI\n#define M_PI 3.1415926535897932384626433832795028841971693993751\n#endif\n\nusing namespace std;\n\ntypedef vector<string> vs;\ntypedef long long ll;\ntypedef complex<double> pnt;\ntypedef vector<int> vi;\ntypedef vector<ll> vll;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\n\n#define RA(x) begin(x), end(x)\n#define FE(i, x) for (auto i = begin(x); i != end(x); ++i)\n#define SZ(x) ((ll) (x).size())\n\ntemplate<class T>\nvoid splitstr(const string &s, vector<T> &out)\n{\n    istringstream in(s);\n    out.clear();\n    copy(istream_iterator<T>(in), istream_iterator<T>(), back_inserter(out));\n}\n\ntemplate<class T> T gcd(T a, T b) { return b ? gcd(b, a % b) : a; }\n\nstatic void redirect(int argc, const char **argv)\n{\n#ifndef ONLINE_JUDGE\n    struct rlimit rlim;\n    getrlimit(RLIMIT_STACK, &rlim);\n    rlim.rlim_cur = 256 * 1024 * 1024;\n    setrlimit(RLIMIT_STACK, &rlim);\n#ifndef __SANITIZE_ADDRESS__\n    getrlimit(RLIMIT_DATA, &rlim);\n    rlim.rlim_cur = 256 * 1024 * 1024;\n    setrlimit(RLIMIT_DATA, &rlim);\n#endif\n#endif\n\n    ios::sync_with_stdio(false);\n    cin.tie(NULL);\n    if (argc > 1)\n    {\n        static filebuf f;\n        f.open(argv[1], ios::in);\n        cin.rdbuf(&f);\n        if (!cin)\n        {\n            cerr << \"Failed to open '\" << argv[1] << \"'\" << endl;\n            exit(1);\n        }\n    }\n\n    if (argc > 2)\n    {\n        static filebuf f;\n        f.open(argv[2], ios::out | ios::trunc);\n        cout.rdbuf(&f);\n        if (!cout)\n        {\n            cerr << \"Failed to open '\" << argv[2] << \"'\" << endl;\n        }\n    }\n}\n\n/*** TEMPLATE CODE ENDS HERE */\n\nint main(int argc, const char **argv)\n{\n    redirect(argc, argv);\n    int N;\n    cin >> N;\n    vector<int> a(N);\n    for (int i = 0; i < N; i++)\n        cin >> a[i];\n    int L = *min_element(RA(a));\n    int prev = INT_MIN / 2;\n    int ans = INT_MAX;\n    for (int i = 0; i < N; i++)\n        if (a[i] == L)\n        {\n            ans = min(ans, i - prev);\n            prev = i;\n        }\n    cout << ans << '\\n';\n\n    return 0;\n}\n", "interactive": false, "noSolution": false, "noTutorial": false}