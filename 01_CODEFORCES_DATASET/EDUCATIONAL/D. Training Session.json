{"link": "https://codeforces.com//contest/1598/problem/D", "problemId": "1138073", "shortId": "1598D", "contest_number": "1598", "name": "D. Training Session", "statement": "Monocarp is the coach of the Berland State University programming teams. He decided to compose a problemset for a training session for his teams.Monocarp has  problems that none of his students have seen yet. The -th problem has a topic  (an integer from  to ) and a difficulty  (an integer from  to ). All problems are different, that is, there are no two tasks that have the same topic and difficulty at the same time.Monocarp decided to select exactly  problems from  problems for the problemset. The problems should satisfy  of two conditions (possibly, both):  the topics of all three selected problems are different;  the difficulties of all three selected problems are different. Your task is to determine the number of ways to select three problems for the problemset.", "input": "The first line contains a single integer  ()\u00a0\u2014 the number of testcases. The first line of each testcase contains an integer  () \u2014 the number of problems that Monocarp have. In the -th of the following  lines, there are two integers  and  ()\u00a0\u2014 the topic and the difficulty of the -th problem. It is guaranteed that there are no two problems that have the same topic and difficulty at the same time. The sum of  over all testcases doesn't exceed .", "output": "Print the number of ways to select three training problems that meet either of the requirements described in the statement.", "tutorial": "There are many different ways to solve this problem, but, in my opinion, the easiest one is to count all possible triples and subtract the number of bad triples.The first part is easy \u2014 the number of ways to choose  elements out of  is just . The second part is a bit tricky.What does it mean that the conditions in the statements are not fulfilled? There is a pair of problems with equal difficulty, and there is a pair of problems with the same topic. Since all problems in the input are different, it means that every bad triple has the following form:  \u2014 i.\u2009e. there exists a problem such that it shares the difficulty with one of the other two problems, and the topic with the remaining problem of the triple.This observation allows us to calculate the number of bad triples as follows: we will iterate on the \"central\" problem (the one that shares the topic with the second problem and the difficulty with the third problem). If we pick  as the \"central\" problem, we need to choose the other two. Counting ways to choose the other problems is easy if we precalculate the number of problems for each topic/difficulty: let  be the number of problems with topic , and  be the number of problems with difficulty ; then, if we pick the problem  as the \"central one\", there are  ways to choose a problem that shares the topic with it, and  ways to choose a problem that has the same difficulty \u2014 so, we have to subtract  from the answer for every problem .", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(NULL); \n  int t;\n  cin >> t;\n  while (t--) {\n    int n;\n    cin >> n;\n    vector<int> a(n), b(n), ca(n + 1), cb(n + 1);\n    for (int i = 0; i < n; ++i) {\n      cin >> a[i] >> b[i];\n      ca[a[i]]++; cb[b[i]]++;\n    }\n    long long ans = n * 1LL * (n - 1) * (n - 2) / 6;\n    for (int i = 0; i < n; ++i) \n      ans -= (ca[a[i]] - 1) * 1LL * (cb[b[i]] - 1);\n    cout << ans << '\\n';\n  }\n} ", "interactive": false, "noSolution": false, "noTutorial": false}