{"link": "https://codeforces.com//contest/946/problem/D", "problemId": "162809", "shortId": "946D", "contest_number": "946", "name": "D. Timetable", "statement": "Ivan is a student at Berland State University (BSU). There are  days in Berland week, and each of these days Ivan might have some classes at the university.There are  working hours during each Berland day, and each lesson at the university lasts exactly one hour. If at some day Ivan's first lesson is during -th hour, and last lesson is during -th hour, then he spends  hours in the university during this day. If there are no lessons during some day, then Ivan stays at home and therefore spends  hours in the university.Ivan doesn't like to spend a lot of time in the university, so he has decided to skip some lessons. He cannot skip more than  lessons during the week. After deciding which lessons he should skip and which he should attend, every day Ivan will enter the university right before the start of the first lesson he does not skip, and leave it after the end of the last lesson he decides to attend. If Ivan skips all lessons during some day, he doesn't go to the university that day at all.Given , ,  and Ivan's timetable, can you determine the minimum number of hours he has to spend in the university during one week, if he cannot skip more than  lessons?", "input": "The first line contains three integers ,  and  (, ) \u2014 the number of days in the Berland week, the number of working hours during each day, and the number of lessons Ivan can skip, respectively. Then  lines follow, -th line containing a binary string of  characters. If -th character in -th line is , then Ivan has a lesson on -th day during -th hour (if it is , there is no such lesson).", "output": "Print the minimum number of hours Ivan has to spend in the university during the week if he skips not more than  lessons.", "tutorial": "The problem can be solved in the following dynamic programming manner. Let  be the smallest number of hours Ivan can spend in university in the first  days while having  lessons skipped. To calculate it we can store  \u2014 minimal number of hours Ivan is required to spend in the -th day so that he attends  lessons.Then we can iterate over all lengths from  to  and update  with .Precalc works in  and dp can be processed in .", "solution": "// {{{ by shik\n#include <bits/stdc++.h>\n#pragma GCC diagnostic ignored \"-Wunused-result\"\n#pragma GCC diagnostic ignored \"-Wunused-function\"\n#define SZ(x) ((int)(x).size())\n#define ALL(x) begin(x), end(x)\n#define REP(i, n) for (int i = 0; i < int(n); i++)\n#define REP1(i, a, b) for (int i = (a); i <= int(b); i++)\n#define MP make_pair\n#define PB push_back\nusing namespace std;\ntypedef int64_t LL;\ntypedef pair<int, int> PII;\ntypedef vector<int> VI;\n\nnamespace { namespace shik {\n\ntemplate<class T> void _R(T &x) { cin >> x; }\nvoid _R(int &x) { scanf(\"%d\", &x); }\nvoid _R(int64_t &x) { scanf(\"%\" SCNd64, &x); }\nvoid _R(double &x) { scanf(\"%lf\", &x); }\nvoid _R(char &x) { scanf(\" %c\", &x); }\nvoid _R(char *x) { scanf(\"%s\", x); }\nvoid R() {}\ntemplate<class T, class... U> void R(T &head, U &... tail) { _R(head); R(tail...); }\n\ntemplate<class T> void _W(const T &x) { cout << x; }\nvoid _W(const int &x) { printf(\"%d\", x); }\nvoid _W(const int64_t &x) { printf(\"%\" PRId64, x); }\nvoid _W(const double &x) { printf(\"%.16f\", x); }\nvoid _W(const char &x) { putchar(x); }\nvoid _W(const char *x) { printf(\"%s\", x); }\ntemplate<class T> void _W(const vector<T> &x) { for (auto i = x.begin(); i != x.end(); _W(*i++)) if (i != x.cbegin()) putchar(' '); }\nvoid W() {}\ntemplate<class T, class... U> void W(const T &head, const U &... tail) { _W(head); putchar(sizeof...(tail) ? ' ' : '\\n'); W(tail...); }\n\n#ifdef SHIK\n#include \"dump.hpp\"\n#else\n#define dump(...)\n#endif\n\ntemplate<class T, class F = less<T>> void sort_uniq(vector<T> &v, F f = F()) { sort(begin(v), end(v), f); v.resize(unique(begin(v), end(v)) - begin(v)); }\ntemplate<class T> inline T bit(T x, int i) { return (x >> i) & 1; }\ntemplate<class T> inline bool chkmax(T &a, const T &b) { return b > a ? a = b, true : false; }\ntemplate<class T> inline bool chkmin(T &a, const T &b) { return b < a ? a = b, true : false; }\ntemplate<class T> using MaxHeap = priority_queue<T>;\ntemplate<class T> using MinHeap = priority_queue<T, vector<T>, greater<T>>;\n\n// }}}\n\nconst int N=510;\nint n,m,t,a[N][N],b[N][N],dp[N][N];\nvoid main() {\n    R(n,m,t);\n    REP1(i,1,n) REP1(j,1,m) scanf(\"%1d\",a[i]+j);\n    REP1(i,1,n) {\n        int tot=0;\n        REP1(j,1,m) tot+=a[i][j];\n        b[i][0]=tot;\n        REP1(j,1,m) b[i][j]=INT_MAX;\n        REP1(j,1,m) {\n            int s=0;\n            REP1(k,j,m) {\n                s+=a[i][k];\n                chkmin(b[i][k-j+1],tot-s);\n            }\n        }\n    }\n    REP1(i,1,n+1) REP1(j,0,t) dp[i][j]=INT_MAX;\n    dp[1][t]=0;\n    REP1(i,1,n) REP1(j,0,t) {\n        int me=dp[i][j];\n        if ( me==INT_MAX ) continue;\n        REP1(k,0,m) if ( b[i][k]<=j ) chkmin(dp[i+1][j-b[i][k]],me+k);\n    }\n    int ans=INT_MAX;\n    REP1(i,0,t) chkmin(ans,dp[n+1][i]);\n    W(ans);\n}\n\n// {{{ main\n}}\nint main() { shik::main(); return 0; }\n// }}}\n", "interactive": false, "noSolution": false, "noTutorial": false}