{"link": "https://codeforces.com//contest/612/problem/E", "problemId": "43953", "shortId": "612E", "contest_number": "612", "name": "E. Square Root of Permutation", "statement": "A  of length  is an array containing each integer from  to  exactly once. For example,  is a permutation. For the permutation  the square of permutation is the permutation  that  for each . For example, the square of  is .This problem is about the inverse operation: given the permutation  you task is to find such permutation  that . If there are several such  find any of them.", "input": "The first line contains integer  () \u2014 the number of elements in permutation . The second line contains  distinct integers  () \u2014 the elements of permutation .", "output": "If there is no permutation  such that  print the number \"\". If the answer exists print it. The only line should contain  different integers  () \u2014 the elements of the permutation . If there are several solutions print any of them.", "tutorial": "Consider some permutation q. Let's build by it the oriented graph with edges (i,\u2009qi). Easy to see (and easy to prove) that this graph is the set of disjoint cycles. Now let's see what would be with that graph when the permutation will be multiplied by itself: all the cycles of odd length would remain so (only the order of vertices will change, they will be alternated), but the cycles of even length will be split to the two cycles of the same length. So to get the square root from the permutation we should simply alternate (in reverse order) all cycles of the odd length, and group all the cycles of the same even length to pairs and merge cycles in each pair. If it's impossible to group all even cycles to pairs then the answer doesn't exist.\nComplexity: O(n).\n", "solution": "/*\nWe live for the magic in the sound, distorted guitars are breaking ground\nThe drum pounding faster than my heart, the vocals are screaming extreme art\nThe passion for metal drives us forth, the best heavy metal comes from north\n\nThe powerful tunes, spectacular shows, the audience screams in ecstasy\n\nMetal, Metal\nBack with the vengeance\nMetal, Metal\nAll that I need is heavy metal\nMetal\nScreaming together\nMetal, Metal\nMetal is all that I need\n\nWhile hell bends for leather we stand strong, a rocker can party all night long\nthe school couldn't teach us rock' n roll, the school couldn't help us reach our goal\nWe live for the magic in the sound, distorted guitars are breaking ground\n\nThe powerful tunes, spectacular shows, the audience screams in ecstasy\n*/\n\n//#pragma comment(linker, \"/STACK:16777216\")\n#define _CRT_SECURE_NO_WARNINGS\n#include <fstream>\n#include <iostream>\n#include <string>\n#include <complex>\n#include <math.h>\n#include <set>\n#include <vector>\n#include <map>  \n#include <queue>\n#include <stdio.h>\n#include <stack>\n#include <algorithm>\n#include <list>\n#include <ctime>\n#include <memory.h>\n#include <ctime> \n#include <assert.h>\n\n#define y0 sdkfaslhagaklsldk\n#define y1 aasdfasdfasdf\n#define yn askfhwqriuperikldjk\n#define j1 assdgsdgasghsf\n#define tm sdfjahlfasfh\n#define lr asgasgash\n\n#define eps 1e-8\n#define M_PI 3.141592653589793\n#define bs 1000000007\n#define bsize 512\n\nconst int N = 1100000;\n\nusing namespace std;\n\nvector<vector<int> >cycles[N];\nint used[N];\nint ans[N];\nint p[N];\nvector<int> cycle;\nint n;\n\nvoid dfs(int v)\n{\n\tcycle.push_back(v);\n\tused[v] = 1;\n\tint to = p[v];\n\tif (used[to])\n\t\treturn;\n\tdfs(to);\n}\n\nvoid update(vector<int> v)\n{\n\tfor (int i = 0; i < v.size(); i++)\n\t{\n\t\tans[v[i]] = v[(i + 1) % v.size()];\n\t}\n}\n\nint main(){\n\t//freopen(\"beavers.in\",\"r\",stdin);\n\t//freopen(\"beavers.out\",\"w\",stdout);\n\t//freopen(\"F:/in.txt\",\"r\",stdin);\n\t//freopen(\"F:/output.txt\",\"w\",stdout);\n\t//ios_base::sync_with_stdio(0);\n\t//cin.tie(0);\n\t\n\tcin >> n;\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tscanf(\"%d\", &p[i]);\n\t}\n\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tif (used[i])\n\t\t\tcontinue;\n\t\tcycle.clear();\n\t\tdfs(i);\n\t\tcycles[cycle.size()].push_back(cycle);\n\t}\n\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tif (i % 2 == 0 && cycles[i].size() % 2 == 1)\n\t\t{\n\t\t\tcout << -1 << endl;\n\t\t\treturn 0;\n\t\t}\n\t}\n\t\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tused[i] = 0;\n\t}\n\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tif (i % 2 == 1)\n\t\t{\n\t\t\tfor (int j = 0; j < cycles[i].size(); j++)\n\t\t\t{\n\t\t\t\tvector<int> V;\n\t\t\t\tfor (int q = 0; q < i / 2; q++)\n\t\t\t\t{\n\t\t\t\t\tV.push_back(cycles[i][j][q]);\n\t\t\t\t\tV.push_back(cycles[i][j][(q+1) + i / 2]);\n\t\t\t\t}\n\t\t\t\tV.push_back(cycles[i][j][i / 2 ]);\n\t\t\t\tupdate(V);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfor (int j = 0; j < cycles[i].size(); j += 2)\n\t\t\t{\n\t\t\t\tvector<int> V;\n\t\t\t\tfor (int q = 0; q < cycles[i][j].size(); q++)\n\t\t\t\t{\n\t\t\t\t\tV.push_back(cycles[i][j][q]);\n\t\t\t\t\tV.push_back(cycles[i][j + 1][q]);\n\t\t\t\t}\n\t\t\t\tupdate(V);\n\t\t\t}\n\t\t}\n\t}\n\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tif (i > 1)\n\t\t\tprintf(\" \");\n\t\tprintf(\"%d\", ans[i]);\n//\t\tcout << ans[i];\n\t}\n\tcout << endl;\n\n\tcin.get(); cin.get();\n\treturn 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}