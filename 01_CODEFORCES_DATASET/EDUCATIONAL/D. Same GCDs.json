{"link": "https://codeforces.com//contest/1295/problem/D", "problemId": "526703", "shortId": "1295D", "contest_number": "1295", "name": "D. Same GCDs", "statement": "You are given two integers  and . Calculate the number of integers  such that  and .Note:  is the greatest common divisor of  and .", "input": "The first line contains the single integer  () \u2014 the number of test cases. Next  lines contain test cases \u2014 one per line. Each line contains two integers  and  ().", "output": "Print  integers \u2014 one per test case. For each test case print the number of appropriate -s.", "tutorial": "The Euclidean algorithm is based on the next fact: if  then . So, if  then . So we can declare that we are looking at  different integers  with , so all  forms a segment . So, we need to find the number of  () such that .Let's denote , then  and . So,  or . Since  so we also can represent  and, therefore .Since , then  or we need to calaculate the number of  () such that . Since  so we can consider  and this is the definition of Euler's totient function  which is the answer.Euler's totient function  can be calculated using factorization of . Then .", "solution": "fun gcd(a : Long, b : Long) : Long {\n    return if (a == 0L) b else gcd(b % a, a)\n}\nfun phi(a : Long) : Long {\n    var (tmp, ans) = listOf(a, a)\n    var d = 2L\n    while (d * d <= tmp) {\n        var cnt = 0\n        while (tmp % d == 0L) {\n            tmp /= d\n            cnt++\n        }\n        if (cnt > 0) ans -= ans / d\n        d++\n    }\n    if (tmp > 1L) ans -= ans / tmp\n    return ans\n}\n\nfun main() {\n    val t = readLine()!!.toInt()\n    for (tc in 1..t) {\n        val (a, m) = readLine()!!.split(' ').map { it.toLong() }\n        println(phi(m / gcd(a, m)))\n    }\n}", "interactive": false, "noSolution": false, "noTutorial": false}