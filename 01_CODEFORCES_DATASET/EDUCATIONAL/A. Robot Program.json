{"link": "https://codeforces.com//contest/1452/problem/A", "problemId": "802104", "shortId": "1452A", "contest_number": "1452", "name": "A. Robot Program", "statement": "There is an infinite 2-dimensional grid. The robot stands in cell  and wants to reach cell . Here is a list of possible commands the robot can execute:  move north from cell  to ;  move east from cell  to ;  move south from cell  to ;  move west from cell  to ;  stay in cell . The robot wants to reach cell  in as few commands as possible. However, he can't execute the same command two or more times in a row.What is the minimum number of commands required to reach  from ?", "input": "The first line contains a single integer  ()\u00a0\u2014 the number of testcases. Each of the next  lines contains two integers  and  ()\u00a0\u2014 the destination coordinates of the robot.", "output": "For each testcase print a single integer\u00a0\u2014 the minimum number of commands required for the robot to reach  from  if no command is allowed to be executed two or more times in a row.", "tutorial": "Obviously, you can always obtain the optimal answer without using west or south moves. So the shortest path consists of  east moves and  north moves. Let's estimate the lower bound of the answer. Take a look at these constructions: \"\" and \"\" (let question mark be any command different from the used one). That's the tightest you can put east or north moves in.So the answer is at least . For  you can put them just as in the construction and fill the rest of question marks with a stay in place move.  case works differently, though. You can do it only in  moves by taking alternating moves.Overall complexity:  per testcase.", "solution": "#include<bits/stdc++.h>\n\nusing namespace std;\n\nint main()\n{\n    int t;\n    cin >> t;\n    for(int i = 0; i < t; i++)\n    {\n        int x, y;\n        cin >> x >> y;\n        int ans = max(x, y) * 2 - 1;\n        if(x == y) ans++;\n        cout << ans << endl;\n    }\n}", "interactive": false, "noSolution": false, "noTutorial": false}