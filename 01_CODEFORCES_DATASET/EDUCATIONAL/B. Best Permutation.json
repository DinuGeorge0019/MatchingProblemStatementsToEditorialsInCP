{"link": "https://codeforces.com//contest/1728/problem/B", "problemId": "1534223", "shortId": "1728B", "contest_number": "1728", "name": "B. Best Permutation", "statement": "Let's define the value of the permutation  of  integers , , ...,  (a permutation is an array where each element from  to  occurs exactly once) as follows:  initially, an integer variable  is equal to ;  if , then add  to  (set ), otherwise assign  to ;  if , then add  to  (set ), otherwise assign  to ;  ...  if , then add  to  (set ), otherwise assign  to ;  the value of the permutation is  at the end of this process. For example, for , the value of  changes as follows: , so the value of the permutation is .You are given an integer . Find a permutation  of size  with the maximum possible value among all permutations of size . If there are several such permutations, you can print any of them.", "input": "The first line contains one integer  ()\u00a0\u2014 the number of test cases. The only line of each test case contains one integer  ().", "output": "For each test case, print  integers\u00a0\u2014 the permutation  of size  with the maximum possible value among all permutations of size .", "tutorial": "Let  be the value of the variable  after  steps. Note that  should be less than  for  to be not equal to . It means that  does not exceed . It turns out that for  there is always a permutation such that  is equal to .The only thing left is to find out how to build such a permutation. There are many suitable permutations, let's consider one of the possible options. For an even , a suitable permutation is . You can see that  in such a permutation changes as follows: . For an odd , there is a similar permutation , where  changes as follows: .", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n  int t;\n  cin >> t;\n  while (t--) {\n    int n;\n    cin >> n;\n    vector<int> p(n);\n    iota(p.begin(), p.end(), 1);\n    for (int i = n & 1; i < n - 2; i += 2) swap(p[i], p[i + 1]);\n    for (int &x : p) cout << x << ' ';\n    cout << '\\n';\n  }\n}", "interactive": false, "noSolution": false, "noTutorial": false}