{"link": "https://codeforces.com//contest/1612/problem/B", "problemId": "1198236", "shortId": "1612B", "contest_number": "1612", "name": "B. Special Permutation", "statement": "A permutation of length  is an array  which contains every integer from  to  (inclusive) exactly once. For example,  is a permutation of length .You are given three integers ,  and , where  is an even number. Print any permutation of length  that the minimum among  equals  and the maximum among  equals . Print  if no such permutation exists.", "input": "The first line of the input contains one integer  (), the number of test cases in the test. The following  lines contain test case descriptions. Each test case description contains three integers , ,  (; ; ), where  is an even number (i.e. ).", "output": "For each test case, print a single line containing any suitable permutation. Print  no such permutation exists. If there are multiple answers, print any of them.", "tutorial": "There are many different constructions that give the correct answer, if it exists. In my opinion, one of the most elegant is the following one. should always be present in the left half, and  should be present in the right half, but the exact order of elements in each half doesn't matter. So, it will never be wrong to put  in the first position, and  in the second position.As for the remaining elements, we want elements of the left half to be as big as possible (since they shouldn't be less than ), and elements of the right half \u2014 as small as possible (since they shouldn't be greater than ). Let's put the elements , , , ...,  (excluding  and ) on positions , , , ..., , respectively, so the elements in the left half are as big as possible, and the elements in the right half are as small as possible.After constructing a permutation according to these rules, we should check if it meets the constraints (and print it if it does).", "solution": "t = int(input())\nfor i in range(t):\n    n, a, b = map(int, input().split())\n    p = [a]\n    for j in range(n, 0, -1):\n        if j != a and j != b:\n            p.append(j)\n    p.append(b)\n    if(len(p) == n and min(p[0:n//2]) == a and max(p[n//2:n]) == b):\n        print(*p)\n    else:\n        print(-1)", "interactive": false, "noSolution": false, "noTutorial": false}