{"link": "https://codeforces.com//contest/911/problem/G", "problemId": "142501", "shortId": "911G", "contest_number": "911", "name": "G. Mass Change Queries", "statement": "You are given an array  consisting of  integers. You have to process  queries to this array; each query is given as four numbers , ,  and , denoting that for every  such that  and  you have to set  equal to .Print the array after all queries are processed.", "input": "The first line contains one integer  () \u2014 the size of array . The second line contains  integers , , ...,  () \u2014 the elements of array . The third line contains one integer  () \u2014 the number of queries you have to process. Then  lines follow. -th line contains four integers , ,  and  denoting -th query (, ).", "output": "Print  integers \u2014 elements of array  after all changes are made.", "tutorial": "We can represent a query as a function :  if , . If we want to apply two functions, then we can calculate a composition of these functions in time ; in this problem  is . So we can do the following:Use scanline technique. Build a segment tree over queries where we store a composition of functions on segment in each vertex. Initially all transformations are . When a segment where we apply a query begins, we update the segment tree: we change the transformations on this query's index to the following:  if , . When a segment ends, we revert the transformation on this index to . The trick is that the composition of all current transformations is stored in the root of the segment tree, so we can easily calculate the result of transformation.", "solution": "#include <bits/stdc++.h>\n#ifndef ONLINE_JUDGE\n# include <sys/time.h>\n# include <sys/resource.h>\n#endif\n\n/*** TEMPLATE CODE STARTS HERE ***/\n\n#ifndef M_PI\n#define M_PI 3.1415926535897932384626433832795028841971693993751\n#endif\n\nusing namespace std;\n\ntypedef vector<string> vs;\ntypedef long long ll;\ntypedef complex<double> pnt;\ntypedef vector<int> vi;\ntypedef vector<ll> vll;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\n\n#define RA(x) begin(x), end(x)\n#define FE(i, x) for (auto i = begin(x); i != end(x); ++i)\n#define SZ(x) ((ll) (x).size())\n\ntemplate<class T>\nvoid splitstr(const string &s, vector<T> &out)\n{\n    istringstream in(s);\n    out.clear();\n    copy(istream_iterator<T>(in), istream_iterator<T>(), back_inserter(out));\n}\n\ntemplate<class T> T gcd(T a, T b) { return b ? gcd(b, a % b) : a; }\n\nstatic void redirect(int argc, const char **argv)\n{\n#ifndef ONLINE_JUDGE\n    struct rlimit rlim;\n    getrlimit(RLIMIT_STACK, &rlim);\n    rlim.rlim_cur = 256 * 1024 * 1024;\n    setrlimit(RLIMIT_STACK, &rlim);\n#ifndef __SANITIZE_ADDRESS__\n    getrlimit(RLIMIT_DATA, &rlim);\n    rlim.rlim_cur = 256 * 1024 * 1024;\n    setrlimit(RLIMIT_DATA, &rlim);\n#endif\n#endif\n\n    ios::sync_with_stdio(false);\n    cin.tie(NULL);\n    if (argc > 1)\n    {\n        static filebuf f;\n        f.open(argv[1], ios::in);\n        cin.rdbuf(&f);\n        if (!cin)\n        {\n            cerr << \"Failed to open '\" << argv[1] << \"'\" << endl;\n            exit(1);\n        }\n    }\n\n    if (argc > 2)\n    {\n        static filebuf f;\n        f.open(argv[2], ios::out | ios::trunc);\n        cout.rdbuf(&f);\n        if (!cout)\n        {\n            cerr << \"Failed to open '\" << argv[2] << \"'\" << endl;\n        }\n    }\n}\n\n/*** TEMPLATE CODE ENDS HERE */\n\nstatic void adjust(list<int> &X, list<int> &Y, int l, int r)\n{\n    auto it = X.begin();\n    while (it != X.end())\n    {\n        auto nxt = next(it);\n        if (*it >= l && *it < r)\n            Y.splice(Y.begin(), X, it);\n        it = nxt;\n    }\n}\n\nint main(int argc, const char **argv)\n{\n    redirect(argc, argv);\n    int N;\n    cin >> N;\n    int S = min(500, N);\n    int M = (N + S - 1) / S;\n    int H = 101;\n    vector<vector<list<int>>> pos(H, vector<list<int>>(M));\n    for (int i = 0; i < N; i++)\n    {\n        int s = i / S;\n        int a;\n        cin >> a;\n        pos[a][s].push_back(i);\n    }\n    int Q;\n    cin >> Q;\n    for (int i = 0; i < Q; i++)\n    {\n        int l, r, x, y;\n        cin >> l >> r >> x >> y;\n        l--;\n        if (x == y)\n            continue;\n        int sl = l / S;\n        int sr = (r - 1) / S;\n        adjust(pos[x][sl], pos[y][sl], l, r);\n        if (sl != sr)\n            adjust(pos[x][sr], pos[y][sr], l, r);\n        for (int i = sl + 1; i < sr; i++)\n            pos[y][i].splice(pos[y][i].begin(), std::move(pos[x][i]));\n    }\n\n    vi a(N);\n    for (int i = 0; i < M; i++)\n        for (int j = 0; j < H; j++)\n            for (int p : pos[j][i])\n                a[p] = j;\n\n    for (int i = 0; i < N; i++)\n        cout << a[i] << ' ';\n    cout << '\\n';\n\n    return 0;\n}\n", "interactive": false, "noSolution": false, "noTutorial": false}