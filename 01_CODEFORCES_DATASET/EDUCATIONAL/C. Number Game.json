{"link": "https://codeforces.com//contest/1749/problem/C", "problemId": "1596424", "shortId": "1749C", "contest_number": "1749", "name": "C. Number Game", "statement": "Alice and Bob are playing a game. They have an array of positive integers  of size .Before starting the game, Alice chooses an integer . The game lasts for  stages, the stages are numbered from  to . During the -th stage, Alice must remove an element from the array that is less than or equal to . After that, if the array is not empty, Bob must add  to an arbitrary element of the array. Note that both Alice's move and Bob's move are two parts of the same stage of the game. If Alice can't delete an element during some stage, she loses. If the -th stage ends and Alice hasn't lost yet, she wins.Your task is to determine the maximum value of  such that Alice can win if both players play optimally. Bob plays against Alice, so he tries to make her lose the game, if it's possible.", "input": "The first line contains a single integer  ()\u00a0\u2014 the number of test cases. The first line of each test case contains a single integer  ()\u00a0\u2014 the size of the array . The second line contains  integers  ().", "output": "For each test case, print one integer\u00a0\u2014 the maximum value of  such that Alice can win if both players play optimally.", "tutorial": "Note that if Bob has increased some element, then Alice can't remove it on the next stages. Obviously, it is more profitable for Bob to \"prohibit\" the smallest element of the array. Using this fact, we can iterate over the value of , and then simulate the game process. To simulate the game, we can maintain the set of elements that Alice can remove. On the -th stage, Alice removes the maximum element , such that , if there are no such elements, then Alice lost. Bob always removes the minimum element of the set.Thus, the complexity of the solution is  for each test case.There is another possible solution: we can notice that, if Alice wins, Bob will \"prohibit\" the elements on positions  of the sorted array. So, Alice has to delete the next  elements. So, if the segment  of the sorted array can be deleted by Alice during the game phases, she wins with this value of .", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n  int t;\n  cin >> t;\n  while (t--) {\n    int n;\n    cin >> n;\n    vector<int> a(n);\n    for (int &x : a) cin >> x;\n    int ans = 0;\n    for (int k = 1; k <= n; ++k) {\n      multiset<int> s(a.begin(), a.end());\n      for (int i = 0; i < k; ++i) {\n        auto it = s.upper_bound(k - i);\n        if (it == s.begin()) break;\n        s.erase(--it);\n        if (!s.empty()) {\n          int x = *s.begin();\n          s.erase(s.begin());\n          s.insert(x + k - i);\n        }\n      }\n      if (s.size() + k == n) ans = k;\n    }\n    cout << ans << '\\n';\n  }\n}", "interactive": false, "noSolution": false, "noTutorial": false}