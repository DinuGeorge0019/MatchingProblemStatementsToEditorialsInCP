{"link": "https://codeforces.com//contest/612/problem/D", "problemId": "43952", "shortId": "612D", "contest_number": "612", "name": "D. The Union of k-Segments", "statement": "You are given  segments on the coordinate axis  and the number . The point is  if it belongs to at least  segments. Find the smallest (by the number of segments) set of segments on the coordinate axis  which contains all  points and no others.", "input": "The first line contains two integers  and  () \u2014 the number of segments and the value of . The next  lines contain two integers  () each \u2014 the endpoints of the -th segment. The segments can degenerate and intersect each other. The segments are given in arbitrary order.", "output": "First line contains integer  \u2014 the smallest number of segments. Next  lines contain two integers  () \u2014 the ends of -th segment in the answer. The segments should be listed in the order from left to right.", "tutorial": "Let's create two events for each segment li is the time of the segment opening and ri is the time of the segment closing. Let's sort all events by time, if the times are equal let's sort them with priority to opening events. In C++ it can be done with sorting by standard comparator of vector<pair<int, int>> events, where each element of events is the pair with event time and event type (\u2009-\u20091 for opening and \u2009+\u20091 for closing).\nLet's iterate over events and maintain the balance. To do that we should simply decrease the balance by the value of the event type. Now if the balance value equals to k and before updating it was k\u2009-\u20091 then we are in the left end of some segment from the answer. If the balance equals to k\u2009-\u20091 and before updating it was k then we are in the right end of the segment from the answer. Let's simply add segment [left,\u2009right] to the answer. So now we have disjoint set of segments contains all satisfied points in order from left to right. Obviously it's the answer to the problem.\nComplexity: O(nlogn).\n", "solution": "/*\nOnce we lived in harmony, but it seems so distance now.\nEven though it wasn't long ago, were all doomed to plague and death.\nWorking hard from dawn 'til dusk.\nBut that ain't enough for him\nProduct of unholy love, untrue brother of a king.\n\nKnow that you'll fail, now hear us hail\nYour brother that you killed.\n\nHail to the king that brought peace to us all.\nRise from your grave, hear our call.\nWe'll not forget that you once saved our land.\nKilled by your own brothers hand.\n\nPure evil and cruelty, the true nature of your soul\nMercy and responsibility, words that you can't understand.\nYour quest for total control will only end in your own fall.\nWe' will fight for our freedom, and our right to live.\n\nDo it your way, soon you will pay\nDebts with your own blood.\n\nStars so bright, dance in the night\nDay come soon, hide the moon\nStars so bright dance in the night\nDay come soon, killing the moon\n\nMorning breaks it's time to march, to the castle of betrayal.\nBring your sword, wield your armour, we won't take this anymore.\nKill the tyrant he must die, for his falseness and his crimes.\nStrike him down, and slay his guards, and his ministers as well.\n\nDone it your way, now you will pay\nDebts with your own blood.\n*/\n\n//#pragma comment(linker, \"/STACK:16777216\")\n#define _CRT_SECURE_NO_WARNINGS\n#include <fstream>\n#include <iostream>\n#include <string>\n#include <complex>\n#include <math.h>\n#include <set>\n#include <vector>\n#include <map>  \n#include <queue>\n#include <stdio.h>\n#include <stack>\n#include <algorithm>\n#include <list>\n#include <ctime>\n#include <memory.h>\n#include <ctime> \n#include <assert.h>\n\n#define y0 sdkfaslhagaklsldk\n#define y1 aasdfasdfasdf\n#define yn askfhwqriuperikldjk\n#define j1 assdgsdgasghsf\n#define tm sdfjahlfasfh\n#define lr asgasgash\n\n#define eps 1e-8\n#define M_PI 3.141592653589793\n#define bs 1000000007\n#define bsize 512\n\nconst int N = 210000;\n\nusing namespace std;\n\nint n, k;\nvector<pair<int, int> > events;\nvector<pair<int, int> > ans;\nint cnt;\nint op;\nint main(){\n\t//freopen(\"beavers.in\",\"r\",stdin);\n\t//freopen(\"beavers.out\",\"w\",stdout);\n\t//freopen(\"F:/in.txt\",\"r\",stdin);\n\t//freopen(\"F:/output.txt\",\"w\",stdout);\n\tios_base::sync_with_stdio(0);\n\t//cin.tie(0);\n\t\n\tcin >> n >> k;\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tint a, b;\n\t\tcin >> a >> b;\n\t\tevents.push_back(make_pair(a, -1));\n\t\tevents.push_back(make_pair(b, 1));\n\t}\n\tsort(events.begin(), events.end());\n\n\tfor (int i = 0; i < events.size(); i++)\n\t{\n\t\tif (cnt == k - 1 && events[i].second == -1)//open\n\t\t{\n\t\t\top = events[i].first;\n\t\t}\n\t\tif (cnt == k&&events[i].second == 1)//close\n\t\t{\n\t\t\tans.push_back(make_pair(op, events[i].first));\n\t\t}\n\t\tcnt -= events[i].second;\n\t}\n\n\tcout << ans.size() << endl;\n\tfor (int i = 0; i < ans.size(); i++)\n\t{\n\t\tcout << ans[i].first << \" \" << ans[i].second << \"\\n\";\n\t}\n\n\tcin.get(); cin.get();\n\treturn 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}