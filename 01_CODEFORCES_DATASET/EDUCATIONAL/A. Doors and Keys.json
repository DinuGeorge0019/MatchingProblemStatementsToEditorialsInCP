{"link": "https://codeforces.com//contest/1644/problem/A", "problemId": "1306302", "shortId": "1644A", "contest_number": "1644", "name": "A. Doors and Keys", "statement": "The knight is standing in front of a long and narrow hallway. A princess is waiting at the end of it.In a hallway there are three doors: a red door, a green door and a blue door. The doors are placed one after another, however, possibly in a different order. To proceed to the next door, the knight must first open the door before.Each door can be only opened with a key of the corresponding color. So three keys: a red key, a green key and a blue key\u00a0\u2014 are also placed somewhere in the hallway. To open the door, the knight should first pick up the key of its color.The knight has a map of the hallway. It can be transcribed as a string, consisting of six characters:   , , \u00a0\u2014 denoting red, green and blue doors, respectively;  , , \u00a0\u2014 denoting red, green and blue keys, respectively. Each of these six characters appears in the string exactly once.The knight is standing at the beginning of the hallway\u00a0\u2014 on the left on the map.Given a map of the hallway, determine if the knight can open all doors and meet the princess at the end of the hallway.", "input": "The first line contains a single integer  ()\u00a0\u2014 the number of testcases. Each testcase consists of a single string. Each character is one of , ,  (for the doors), , ,  (for the keys), and each of them appears exactly once.", "output": "For each testcase, print  if the knight can open all doors. Otherwise, print .", "tutorial": "The necessary and sufficient condition is the following: for each color the key should appear before the door.Necessary is easy to show: if there is a key after a door, this door can't be opened.Sufficient can be shown the following way. If there are no closed doors left, the knight has reached the princess. Otherwise, consider the first door the knight encounters. He has a key for this door, so he opens it. We remove both the key and the door from the string and proceed to the case with one less door.Overall complexity: .", "solution": "for _ in range(int(input())):\n\ts = input()\n\tfor (d, k) in zip(\"RGB\", \"rgb\"):\n\t\tif s.find(d) < s.find(k):\n\t\t\tprint(\"NO\")\n\t\t\tbreak\n\telse:\n\t\tprint(\"YES\")", "interactive": false, "noSolution": false, "noTutorial": false}