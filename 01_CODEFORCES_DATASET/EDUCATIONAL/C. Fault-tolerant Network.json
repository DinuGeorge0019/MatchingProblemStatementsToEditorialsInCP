{"link": "https://codeforces.com//contest/1651/problem/C", "problemId": "1324098", "shortId": "1651C", "contest_number": "1651", "name": "C. Fault-tolerant Network", "statement": "There is a classroom with two rows of computers. There are  computers in each row and each computer has its own grade. Computers in the first row has grades  and in the second row\u00a0\u2014 .Initially, all pairs of  computers in each row are connected by wire (pairs  for all ), so two rows form two independent computer networks.Your task is to combine them in one common network by connecting one or more pairs of computers from  rows. Connecting the -th computer from the first row and the -th computer from the second row costs .You can connect one computer to several other computers, but you need to provide at least a basic fault tolerance: you need to connect computers in such a way that the network stays connected, despite one of its computer failing. In other words, if one computer is broken (no matter which one), the network won't split in two or more parts.That is the minimum total cost to make a fault-tolerant network?", "input": "The first line contains a single integer  ()\u00a0\u2014 the number of test cases. Next  cases follow. The first line of each test case contains the single integer  ()\u00a0\u2014 the number of computers in each row. The second line contains  integers  ()\u00a0\u2014 the grades of computers in the first row. The third line contains  integers  ()\u00a0\u2014 the grades of computers in the second row. It's guaranteed that the total sum of  doesn't exceed .", "output": "For each test case, print a single integer\u00a0\u2014 the minimum total cost to make a fault-tolerant network.", "tutorial": "There is a criterion when the given network becomes fault-tolerant: the network becomes fault-tolerant if and only if each of corner computers (let's name them , ,  and ) is connected to the other row.From the one side: if, WLOG,  is not connected to other row then if  is broken\u00a0\u2014  loses connection to the other network (since  is connected only with ).From the other side: suppose, WLOG,  is broken, then the row  is falling in at most two parts:  and . But since both  and  are connected to row  and  is still connected, then the resulting network is still connected.Now the question is: how to connect all corner computers? Because sometimes it's optimal not to connect corners directly. One of the approaches is described below.Let's look at . Essentially, there are three ways to connect it to row : to ,  or  (where  is  with minimum possible ). The same applies to .So, let's just iterate over all these  variants. For each of these variants,   if we didn't cover  then we should also add one more connection between  and ;  if we didn't cover  then we should also add one more connection between  and ; As a result, we choose the best variant.", "solution": "#include<bits/stdc++.h>\n\nusing namespace std;\n\n#define fore(i, l, r) for(int i = int(l); i < int(r); i++)\n\ntypedef long long li;\n\nconst int INF = int(1e9);\n\nint n;\nvector<int> a, b;\n\ninline bool read() {\n\tif(!(cin >> n))\n\t\treturn false;\n\ta.resize(n);\n\tfore (i, 0, n)\n\t\tcin >> a[i];\n\tb.resize(n);\n\tfore (i, 0, n)\n\t\tcin >> b[i];\n\treturn true;\n}\n\nint bestCandidate(const vector<int> &vals, int cur) {\n\tint bst = INF + 10, pos = -1;\n\tfore (i, 0, n) {\n\t\tif (bst > abs(cur - vals[i])) {\n\t\t\tbst = abs(cur - vals[i]);\n\t\t\tpos = i;\n\t\t}\n\t}\n\treturn pos;\n}\n\ninline void solve() {\n\tli bst = 10ll * INF;\n\t\n\tvector<int> cds1 = {0, bestCandidate(b, a[0]), n - 1};\n\tvector<int> cds2 = {0, bestCandidate(b, a[n - 1]), n - 1};\n\t\n\tfor (int var1 : cds1) {\n\t\tfor (int var2 : cds2) {\n\t\t\tli ans = (li)abs(a[0] - b[var1]) + abs(a[n - 1] - b[var2]);\n\t\t\t\n\t\t\tif (var1 > 0 && var2 > 0)\n\t\t\t\tans += abs(b[0] - a[bestCandidate(a, b[0])]);\n\t\t\tif (var1 < n - 1 && var2 < n - 1)\n\t\t\t\tans += abs(b[n - 1] - a[bestCandidate(a, b[n - 1])]);\n\t\t\t\n\t\t\tbst = min(bst, ans);\n\t\t}\n\t}\n\tcout << bst << endl;\n}\n\nint main() {\n#ifdef _DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin);\n#endif\n\tios_base::sync_with_stdio(false);\n\tcin.tie(0), cout.tie(0);\n\t\n\tint t; cin >> t;\n\twhile (t--) {\n\t\tread();\n\t\tsolve();\n\t}\n\treturn 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}