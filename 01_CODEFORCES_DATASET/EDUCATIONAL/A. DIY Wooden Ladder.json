{"link": "https://codeforces.com//contest/1197/problem/A", "problemId": "376702", "shortId": "1197A", "contest_number": "1197", "name": "A. DIY Wooden Ladder", "statement": "Let's denote a -step ladder as the following structure: exactly  wooden planks, of which  two planks of length   \u2014 the base of the ladder;   planks of length   \u2014 the steps of the ladder; Note that neither the base planks, nor the steps planks are required to be equal.For example, ladders  and  are correct -step ladders and ladder  is a correct -step ladder. On the first picture the lengths of planks are  for the base and  for the step. On the second picture lengths are  for the base and  for the step. On the third picture lengths are  for the base and  for the steps.   You have  planks. The length of the -th planks is . You don't have a saw, so you can't cut the planks you have. Though you have a hammer and nails, so you can assemble the improvised \"ladder\" from the planks.The question is: what is the maximum number  such that you can choose some subset of the given planks and assemble a -step ladder using them?", "input": "The first line contains a single integer  () \u2014 the number of queries. The queries are independent. Each query consists of two lines. The first line contains a single integer  () \u2014 the number of planks you have. The second line contains  integers  () \u2014 the lengths of the corresponding planks. It's guaranteed that the total number of planks from all queries doesn't exceed .", "output": "Print  integers \u2014 one per query. The -th integer is the maximum number , such that you can choose some subset of the planks given in the -th query and assemble a -step ladder using them. Print  if you can't make even -step ladder from the given set of planks.", "tutorial": "Since all planks have length at least $$$1$$$ so we can take any $$$n - 2$$$ planks as steps. So, all we need is to maximize the length of base planks. We can take the first and second maximum as base, then the answer is minimum among second maximum - 1 and $$$n - 2$$$.", "solution": "fun main(args: Array<String>) {\n    val T = readLine()!!.toInt()\n    for (tc in 1..T) {\n        val n = readLine()!!.toInt()\n        val a = readLine()!!.split(' ').map { it.toInt() }.sortedDescending()\n        println(minOf(a[1] - 1, n - 2))\n    }\n}", "interactive": false, "noSolution": false, "noTutorial": false}