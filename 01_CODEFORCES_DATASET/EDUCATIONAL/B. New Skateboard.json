{"link": "https://codeforces.com//contest/628/problem/B", "problemId": "48824", "shortId": "628B", "contest_number": "628", "name": "B. New Skateboard", "statement": "Max wants to buy a new skateboard. He has calculated the amount of money that is needed to buy a new skateboard. He left a calculator on the floor and went to ask some money from his parents. Meanwhile his little brother Yusuf came and started to press the keys randomly. Unfortunately Max has forgotten the number which he had calculated. The only thing he knows is that the number is divisible by .You are given a string  consisting of digits (the number on the display of the calculator after Yusuf randomly pressed the keys). Your task is to find the number of substrings which are divisible by . A substring can start with a zero.A substring of a string is a nonempty sequence of consecutive characters.For example if string  is  then we have four substrings that are divisible by : , ,  and . For the string  the answer is three: , , .As input/output can reach huge size it is recommended to use fast input/output methods: for example, prefer to use  instead of  in C++, prefer to use  instead of  in .", "input": "The only line contains string  (). The string  contains only digits from  to .", "output": "Print integer  \u2014 the number of substrings of the string  that are divisible by . Note that the answer can be huge, so you should use -bit integer type to store it. In  you can use the  integer type and in  you can use  integer type.", "tutorial": "The key observation is that the number is divisible by  if and only if its last two digits forms a number divisible by . So to calculate the answer at first we should count the substrings of length one. Now let's consider pairs of consecutive digits. If they forms a two digit number that is divisible by  we should increase the answer by the index of the right one.\n", "solution": "\n            #include <bits/stdc++.h>\n\u00a0\n#define forn(i, n) for (int i = 0; i < int(n); i++)\n#define ford(i, n) for (int i = int(n) - 1; i >= 0; i--)\n#define fore(i, l, r) for (int i = int(l); i < int(r); i++)\n#define correct(x, y, n, m) (0 <= (x) && (x) < (n) && 0 <= (y) && (y) < (m))\n#define all(a) (a).begin(), (a).end()\n#define sz(a) int((a).size())\n#define pb(a) push_back(a)\n#define mp(x, y) make_pair((x), (y))\n#define x first\n#define y second\n\u00a0\nusing namespace std;\n\u00a0\ntypedef long long li;\ntypedef long double ld;\ntypedef pair<int, int> pt;\n\u00a0\ntemplate<typename X> inline X abs(const X& a) { return a < 0? -a: a; }\ntemplate<typename X> inline X sqr(const X& a) { return a * a; }\n\u00a0\nconst int INF = int(1e9);\nconst li INF64 = li(1e18);\nconst ld EPS = 1e-9, PI = 3.1415926535897932384626433832795;\n\u00a0\nstring s;\n\u00a0\ninline bool read() {\n\u00a0 \u00a0 return !!getline(cin, s);\n}\n\u00a0\ninline void solve() {\n\u00a0 \u00a0 li ans = 0;\n\u00a0 \u00a0 forn(i, sz(s)) {\n\u00a0 \u00a0 \u00a0 \u00a0 int d = int(s[i] - '0');\n\u00a0 \u00a0 \u00a0 \u00a0 if (d % 4 == 0) ans++;\n\u00a0 \u00a0 \u00a0 \u00a0 if (i) {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 int pd = int(s[i - 1] - '0');\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if ((pd * 10 + d) % 4 == 0)\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ans += i;\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 }\n\u00a0 \u00a0 cout << ans << endl;\n}\n\u00a0\nint main() {\n#ifdef SU1\n\u00a0 \u00a0 assert(freopen(\"input.txt\", \"rt\", stdin));\n\u00a0 \u00a0 //assert(freopen(\"output.txt\", \"wt\", stdout));\n#endif\n\u00a0 \u00a0 \n\u00a0 \u00a0 cout << setprecision(10) << fixed;\n\u00a0 \u00a0 cerr << setprecision(5) << fixed;\n\u00a0\n\u00a0 \u00a0 while (read()) {\n\u00a0 \u00a0 \u00a0 \u00a0 solve();\n\u00a0 \u00a0 \u00a0 \u00a0 //break;\n\u00a0 \u00a0 }\n\u00a0 \u00a0 \n\u00a0 \u00a0 return 0;\n}\n        ", "interactive": false, "noSolution": false, "noTutorial": false}