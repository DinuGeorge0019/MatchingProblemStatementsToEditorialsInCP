{"link": "https://codeforces.com//contest/808/problem/A", "problemId": "106397", "shortId": "808A", "contest_number": "808", "name": "A. Lucky Year", "statement": "Apart from having lots of holidays throughout the year, residents of Berland also have whole  years. Year is considered  if it has no more than  non-zero digit in its number. So years 100, 40000, 5 are  and 12, 3001 and 12345 are not.You are given current year in Berland. Your task is to find how long will residents of Berland wait till the next  year.", "input": "The first line contains integer number  () \u2014 current year in Berland.", "output": "Output amount of years from the current year to the next  one.", "tutorial": "Notice that the next lucky year always looks like (first digit of the current + 1)  10^(number of digits of the current - 1). It holds also for numbers starting with 9, it will be 10  10^(number of digits - 1). The answer is the difference between the next lucky year and current year.", "solution": "import java.io.*;\nimport java.util.*;\n\npublic class ER21qA {\n\n  public static void main(String[] args) {\n    InputReader in = new InputReader(System.in);\n    PrintWriter w = new PrintWriter(System.out);\n\n    int n = in.nextInt();\n    \n    char s[] = Integer.toString(n).toCharArray();\n    \n    boolean f = true;\n    for (int i = 1; i < s.length; i++) {\n    \tf &= s[i] == '0';\n    }\n    \n    if (f) {\n    \ts[0] = '1';\n    \tw.println(new String(s));\n    } else {\n    \tif (s[0] == '9') {\n    \t\tchar t[] = new char[s.length + 1];\n    \t\tArrays.fill(t, '0');\n    \t\tt[0] = '1';\n    \t\tw.println(Integer.parseInt(new String(t)) - n);\n    \t} else {\n    \t\tchar t[] = new char[s.length];\n    \t\tArrays.fill(t, '0');\n    \t\tt[0] = (char)(s[0] + 1);\n    \t\tw.println(Integer.parseInt(new String(t)) - n);\n    \t}\n    }\n    \n    w.close();\n  }\n\n  static class InputReader {\n\n    private final InputStream stream;\n    private final byte[] buf = new byte[8192];\n    private int curChar, snumChars;\n\n    public InputReader(InputStream st) {\n      this.stream = st;\n    }\n\n    public int read() {\n      if (snumChars == -1)\n        throw new InputMismatchException();\n      if (curChar >= snumChars) {\n        curChar = 0;\n        try {\n          snumChars = stream.read(buf);\n        } catch (IOException e) {\n          throw new InputMismatchException();\n        }\n        if (snumChars <= 0)\n          return -1;\n      }\n      return buf[curChar++];\n    }\n\n    public int nextInt() {\n      int c = read();\n      while (isSpaceChar(c)) {\n        c = read();\n      }\n      int sgn = 1;\n      if (c == '-') {\n        sgn = -1;\n        c = read();\n      }\n      int res = 0;\n      do {\n        res *= 10;\n        res += c - '0';\n        c = read();\n      } while (!isSpaceChar(c));\n      return res * sgn;\n    }\n\n    public long nextLong() {\n      int c = read();\n      while (isSpaceChar(c)) {\n        c = read();\n      }\n      int sgn = 1;\n      if (c == '-') {\n        sgn = -1;\n        c = read();\n      }\n      long res = 0;\n      do {\n        res *= 10;\n        res += c - '0';\n        c = read();\n      } while (!isSpaceChar(c));\n      return res * sgn;\n    }\n\n    public int[] nextIntArray(int n) {\n      int a[] = new int[n];\n      for (int i = 0; i < n; i++) {\n        a[i] = nextInt();\n      }\n      return a;\n    }\n\n    public String readString() {\n      int c = read();\n      while (isSpaceChar(c)) {\n        c = read();\n      }\n      StringBuilder res = new StringBuilder();\n      do {\n        res.appendCodePoint(c);\n        c = read();\n      } while (!isSpaceChar(c));\n      return res.toString();\n    }\n\n    public String nextLine() {\n      int c = read();\n      while (isSpaceChar(c))\n        c = read();\n      StringBuilder res = new StringBuilder();\n      do {\n        res.appendCodePoint(c);\n        c = read();\n      } while (!isEndOfLine(c));\n      return res.toString();\n    }\n\n    public boolean isSpaceChar(int c) {\n      return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\n    }\n\n    private boolean isEndOfLine(int c) {\n      return c == '\\n' || c == '\\r' || c == -1;\n    }\n\n  }\n\n}", "interactive": false, "noSolution": false, "noTutorial": false}