{"link": "https://codeforces.com//contest/1612/problem/A", "problemId": "1198235", "shortId": "1612A", "contest_number": "1612", "name": "A. Distance", "statement": "Let's denote the Manhattan distance between two points  (with coordinates ) and  (with coordinates ) as . For example, the distance between two points with coordinates  and  is .You are given two points,  and . The point  has coordinates , the point  has coordinates .Your goal is to find a point  such that:  both coordinates of  are non-negative integers;   (without any rounding);   (without any rounding). Find any point  that meets these constraints, or report that no such point exists.", "input": "The first line contains one integer  () \u2014 the number of test cases. Each test case consists of one line containing two integers  and  () \u2014 the coordinates of the point .", "output": "For each test case, print the answer on a separate line as follows:   if it is impossible to find a point  meeting the constraints, print \"\" (without quotes);  otherwise, print two non-negative integers not exceeding  \u2014 the coordinates of point  meeting the constraints. If there are multiple answers, print any of them. It can be shown that if any such point exists, it's possible to find a point with coordinates not exceeding  that meets the constraints. ", "tutorial": "There is a solution in , but in fact, a solution that checks all points with -coordinate from  to  and -coordinate from  to  is fast enough. There's no need to check any other points, since  implies that point  is on one of the shortest paths between  and .", "solution": "t = int(input())\nfor i in range(t):\n    x, y = map(int, input().split())\n    xc = -1\n    yc = -1\n    for j in range(0, 51):\n        for k in range(0, 51):\n            if 2 * (j + k) == x + y and 2 * (abs(x - j) + abs(y - k)) == x + y:\n                xc, yc = j, k\n    print(xc, yc)", "interactive": false, "noSolution": false, "noTutorial": false}