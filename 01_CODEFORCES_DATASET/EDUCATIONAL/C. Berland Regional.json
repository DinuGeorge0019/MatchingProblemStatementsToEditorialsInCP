{"link": "https://codeforces.com//contest/1519/problem/C", "problemId": "971588", "shortId": "1519C", "contest_number": "1519", "name": "C. Berland Regional", "statement": "Polycarp is an organizer of a Berland ICPC regional event. There are  universities in Berland numbered from  to . Polycarp knows all competitive programmers in the region. There are  students: the -th student is enrolled at a university  and has a programming skill .Polycarp has to decide on the rules now. In particular, the number of members in the team.Polycarp knows that if he chooses the size of the team to be some integer , each university will send their  strongest (with the highest programming skill ) students in the first team, the next  strongest students in the second team and so on. If there are fewer than  students left, then the team can't be formed. Note that there might be universities that send zero teams.The strength of the region is the total skill of the members of all present teams. If there are no teams present, then the strength is .Help Polycarp to find the strength of the region for each choice of  from  to .", "input": "The first line contains a single integer  ()\u00a0\u2014 the number of testcases. The first line of each testcase contains a single integer  ()\u00a0\u2014 the number of universities and the number of students. The second line of each testcase contains  integers  ()\u00a0\u2014 the university the -th student is enrolled at. The third line of each testcase contains  integers  ()\u00a0\u2014 the programming skill of the -th student. The sum of  over all testcases doesn't exceed .", "output": "For each testcase print  integers: the strength of the region\u00a0\u2014 the total skill of the members of the present teams\u00a0\u2014 for each choice of team size .", "tutorial": "There are two important observations to make.The first one is that you can calculate the answers for each university independently of each other and sum them up to obtain the true answer.The second one is that if there are  students in an university, then that university can only contribute to answers for  from  to .So if we learn to calculate the contribution of the -th university for some fixed  in , then we will be able to iterate over all possible  for each university and get the solution in , where  is the number of students in the -th university.To achieve it, you have to gather the sum of the maximum number of students that can form full teams of size . That must be the highest number less than or equal to  that is divisible by , so . Sort the students of each university, precalculate partial sums, and now you are free to add the prefix sum of that number of students to the answer for .Overall complexity:  per testcase.", "solution": "#include <bits/stdc++.h>\n\n#define forn(i, n) for (int i = 0; i < int(n); i++)\n\nusing namespace std;\n\n\nint main() {\n    int t;\n    scanf(\"%d\", &t);\n    forn(_, t){\n        int n;\n        scanf(\"%d\", &n);\n        vector<int> s(n), u(n);\n        forn(i, n){\n            scanf(\"%d\", &s[i]);\n            --s[i];\n        }\n        forn(i, n){\n            scanf(\"%d\", &u[i]);\n        }\n        vector<vector<int>> bst(n);\n        forn(i, n) bst[s[i]].push_back(u[i]);\n        forn(i, n) sort(bst[i].begin(), bst[i].end(), greater<int>());\n        vector<vector<long long>> pr(n, vector<long long>(1, 0));\n        forn(i, n) for (int x : bst[i]) pr[i].push_back(pr[i].back() + x);\n        vector<long long> ans(n);\n        forn(i, n) for (int k = 1; k <= int(bst[i].size()); ++k)\n            ans[k - 1] += pr[i][bst[i].size() / k * k];\n        forn(i, n)\n            printf(\"%lld \", ans[i]);\n        puts(\"\");\n    }\n    return 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}