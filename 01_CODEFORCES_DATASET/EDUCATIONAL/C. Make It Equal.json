{"link": "https://codeforces.com//contest/1065/problem/C", "problemId": "235280", "shortId": "1065C", "contest_number": "1065", "name": "C. Make It Equal", "statement": "There is a toy building consisting of  towers. Each tower consists of several cubes standing on each other. The -th tower consists of  cubes, so it has height .Let's define operation  on some height  as following: for each tower , if its height is greater than , then remove some top cubes to make tower's height equal to . Cost of one \"slice\" equals to the total number of removed cubes from all towers.Let's name slice as  one if its cost is lower or equal to  ().  Calculate the minimum number of good slices you have to do to make all towers have the same height. Of course, it is always possible to make it so.", "input": "The first line contains two integers  and  (, ) \u2014 the number of towers and the restriction on slices, respectively. The second line contains  space separated integers  () \u2014 the initial heights of towers.", "output": "Print one integer \u2014 the minimum number of good slices you have to do to make all towers have the same heigth.", "tutorial": "Let's iterate over height  of slice in decreasing order. All we need to know is a number of towers with height more than  (name it ) and sum of its heights .Current slice on height  is good if . Let's greedily decrease value  while slice on  is good keeping correct values  and . When we found minimal good slice we can perform it increasing answer by one and \"changing tower heights\" just by setting new value to  equal to .Finish algorithm when  becomes equal to minimal height of towers and make final slice.", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int N = int(2e5) + 9;\n\nint n, k, h;\nint need = int(1e9);\nint cnt[N];\n\nint main() {\n    scanf(\"%d %d\", &n, &k);\n    for(int i = 0; i < n; ++i){\n        int x;\n        scanf(\"%d\", &x);\n        h = max(h, x);\n        need = min(need, x);\n        ++cnt[x];\n    }\n    \n    int pos = N - 1;\n    int res = 0;\n    long long sum = 0;\n    int c = 0;\n    while(true){\n        long long x = sum - c * 1LL * (pos - 1);\n        if(x > k){\n            ++res;\n            h = pos;\n            sum = pos * 1LL * c;\n        }   \n    \n        --pos;\n        if(pos == need) break;\n        c += cnt[pos];\n        sum += cnt[pos] * 1LL * pos;\n    }\n    \n    if(h != need) ++res;\n    \n    cout << res << endl;\n}", "interactive": false, "noSolution": false, "noTutorial": false}