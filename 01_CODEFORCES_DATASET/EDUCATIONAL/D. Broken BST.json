{"link": "https://codeforces.com//contest/797/problem/D", "problemId": "103031", "shortId": "797D", "contest_number": "797", "name": "D. Broken BST", "statement": "Let  be arbitrary binary tree \u2014 tree, every vertex of which has no more than two children. Given tree is rooted, so there exists only one vertex which doesn't have a parent \u2014 it's the root of a tree. Every vertex has an integer number written on it. Following algorithm is run on every value from the tree :  Set pointer to the root of a tree.  Return success if the value in the current vertex is equal to the number you are looking for  Go to the left child of the vertex if the value in the current vertex is greater than the number you are looking for  Go to the right child of the vertex if the value in the current vertex is less than the number you are looking for  Return fail if you try to go to the vertex that doesn't exist Here is the pseudo-code of the described algorithm: bool find(TreeNode t, int x) {    if (t == null)        return false;    if (t.value == x)        return true;    if (x < t.value)        return find(t.left, x);    else        return find(t.right, x);}find(root, x);The described algorithm works correctly if the tree is binary search tree (i.e. for each node the values of left subtree are less than the value in the node, the values of right subtree are greater than the value in the node). But it can return invalid result if tree is not a binary search tree.Since the given tree is not necessarily a binary search tree, not all numbers can be found this way. Your task is to calculate, how many times the search will fail being running on every value from the tree.If the tree has multiple vertices with the same values on them then you should run algorithm on every one of them separately.", "input": "First line contains integer number  () \u2014 number of vertices in the tree. Each of the next  lines contains  numbers , ,  () \u2014 value on current vertex, index of the left child of the vertex and index of the right child of the vertex, respectively. If some child doesn't exist then number  is set instead. Note that different vertices of the tree may contain the same values.", "output": "Print number of times when search algorithm will fail.", "tutorial": "Let's firstly consider tree with only distinct values in its nodes. Then value will be reached if and only if all the jumps to the left children on the path from the root were done from the vertices with values greater than the current one and all the jumps to the right children on the path from the root were done from the vertices with values less than the current one. Thus let's run dfs from the root and maintain maximal transition to the left child on current path and minimal transition to the right child on current path. If the value of current node is greater than left bound and less than right bound then it will be found.Now let's return to the original problem. Notice that transitions and comparations won't change. Store every found value in set and just calculate how many values of vertices isn't present there.Overall complexity: .", "solution": "// In the name of God\n\n#include <iostream>\n#include <algorithm>\n#include <fstream>\n#include <vector>\n#include <deque>\n#include <assert.h>\n#include <queue>\n#include <stack>\n#include <set>\n#include <map>\n#include <stdio.h>\n#include <string.h>\n#include <utility>\n#include <math.h>\n#include <bitset>\n#include <iomanip>\n#include <complex>\n\nusing namespace std;\n\n#define rep(i, a, b) for (int i = (a), i##_end_ = (b); i < i##_end_; ++i)\n#define debug(...) fprintf(stderr, __VA_ARGS__)\n#define mp make_pair\n#define x first\n#define y second\n#define pb push_back\n#define SZ(x) (int((x).size()))\n#define ALL(x) (x).begin(), (x).end()\n\ntemplate<typename T> inline bool chkmin(T &a, const T &b) { return a > b ? a = b, 1 : 0; }\ntemplate<typename T> inline bool chkmax(T &a, const T &b) { return a < b ? a = b, 1 : 0; }\ntemplate<typename T> inline bool smin(T &a, const T &b)   { return a > b ? a = b : a;    }\ntemplate<typename T> inline bool smax(T &a, const T &b)   { return a < b ? a = b : a;    }\n\ntypedef long long LL;\n\nconst int N = (int) 1e6 + 6, mod = (int) 0;\nint n, mark[N], val[N], cl[N], cr[N], root, sr[N];\nint solve(int v, int b, int e) {\n\tif (e - b <= 0) return 0;\n\tif (v == -1) return e - b;\n\tint ml = lower_bound(sr + b, sr + e, val[v]) - sr;\n\tint mr = upper_bound(sr + b, sr + e, val[v]) - sr;\n\treturn solve(cl[v], b, ml) + solve(cr[v], mr, e);\n}\nint main() {\n\tcin >> n;\n\tfor (int j = 0; j < n; ++j) {\n\t\tcin >> val[j] >> cl[j] >> cr[j];\n\t\tif (cl[j] >= 0) cl[j]--, mark[cl[j]] = 1;\n\t\tif (cr[j] >= 0) cr[j]--, mark[cr[j]] = 1;\n\t\tsr[j] = val[j];\n\t}\n\tsort(sr, sr + n);\n\tfor (int j = 0; j < n; ++j)\n\t\tif (!mark[j])\n\t\t\troot = j;\n\tcout << solve(root, 0, n) << endl;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "interactive": false, "noSolution": false, "noTutorial": false}