{"link": "https://codeforces.com//contest/1680/problem/C", "problemId": "1398257", "shortId": "1680C", "contest_number": "1680", "name": "C. Binary String", "statement": "You are given a string  consisting of characters  and/or .You have to remove several (possibly zero) characters from the beginning of the string, and then several (possibly zero) characters from the end of the string. . The cost of the removal is the  of the following two values:  the number of characters  left in the string;  the number of characters  removed from the string. What is the  cost of removal you can achieve?", "input": "The first line contains one integer  () \u2014 the number of test cases. Each test case consists of one line containing the string  (), consisting of characters  and/or . The total length of strings  in all test cases does not exceed .", "output": "For each test case, print one integer \u2014 the minimum cost of removal you can achieve.", "tutorial": "There are many different approaches to this problem: dynamic programming, binary search, greedy, two pointers, anything you want. The model solution uses an approach based on binary search, so I'll describe it.First of all, why does binary search work? Let's say that the number of 's is . If the cost of deletion is , then we have deleted at most  characters , and have left at most  characters . Let's increase the number of characters we delete from the prefix of the string until the number of deleted 's becomes : if , it's always possible. So, if we consider the segment of values , the fact that we can get cost  implies that we can get cost , so we can use binary search on segment  to find the minimum achievable cost.Now, how to check if we can obtain the cost of deletion equal to ? One possible way to do this is to form an array , where  is the position of the -th character  in the string, and find the minimum value of  in this array: the string that should remain has to contain at least  characters , and the minimum value of  is the minimum possible length of such string. Then we can find the number of 's in this string and check if it is greater than  or not.", "solution": "def can(pos, m):\n    k = len(pos) \n    x = k - m\n    for i in range(m + 1):\n        l = pos[i]\n        r = pos[i + x - 1]\n        if r - l + 1 - x <= m:\n            return True\n    return False    \n\nt = int(input())\nfor i in range(t):\n    s = input()\n    pos = []\n    n = len(s)\n    for i in range(n):\n        if s[i] == '1':\n            pos.append(i)\n    lf = 0\n    rg = len(pos)\n    while rg - lf > 1:\n        mid = (lf + rg) // 2\n        if can(pos, mid):\n            rg = mid\n        else:\n            lf = mid\n    if len(pos) == 0 or pos[-1] - pos[0] == len(pos) - 1:\n        print(0)\n    else:\n        print(rg)", "interactive": false, "noSolution": false, "noTutorial": false}