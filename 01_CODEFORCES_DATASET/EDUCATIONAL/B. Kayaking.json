{"link": "https://codeforces.com//contest/863/problem/B", "problemId": "123492", "shortId": "863B", "contest_number": "863", "name": "B. Kayaking", "statement": "Vadim is really keen on travelling. Recently he heard about kayaking activity near his town and became very excited about it, so he joined a party of kayakers.Now the party is ready to start its journey, but firstly they have to choose kayaks. There are  people in the group (including Vadim), and they have exactly  tandem kayaks (each of which, obviously, can carry two people) and  single kayaks. -th person's weight is , and weight is an important matter in kayaking \u2014 if the difference between the weights of two people that sit in the same tandem kayak is too large, then it can crash. And, of course, people want to distribute their seats in kayaks in order to minimize the chances that kayaks will crash.Formally, the instability of a single kayak is always , and the instability of a tandem kayak is the absolute difference between weights of the people that are in this kayak. Instability of the whole journey is the total instability of all kayaks.Help the party to determine minimum possible total instability! ", "input": "The first line contains one number  (). The second line contains  integer numbers , , ..., , where  is weight of person  ().", "output": "Print minimum possible total instability.", "tutorial": "Firstly let's learn how to split persons in pairs as if there are no single kayaks. Let there be people with weights , ,  and  (). Obviously, the lowest instability you can achieve is . Swapping any two elements will only make the result greater. This greedy strategy can be used to distribute all the seats.Now you need to check every pair of persons to seat in single kayaks and calculate total instability for the rest. The answer will be the minimun instabily over all pairs.Overall complexity: .", "solution": "#include \"bits/stdc++.h\"\nusing namespace std;\n#define rep(i,n) for(int (i)=0;(i)<(int)(n);++(i))\n#define rer(i,l,u) for(int (i)=(int)(l);(i)<=(int)(u);++(i))\n#define reu(i,l,u) for(int (i)=(int)(l);(i)<(int)(u);++(i))\nstatic const int INF = 0x3f3f3f3f; static const long long INFL = 0x3f3f3f3f3f3f3f3fLL;\ntypedef vector<int> vi; typedef pair<int, int> pii; typedef vector<pair<int, int> > vpii; typedef long long ll;\ntemplate<typename T, typename U> static void amin(T &x, U y) { if (y < x) x = y; }\ntemplate<typename T, typename U> static void amax(T &x, U y) { if (x < y) x = y; }\n\nint main() {\n\tint n;\n\twhile (~scanf(\"%d\", &n)) {\n\t\tvector<int> w(n * 2);\n\t\tfor (int i = 0; i < n * 2; ++ i)\n\t\t\tscanf(\"%d\", &w[i]);\n\t\tsort(w.begin(), w.end());\n\t\tvector<vi> dp(n * 2 + 1, vi(3, INF));\n\t\tdp[0][0] = 0;\n\t\trep(i, n * 2) rep(j, 3) {\n\t\t\tint x = dp[i][j];\n\t\t\tif (x == INF) continue;\n\t\t\tif (i + 2 <= n * 2)\n\t\t\t\tamin(dp[i + 2][j], x + (w[i + 1] - w[i]));\n\t\t\tif (j < 2)\n\t\t\t\tamin(dp[i + 1][j + 1], x);\n\t\t}\n\t\tint ans = dp.back()[2];\n\t\tprintf(\"%d\\n\", ans);\n\t}\n\treturn 0;\n}\n", "interactive": false, "noSolution": false, "noTutorial": false}