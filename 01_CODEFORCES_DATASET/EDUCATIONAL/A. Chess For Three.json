{"link": "https://codeforces.com//contest/893/problem/A", "problemId": "135511", "shortId": "893A", "contest_number": "893", "name": "A. Chess For Three", "statement": "Alex, Bob and Carl will soon participate in a team chess tournament. Since they are all in the same team, they have decided to practise really hard before the tournament. But it's a bit difficult for them because chess is a game for two players, not three.So they play with each other according to following rules:  Alex and Bob play the first game, and Carl is spectating;  When the game ends, the one who lost the game becomes the spectator in the next game, and the one who was spectating plays against the winner. Alex, Bob and Carl play in such a way that there are no draws.Today they have played  games, and for each of these games they remember who was the winner. They decided to make up a log of games describing who won each game. But now they doubt if the information in the log is correct, and they want to know if the situation described in the log they made up was possible (that is, no game is won by someone who is spectating if Alex, Bob and Carl play according to the rules). Help them to check it!", "input": "The first line contains one integer  () \u2014 the number of games Alex, Bob and Carl played. Then  lines follow, describing the game log. -th line contains one integer  () which is equal to  if Alex won -th game, to  if Bob won -th game and  if Carl won -th game.", "output": "Print  if the situation described in the log was possible. Otherwise print .", "tutorial": "This task is about pure implementation. Maintain the number of current spectator and check if he doesn't win. With knowledge of current winner  and current spectator  you can easily get the third player by formula  (just the sum of all numbers without the known ones).Overall complexity: .", "solution": "#include <bits/stdc++.h>\n\n#define itn int\n#define all(x) (x).begin(), (x).end()\n#define make_unique(x) sort(all((x))); (x).resize(unique(all((x))) - (x).begin())\n\n#ifdef ONLINE_JUDGE\n\tinline int pidorand() {\n\t\treturn ((rand() & 32767) << 15) | (rand() & 32767);\n\t}\n\t#define rand pidorand\n#endif\t// ONLINE_JUDGE\n\n#ifdef OLBOEB\n\t#define return std::cerr << __FUNCTION__ << \"\\n\"; return\n#endif  // OLBOEB\n\nusing namespace std;\n\ninline int nxt() {\n\tint x;\n\tscanf(\"%d\", &x);\n\treturn x;\n}\n\nint main() {\n\tint n = nxt();\n\tvector<int> a(n);\n\tfor (int i = 0; i < n; ++i) {\n\t\ta[i] = nxt();\n\t}\n\n\tint spec = 3;\n\tfor (int x : a) {\n\t\tif (x == spec) {\n\t\t\tputs(\"NO\");\n\t\t\treturn 0;\n\t\t}\n\t\tspec = 6 - x - spec;\n\t}\n\tputs(\"YES\");\n\n\treturn 0;\n}\n", "interactive": false, "noSolution": false, "noTutorial": false}