{"link": "https://codeforces.com//contest/818/problem/B", "problemId": "112246", "shortId": "818B", "contest_number": "818", "name": "B. Permutation Game", "statement": " children are standing in a circle and playing a game. Children's numbers in clockwise order form a permutation  of length . It is an integer sequence such that each integer from  to  appears exactly once in it.The game consists of  steps. On each step the current leader with index  counts out  people in clockwise order, starting from the next person. The last one to be pointed at by the leader becomes the new leader.You are given numbers  \u2014 indices of leaders in the beginning of each step. Child with number  is the first leader in the game. Write a program which will restore a possible permutation . If there are multiple solutions then print any of them. If there is no solution then print .", "input": "The first line contains two integer numbers ,  (). The second line contains  integer numbers  () \u2014 indices of leaders in the beginning of each step.", "output": "Print such permutation of  numbers  that leaders in the game will be exactly  if all the rules are followed. If there are multiple solutions print any of them.  If there is no permutation which satisfies all described conditions print .", "tutorial": "Let's show by construction that there can be no ambiguity in values of  of the children who were leaders at least once (except for probably the last leader).If  then on this step the value of  taken was exactly . Otherwise  went over  and in circle ended up to the left or in the same position. So for this case  should be . Obviously counting cannot go over  two or more times as this will result in .We only need to check if all the numbers are unique and fill the unvisited children with remaining values to form the permutation.Overall complexity: .", "solution": "#include <bits/stdc++.h>\nusing namespace std;\n#define N 111\nint n , m , a[ N ] , l[ N ];\nbool used[ N ];\nint main(){\n  cin >> n >> m;\n  for( int i = 0 ; i < m ; i ++ )\n    cin >> l[ i ];\n  for( int i = 1 ; i < m ; i ++ ){\n    int x = ( l[ i ] - l[ i - 1 ] + n ) % n;\n    if( x == 0 ) x = n;\n    if( a[ l[ i - 1 ] ] == 0 ){\n      if( used[ x ] ){\n        puts( \"-1\" );\n        exit(0);\n      }\n      a[ l[ i - 1 ] ] = x;\n      used[ x ] = true;\n      continue;\n    }\n    if( x != a[ l[ i - 1 ] ] ){\n      puts( \"-1\" );\n      exit(0);\n    }\n  }\n  for( int i = 1 ; i <= n ; i ++ ) if( a[ i ] == 0 )\n    for( int j = 1 ; j <= n ; j ++ ) if( !used[ j ] ){\n      a[ i ] = j;\n      used[ j ] = true;\n      break;\n    }\n  for( int i = 1 ; i <= n ; i ++ )\n    printf( \"%d%c\" , a[ i ] , \" \\n\"[ i == n ] );\n}\n", "interactive": false, "noSolution": false, "noTutorial": false}