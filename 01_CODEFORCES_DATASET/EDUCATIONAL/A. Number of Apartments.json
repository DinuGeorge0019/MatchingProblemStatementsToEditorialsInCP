{"link": "https://codeforces.com//contest/1430/problem/A", "problemId": "755153", "shortId": "1430A", "contest_number": "1430", "name": "A. Number of Apartments", "statement": "Recently a new building with a new layout was constructed in Monocarp's hometown. According to this new layout, the building consists of three types of apartments: three-room, five-room, and seven-room apartments. It's also known that each room of each apartment has exactly one window. In other words, a three-room apartment has three windows, a five-room\u00a0\u2014 five windows, and a seven-room\u00a0\u2014 seven windows.Monocarp went around the building and counted  windows. Now he is wondering, how many apartments of each type the building may have.Unfortunately, Monocarp only recently has learned to count, so he is asking you to help him to calculate the possible quantities of three-room, five-room, and seven-room apartments in the building that has  windows. If there are multiple answers, you can print any of them.Here are some examples:  if Monocarp has counted  windows, there could have been  three-room apartments,  five-room apartments and  seven-room apartments, since ;  if Monocarp has counted  windows, there could have been  three-room apartments,  five-room apartments and  seven-room apartments, since ;  if Monocarp has counted  windows, he should have mistaken since no building with the aforementioned layout can have  windows. ", "input": "Th first line contains one integer  ()\u00a0\u2014 the number of test cases. The only line of each test case contains one integer  ()\u00a0\u2014 the number of windows in the building.", "output": "For each test case, if a building with the new layout and the given number of windows just can't exist, print . Otherwise, print three non-negative integers\u00a0\u2014 the possible number of three-room, five-room, and seven-room apartments. If there are multiple answers, print any of them.", "tutorial": "There are many possible solutions to this problem. The simplest one is to notice that, using several flats of size  and one flat of some size (possibly also , possibly not), we can get any  equal to ,  or . The only numbers that don't belong to these lists are ,  and , and it's easy to see that there is no answer for that numbers. So the solution is to try all possible sizes of one flat, and if the remaining number of windows is non-negative and divisible by , then take the required number of three-room flats.", "solution": "#include <iostream>\n#include <sstream>\n#include <cstdio>\n#include <vector>\n#include <cmath>\n#include <queue>\n#include <string>\n#include <cstring>\n#include <cassert>\n#include <iomanip>\n#include <algorithm>\n#include <set>\n#include <map>\n#include <ctime>\n#include <cmath>\n\n#define forn(i, n) for(int i=0;i<n;++i)\n#define fore(i, l, r) for(int i = int(l); i <= int(r); ++i)\n#define sz(v) int(v.size())\n#define all(v) v.begin(), v.end()\n#define pb push_back\n#define mp make_pair\n#define x first\n#define y1 ________y1\n#define y second\n#define ft first\n#define sc second\n#define pt pair<int, int>\n\ntemplate<typename X> inline X abs(const X& a) { return a < 0? -a: a; }\ntemplate<typename X> inline X sqr(const X& a) { return a * a; }\n\ntypedef long long li;\ntypedef long double ld;\n\nusing namespace std;\n\nconst int INF = 1000 * 1000 * 1000;\nconst ld EPS = 1e-9;\nconst ld PI = acos(-1.0);\n\nli n;\n\ninline void read() {\t\n\tcin >> n;\n}\n\ninline void solve() {\n\tif (n == 1 || n == 2 || n == 4) {\n\t\tcout << -1 << endl;\n\t\treturn;\n\t}\n\tif (n % 3 == 0) {\n\t\tcout << n / 3 << ' ' << 0 << ' ' << 0 << endl;\n\t} else if (n % 3 == 1) {\n\t\tcout << (n - 7) / 3 << ' ' << 0 << ' ' << 1 << endl;\n\t} else {\n\t\tcout << (n - 5) / 3 << ' ' << 1 << ' ' << 0 << endl;\n\t}\n}\n\nint main () {\n#ifdef fcspartakm\n    freopen(\"input.txt\", \"r\", stdin);\n    //freopen(\"output.txt\", \"w\", stdout);\n#endif\n    cerr << setprecision(10) << fixed;\n    \n    int t; cin >> t;\n    while(t--) {\n    \tread();\n    \tsolve();\n    }\n \n    //cerr << \"TIME: \" << clock() << endl;\n}\n", "interactive": false, "noSolution": false, "noTutorial": false}