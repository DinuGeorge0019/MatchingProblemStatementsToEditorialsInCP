{"link": "https://codeforces.com//contest/1766/problem/A", "problemId": "1690146", "shortId": "1766A", "contest_number": "1766", "name": "A. Extremely Round", "statement": "Let's call a positive integer  if it has only one non-zero digit. For example, , , , ,  are extremely round integers; , , , ,  are not.You are given an integer . You have to calculate the number of extremely round integers  such that .", "input": "The first line contains one integer  () \u2014 the number of test cases. Then,  lines follow. The -th of them contains one integer  () \u2014 the description of the -th test case.", "output": "For each test case, print one integer \u2014 the number of extremely round integers  such that .", "tutorial": "There are many ways to solve this problem.The most naive one (iterating through all numbers from  to  in each test case and checking if they are extremely round) fails, since it is , but you can optimize it by noticing that extremely round numbers are rare. So, for example, we can iterate through all numbers from  to  once, remember which ones are extremely round, store them into an array, and while answering the test case, only check the numbers from the array we have created.There is also a solution in  per test case with a formula, try to invent it yourself.", "solution": "def check(x):\n    s = str(x)\n    cnt = 0\n    for c in s:\n        if c != '0':\n            cnt += 1\n    return cnt == 1\n\na = []\nfor i in range(1, 1000000):\n    if check(i):\n        a.append(i)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    ans = 0\n    for x in a:\n        if x <= n:\n            ans += 1\n    print(ans)", "interactive": false, "noSolution": false, "noTutorial": false}