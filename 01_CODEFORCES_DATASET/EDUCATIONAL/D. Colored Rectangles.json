{"link": "https://codeforces.com//contest/1398/problem/D", "problemId": "699504", "shortId": "1398D", "contest_number": "1398", "name": "D. Colored Rectangles", "statement": "You are given three multisets of pairs of colored sticks:    pairs of red sticks, the first pair has length , the second pair has length , , the -th pair has length ;   pairs of green sticks, the first pair has length , the second pair has length , , the -th pair has length ;   pairs of blue sticks, the first pair has length , the second pair has length , , the -th pair has length ; You are constructing rectangles from these pairs of sticks with the following process:   take a pair of sticks of one color;  take a pair of sticks of another color different from the first one;  add the area of the resulting rectangle to the total area. Thus, you get such rectangles that their opposite sides are the same color and their adjacent sides are not the same color.Each pair of sticks can be used at most once, some pairs can be left unused. You are not allowed to split a pair into independent sticks.What is the maximum area you can achieve?", "input": "The first line contains three integers , ,  ()\u00a0\u2014 the number of pairs of red sticks, the number of pairs of green sticks and the number of pairs of blue sticks. The second line contains  integers  ()\u00a0\u2014 the lengths of sticks in each pair of red sticks. The third line contains  integers  ()\u00a0\u2014 the lengths of sticks in each pair of green sticks. The fourth line contains  integers  ()\u00a0\u2014 the lengths of sticks in each pair of blue sticks.", "output": "Print the maximum possible total area of the constructed rectangles.", "tutorial": "Let's build some rectangles and take a look at the resulting pairings. For example, consider only red/green rectangles. Let the rectangles be , , .... Sort them in a non-decreasing order of . I claim that in the most optimal set  are also sorted in a non-decreasing order. It's easy to prove with some induction.Moreover, if there are some green or red sticks that are not taken and that are longer than the smallest taken corresponding sticks, then it's always optimal to take those instead.These facts helps us to conclude that from each set only some suffix of the largest sticks are taken. And they also give us the idea of the solution: sort the sticks in each set and pick the largest from any of the two sets into a pair until no pairs can be taken.However, the greedy approach of \"take from any two of the three sets\" is incorrect. We need to choose these two sets smartly. Let  store the maximum total area that can be obtained by taking  largest red sticks,  largest green sticks and  largest blue sticks. Each transition chooses a pair of colors and takes the next pairs in both of them.The answer is the maximum value in all the .Overall complexity: .", "solution": "n = [int(x) for x in input().split()]\na = []\nfor i in range(3):\n\ta.append([int(x) for x in input().split()])\n\ta[i].sort(reverse=True)\n\ndp = [[[0 for i in range(n[2] + 1)] for j in range(n[1] + 1)] for k in range(n[0] + 1)]\nans = 0\nfor i in range(n[0] + 1):\n\tfor j in range(n[1] + 1):\n\t\tfor k in range(n[2] + 1):\n\t\t\tif i < n[0] and j < n[1]:\n\t\t\t\tdp[i + 1][j + 1][k] = max(dp[i + 1][j + 1][k], dp[i][j][k] + a[0][i] * a[1][j])\n\t\t\tif i < n[0] and k < n[2]:\n\t\t\t\tdp[i + 1][j][k + 1] = max(dp[i + 1][j][k + 1], dp[i][j][k] + a[0][i] * a[2][k])\n\t\t\tif j < n[1] and k < n[2]:\n\t\t\t\tdp[i][j + 1][k + 1] = max(dp[i][j + 1][k + 1], dp[i][j][k] + a[1][j] * a[2][k])\n\t\t\tans = max(ans, dp[i][j][k])\n\nprint(ans)", "interactive": false, "noSolution": false, "noTutorial": false}