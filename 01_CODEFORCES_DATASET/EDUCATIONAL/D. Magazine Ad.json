{"link": "https://codeforces.com//contest/803/problem/D", "problemId": "104509", "shortId": "803D", "contest_number": "803", "name": "D. Magazine Ad", "statement": "The main city magazine offers its readers an opportunity to publish their ads. The format of the ad should be like this:There are space-separated non-empty words of lowercase and uppercase Latin letters.There are hyphen characters  in some words, their positions set word wrapping points. Word can include more than one hyphen. It is guaranteed that there are no adjacent spaces and no adjacent hyphens. No hyphen is adjacent to space. There are no spaces and no hyphens before the first word and after the last word. When the word is wrapped, the part of the word before hyphen and the hyphen itself stay on current line and the next part of the word is put on the next line. You can also put line break between two words, in that case the space stays on current line. Check notes for better understanding.The ad can occupy no more that  lines and should have minimal width. The width of the ad is the maximal length of string (letters, spaces and hyphens are counted) in it.You should write a program that will find minimal width of the ad.", "input": "The first line contains number  (). The second line contains the text of the ad \u2014 non-empty space-separated words of lowercase and uppercase Latin letters and hyphens. Total length of the ad don't exceed  characters.", "output": "Output minimal width of the ad.", "tutorial": "Firstly notice that there is no difference between space and hyphen, you can replace them with the same character, if you want.Let's run binary search on answer. Fix width and greedily construct ad \u2014 wrap word only if you don't option to continue on the same line. Then check if number of lines doesn't exceed .Overall complexity: .", "solution": "#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#include <vector>\n#include <set>\n#include <map>\n#include <cmath>\n#include <ctime>\n#include <string>\n#include <cstring>\n#include <complex>\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int, int> pii;\n#define mp make_pair\n\nconst int INF = (int)1e9;\nint k;\nstring s;\nint n;\n\nint solve(int w)\n{\n    int ans = 0;\n    int l = 0;\n    while(l < n)\n    {\n        ans++;\n        int r = l + w;\n        if (r >= n) break;\n        while(r > l && s[r - 1] != ' ' && s[r - 1] != '-') r--;\n        if (r == l) return INF;\n        l = r;\n    }\n    return ans;\n}\n\nint main()\n{\n//    freopen(\"input.txt\", \"r\", stdin);\n//    freopen(\"output.txt\", \"w\", stdout);\n\n    cin >> k;\n    getline(cin, s);\n    getline(cin, s);\n\n    n = s.length();\n    int l = 0, r = n;\n    while(r - l > 1)\n    {\n        int m = (l + r) / 2;\n        if (solve(m) <= k)\n            r = m;\n        else\n            l = m;\n    }\n    cout << r << endl;\n\n    return 0;\n}\n", "interactive": false, "noSolution": false, "noTutorial": false}