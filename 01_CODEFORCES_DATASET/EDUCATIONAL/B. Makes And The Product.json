{"link": "https://codeforces.com//contest/817/problem/B", "problemId": "110088", "shortId": "817B", "contest_number": "817", "name": "B. Makes And The Product", "statement": "After returning from the army Makes received a gift \u2014 an array  consisting of  positive integer numbers. He hadn't been solving problems for a long time, so he became interested to answer a particular question: how many triples of indices  (), such that  is minimum possible, are there in the array? Help him with it!", "input": "The first line of input contains a positive integer number  \u2014 the number of elements in array . The second line contains  positive integer numbers  \u2014 the elements of a given array.", "output": "Print one number \u2014 the quantity of triples  such that  and  are pairwise distinct and  is minimum possible.", "tutorial": "Minimal product is obtained by multiplying three smallest elements of the array.Let's iterate over the middle element of these three and calc sum of all options.Firstly let's precalc two arrays of pairs \u2014  and .  is minimum and number of its occurrences on the prefix of array  up to index  inclusive.  is minimum and number of its occurrences on the suffix of array  up to index  inclusive. It can be done with two traversals over the array.Let's also store set of three elements which give minimal product of the array.Consider every index  from  to  inclusive (0-indexed). If set () is equal to the stored set of three minimums then add to the answer number of ways to choose pair , that is .Overall complexity: .", "solution": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define ms(s, n) memset(s, n, sizeof(s))\n#define FOR(i, a, b) for (int i = (a); i < (b); i++)\n#define FORd(i, a, b) for (int i = (a) - 1; i >= (b); i--)\n#define FORall(it, a) for (__typeof((a).begin()) it = (a).begin(); it != (a).end(); it++)\n#define sz(a) int((a).size())\n#define present(t, x) (t.find(x) != t.end())\n#define all(a) (a).begin(), (a).end()\n#define uni(a) (a).erase(unique(all(a)), (a).end())\n#define pb push_back\n#define pf push_front\n#define mp make_pair\n#define fi first\n#define se second\n#define prec(n) fixed<<setprecision(n)\n#define bit(n, i) (((n) >> (i)) & 1)\n#define bitcount(n) __builtin_popcountll(n)\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef long double ld;\ntypedef pair<int, int> pi;\ntypedef vector<int> vi;\ntypedef vector<pi> vii;\nconst int MOD = (int) 1e9 + 7;\nconst int MOD2 = (int) 1e8 + 7;\nconst int INF = (int) 1e9;\nconst ll LINF = (ll) 1e18;\nconst ld PI = acos((ld) -1);\nconst ld EPS = 1e-9;\ninline ll gcd(ll a, ll b) {ll r; while (b) {r = a % b; a = b; b = r;} return a;}\ninline ll lcm(ll a, ll b) {return a / gcd(a, b) * b;}\ninline ll fpow(ll n, ll k, int p = MOD) {ll r = 1; for (; k; k >>= 1) {if (k & 1) r = r * n % p; n = n * n % p;} return r;}\ntemplate<class T> inline int chkmin(T& a, const T& val) {return val < a ? a = val, 1 : 0;}\ntemplate<class T> inline int chkmax(T& a, const T& val) {return a < val ? a = val, 1 : 0;}\ninline ll isqrt(ll k) {ll r = sqrt(k) + 1; while (r * r > k) r--; return r;}\ninline ll icbrt(ll k) {ll r = cbrt(k) + 1; while (r * r * r > k) r--; return r;}\ninline void addmod(int& a, int val, int p = MOD) {if ((a = (a + val)) >= p) a -= p;}\ninline void submod(int& a, int val, int p = MOD) {if ((a = (a - val)) < 0) a += p;}\ninline int mult(int a, int b, int p = MOD) {return (ll) a * b % p;}\ninline int inv(int a, int p = MOD) {return fpow(a, p - 2, p);}\ninline int sign(ld x) {return x < -EPS ? -1 : x > +EPS;}\ninline int sign(ld x, ld y) {return sign(x - y);}\n#define db(x) cerr << #x << \" = \" << (x) << \", \";\n#define endln cerr << \"\\n\";\n\nconst int maxn = 1e5 + 5;\nint n;\nint a[maxn];\n\nvoid solve() {\n    cin >> n;\n    FOR(i, 0, n) cin >> a[i];\n    sort(a, a + n);\n    int tot = 0;\n    FOR(i, 0, n) if (a[i] == a[2]) tot++;\n    int k = 1 + (a[2] == a[1]) + (a[2] == a[0]);\n    long long ans = 1;\n    FOR(i, 0, k) {\n        ans *= tot - i;\n    }\n    FOR(i, 0, k) {\n        ans /= i + 1;\n    }\n    cout << ans << \"\\n\";\n}\n\nint main() {\n    int JUDGE_ONLINE = 1;\n    if (fopen(\"in.txt\", \"r\")) {\n        JUDGE_ONLINE = 0;\n        assert(freopen(\"in.txt\", \"r\", stdin));\n        //assert(freopen(\"out.txt\", \"w\", stdout));\n    }\n    else {\n        ios_base::sync_with_stdio(0), cin.tie(0);\n    }\n    solve();\n    if (!JUDGE_ONLINE) {\n        //cout << \"\\nTime elapsed: \" << 1000 * clock() / CLOCKS_PER_SEC << \"ms\\n\";\n    }\n    return 0;\n}\n", "interactive": false, "noSolution": false, "noTutorial": false}