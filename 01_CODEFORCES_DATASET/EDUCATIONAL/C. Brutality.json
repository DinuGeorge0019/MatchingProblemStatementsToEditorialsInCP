{"link": "https://codeforces.com//contest/1107/problem/C", "problemId": "288736", "shortId": "1107C", "contest_number": "1107", "name": "C. Brutality", "statement": "You are playing a new famous fighting game: Kortal Mombat XII. You have to perform a brutality on your opponent's character.You are playing the game on the new generation console so your gamepad have  buttons. Each button has a single lowercase Latin letter from '' to '' written on it. All the letters on buttons are pairwise distinct.You are given a sequence of hits, the -th hit deals  units of damage to the opponent's character. To perform the -th hit you have to press the button  on your gamepad. Hits are numbered from  to .You know that if you press some button   times  then it'll break. You cherish your gamepad and don't want to break any of its buttons.To perform a brutality you have to land some of the hits of the given sequence. . The total damage dealt is the sum of  over all  for the hits which weren't skipped..Your task is to skip some hits to deal the  possible total damage to the opponent's character and not break your gamepad buttons.", "input": "The first line of the input contains two integers  and  () \u2014 the number of hits and the maximum number of times you can push the same button in a row. The second line of the input contains  integers  (), where  is the damage of the -th hit. The third line of the input contains the string  consisting of exactly  lowercase Latin letters \u2014 the sequence of hits (each character is the letter on the button you need to press to perform the corresponding hit).", "output": "Print one integer  \u2014 the  possible damage to the opponent's character you can deal without breaking your gamepad buttons.", "tutorial": "Since we are only allowed to push the same button  times in a row, let's do a two-pointer sweep to find all segments of consisting of just one button. Within each segment, we'll sort and take the  highest values. See the code for details on the two-pointer sweep: 48994498\n", "solution": "#include <algorithm>\n#include <cassert>\n#include <iostream>\n#include <string>\n#include <vector>\nusing namespace std;\n\nint N, K;\nvector<int> A;\nstring S;\n\nint main() {\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n\n    cin >> N >> K;\n    A.resize(N);\n\n    for (int &a : A)\n        cin >> a;\n\n    cin >> S;\n    long long total = 0;\n\n    for (int i = 0, j = 0; i < N; i = j) {\n        while (j < N && S[i] == S[j])\n            j++;\n\n        sort(A.begin() + i, A.begin() + j);\n        reverse(A.begin() + i, A.begin() + j);\n\n        for (int k = i; k < min(j, i + K); k++)\n            total += A[k];\n    }\n\n    cout << total << '\\n';\n}\n", "interactive": false, "noSolution": false, "noTutorial": false}