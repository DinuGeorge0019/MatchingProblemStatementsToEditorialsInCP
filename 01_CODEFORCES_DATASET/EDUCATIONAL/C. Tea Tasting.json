{"link": "https://codeforces.com//contest/1795/problem/C", "problemId": "1785699", "shortId": "1795C", "contest_number": "1795", "name": "C. Tea Tasting", "statement": "A tea manufacturer decided to conduct a massive tea tasting.  sorts of tea will be tasted by  tasters. Both the sorts of tea and the tasters are numbered from  to . The manufacturer prepared  milliliters of the -th sort of tea. The -th taster can drink  milliliters of tea at once.The tasting will be conducted in steps. During the first step, the -th taster tastes the -th sort of tea. The -th taster drinks  tea (how much is available of the -th sort and how much the -th taster can drink).  also decreases by this amount.Then all tasters move to the previous sort of tea. Thus, during the second step, the -th taster tastes the -st sort of tea. The -th taster drinks  tea. The -st person ends the tasting.During the third step, the -th taster tastes the -nd sort of tea. The -nd taster ends the tasting. This goes on until everyone ends the tasting.Take a look at the tasting process for , , . In the left row, there are the current amounts of each sort of tea. In the right column, there are current amounts of tea each taster has drunk in total. The arrow tells which taster each tea goes to on the current step. The number on the arrow is the amount\u00a0\u2014 minimum of how much is available of the sort of tea and how much the taster can drink.  For each taster, print how many milliliters of tea he/she will drink in total.", "input": "The first line contains a single integer  ()\u00a0\u2014 the number of testcases. The first line of each testcase contains a single integer  ()\u00a0\u2014 the number of sorts of tea and the number of tasters. The second line contains  integers  ()\u00a0\u2014 the amount of each sort of tea. The third line contains  integers  ()\u00a0\u2014 the amount of tea each taster can drink at once. The sum of  over all testcases doesn't exceed .", "output": "For each testcase, print  integers\u00a0\u2014 the -th value should be equal to the total amount of tea the -th taster will drink.", "tutorial": "Consider how each sort of tea affects the tasters.The -th sort makes testers , for some , drink to their limit , and the -th taster drink the remaining tea. Sometimes there is no such -th taster, but we'll explore the general case.Let's add the remaining tea straight to the -th taster answer . And for each taster  from  to  we'll add  into the value  denoting how many times they drank at their limit .If we have these calculated, we can obtain the answer by adding  and .In order to find , we can use prefix sums. Build  over the sequence . Now you want to find the largest  such that . Rewrite it as . You can do this with a binary search. In particular, with an upper_bound call. The amount of the remaining tea can also be calculated from prefix sums.To add  on a range , you can use a technique called delta encoding. Add  to . Subtract  from . After everything is added, propagate this values via a prefix sum. This way, if both  and  happened non-strictly to the left or strictly to the right of , it doesn't affect  at all (the segment either closes before  or opens after ). Otherwise, it adds exactly  to .Overall complexity:  per testcase.", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nusing li = long long;\n\nint main() {\n  ios::sync_with_stdio(false); cin.tie(0);\n  int t;\n  cin >> t;\n  while (t--) {\n    int n;\n    cin >> n;\n    vector<li> a(n), b(n);\n    for (auto& x : a) cin >> x;\n    for (auto& x : b) cin >> x;\n    vector<li> sum(n + 1);\n    for (int i = 0; i < n; ++i) sum[i + 1] = sum[i] + b[i];\n    vector<li> cnt(n + 1), add(n + 1);\n    for (int i = 0; i < n; ++i) {\n      int j = upper_bound(sum.begin(), sum.end(), a[i] + sum[i]) - sum.begin() - 1;\n      cnt[i] += 1;\n      cnt[j] -= 1;\n      add[j] += a[i] - sum[j] + sum[i];\n    }\n    for (int i = 0; i < n; ++i) {\n      cout << cnt[i] * b[i] + add[i] << ' ';\n      cnt[i + 1] += cnt[i];   \n    }\n    cout << '\\n';\n  }\n}", "interactive": false, "noSolution": false, "noTutorial": false}