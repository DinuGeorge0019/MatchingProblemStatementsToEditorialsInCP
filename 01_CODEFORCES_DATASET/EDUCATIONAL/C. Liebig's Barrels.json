{"link": "https://codeforces.com//contest/985/problem/C", "problemId": "184584", "shortId": "985C", "contest_number": "985", "name": "C. Liebig's Barrels", "statement": "You have  wooden staves. The -th stave has length . You have to assemble  barrels consisting of  staves each, you can use any  staves to construct a barrel. Each stave must belong to exactly one barrel.Let volume  of barrel  be equal to the length of the  stave in it.  You want to assemble exactly  barrels with the maximal total sum of volumes. But you have to make them , so a difference between volumes of any pair of the resulting barrels must not exceed , i.e.  for any  and .Print maximal total sum of volumes of  barrels or  if it's impossible to satisfy the condition above.", "input": "The first line contains three space-separated integers ,  and  (, , ). The second line contains  space-separated integers  () \u2014 lengths of staves.", "output": "Print single integer \u2014 maximal total sum of the volumes of barrels or  if it's impossible to construct exactly  barrels satisfying the condition  for any  and .", "tutorial": "At first, sort all  in non-decreasing order.Let  be first position that  (if , ). Then each barrel should have at least one stave from segment . So if  answer is .Otherwise, for each  from  to  let's take no more than  smallest staves from this segment in the -th barrel, but in such way, that there are at least  staves left for next barrels.", "solution": "#include<bits/stdc++.h>\n\nusing namespace std;\n\n#define fore(i, l, r) for(int i = int(l); i < int(r); i++)\n\ntypedef long long li;\n\nint n, k, l, m;\nvector<li> a;\n\ninline bool read() {\n\tif(!(cin >> n >> k >> l))\n\t\treturn false;\n\tm = n * k;\n\ta.assign(m, 0);\n\tfore(i, 0, m)\n\t\tassert(scanf(\"%lld\", &a[i]) == 1);\n\treturn true;\n}\n\ninline void solve() {\n\tsort(a.begin(), a.end());\n\tint rg = int(upper_bound(a.begin(), a.end(), a[0] + l) - a.begin());\n\t\n\tif(rg < n) {\n\t\tputs(\"0\");\n\t\treturn;\n\t}\n\tli ans = 0;\n\t\n\tint u = 0;\n\tfore(i, 0, n) {\n\t\tans += a[u++];\n\t\t\n\t\tfore(j, 0, k - 1) {\n\t\t\tif(rg - u > n - i - 1)\n\t\t\t\tu++;\n\t\t\telse\n\t\t\t\tbreak;\n\t\t}\n\t}\n\tcout << ans << endl;\n}\n\nint main() {\n#ifdef _DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin);\n\tint tt = clock();\n#endif\n\tcerr << fixed << setprecision(15);\n\t\n\tif(read()) {\n\t\tsolve();\n\t\n#ifdef _DEBUG\n\t\tcerr << \"TIME = \" << clock() - tt << endl;\n\t\ttt = clock();\n#endif\n\t}\n\treturn 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}