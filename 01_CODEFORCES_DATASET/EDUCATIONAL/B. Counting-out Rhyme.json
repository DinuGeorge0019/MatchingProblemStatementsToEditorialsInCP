{"link": "https://codeforces.com//contest/792/problem/B", "problemId": "100425", "shortId": "792B", "contest_number": "792", "name": "B. Counting-out Rhyme", "statement": " children are standing in a circle and playing the counting-out game. Children are numbered clockwise from  to . In the beginning, the first child is considered the leader. The game is played in  steps. In the -th step the leader counts out  people in clockwise order, starting from the next person. The last one to be pointed at by the leader is eliminated, and the next player after him becomes the new leader.For example, if there are children with numbers  currently in the circle, the leader is child  and , then counting-out rhyme ends on child , who is eliminated. Child  becomes the leader.You have to write a program which prints the number of the child to be eliminated on every step.", "input": "The first line contains two integer numbers  and  (, ). The next line contains  integer numbers  ().", "output": "Print  numbers, the -th one corresponds to the number of child to be eliminated at the -th step.", "tutorial": "The task was just about implementing algorithm described in statement.This is one of many possible ways of doing this. Firstly you should notice that doing  iterations in -th step is equal to doing    iterations (-based numbering). That is less than .Now fill array of length  with ones and create pointer to current leader. Then on -th step move pointer to the right (from cell  proceed to ) till you encounter    ones. When finished, write  to this cell and move pointer to next cell which contains .Overall complexity: .", "solution": "#include <iostream>\n#include <fstream>\n#include <set>\n#include <map>\n#include <string>\n#include <vector>\n#include <bitset>\n#include <algorithm>\n#include <cstring>\n#include <cstdlib>\n#include <cmath>\n#include <cassert>\n#include <queue>\n\n#define mp make_pair\n#define pb push_back\n\n\ntypedef long long ll;\ntypedef long double ld;\n\nusing namespace std;\n\n#ifndef LOCAL\n#define cerr _cer\nstruct _cert\n{\n    template <typename T> _cert& operator << (T) { return *this; }\n};\n_cert _cer;\n#endif\n\ntemplate <typename T> void dprint(T begin, T end) {\n    for (auto i = begin; i != end; i++) {\n\t\tcerr << (*i) << \" \";\n    }\n    cerr << \"\\n\";\n}\n\nint main() {\n\tint n, k;\n\tcin >> n >> k;\n\tvector<int> vv;\n\tfor (int i = 0; i < n; ++i)\n\t\tvv.push_back(i + 1);\n\tfor (int i = 0; i < k; ++i) {\n\t\tint a;\n\t\tcin >> a;\n\t\ta %= vv.size();\n\t\tfor (int j = 0; j < a; ++j)\n\t\t\trotate(vv.begin(), vv.begin() + 1, vv.end());\n\t\tcout << vv[0] << \" \";\n\t\tvv.erase(vv.begin());\n\t}\n\tcout << \"\\n\";\n\treturn 0;\n}\n\n\n", "interactive": false, "noSolution": false, "noTutorial": false}