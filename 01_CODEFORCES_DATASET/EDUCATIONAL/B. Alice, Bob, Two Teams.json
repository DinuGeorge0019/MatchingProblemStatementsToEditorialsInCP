{"link": "https://codeforces.com//contest/632/problem/B", "problemId": "50144", "shortId": "632B", "contest_number": "632", "name": "B. Alice, Bob, Two Teams", "statement": "Alice and Bob are playing a game. The game involves splitting up game pieces into two teams. There are  pieces, and the -th piece has a strength .The way to split up game pieces is split into several steps:  First, Alice will split the pieces into two different groups  and . This can be seen as writing the assignment of teams of a piece in an  character string, where each character is  or .  Bob will then choose an arbitrary prefix or suffix of the string, and flip each character in that suffix (i.e. change  to  and  to ). He can do this step at most once.  Alice will get all the pieces marked  and Bob will get all the pieces marked . The strength of a player is then the sum of strengths of the pieces in the group.Given Alice's initial split into two teams, help Bob determine an optimal strategy. Return the maximum strength he can achieve.", "input": "The first line contains integer  () \u2014 the number of game pieces. The second line contains  integers  () \u2014 the strength of the -th piece. The third line contains  characters  or  \u2014 the assignment of teams after the first step (after Alice's step).", "output": "Print the only integer  \u2014 the maximum strength Bob can achieve.", "tutorial": "Let's calculate the prefix sums for all numbers (and store it in array ) and for numbers with letter B (and store it in array ). Now we can find the sum of all numbers in any segment in  time and the sum of numbers with letter B.\nLet's iterate over prefix or suffix to flip and calculate the sum in that case by formulas:  for prefixes and  for suffixes.\n", "solution": "\n            #include <bits/stdc++.h>\n\u00a0\n#define forn(i, n) for (int i = 0; i < int(n); i++)\n#define nfor(i, n) for (int i = int(n) - 1; i >= 0; i--)\n#define fore(i, l, r) for (int i = int(l); i < int(r); i++)\n#define correct(x, y, n, m) (0 <= (x) && (x) < (n) && 0 <= (y) && (y) < (m))\n#define all(a) (a).begin(), (a).end()\n#define sz(a) int((a).size())\n#define pb(a) push_back(a)\n#define mp(x, y) make_pair((x), (y))\n#define x first\n#define y second\n\u00a0\nusing namespace std;\n\u00a0\ntypedef long long li;\ntypedef long double ld;\ntypedef pair<int, int> pt;\n\u00a0\ntemplate<typename X> inline X abs(const X& a) { return a < 0? -a: a; }\ntemplate<typename X> inline X sqr(const X& a) { return a * a; }\n\u00a0\ntemplate<typename A, typename B> inline ostream& operator<< (ostream& out, const pair<A, B>& p) { return out << \"(\" << p.x << \", \" << p.y << \")\"; }\ntemplate<typename T> inline ostream& operator<< (ostream& out, const vector<T>& a) { out << \"[\"; forn(i, sz(a)) { if (i) out << ','; out << ' ' << a[i]; } return out << \" ]\"; } \ntemplate<typename T> inline ostream& operator<< (ostream& out, const set<T>& a) { return out << vector<T>(all(a)); }\n\u00a0\ninline ld gett() { return clock() / ld(CLOCKS_PER_SEC); }\n\u00a0\nconst int INF = int(1e9);\nconst li INF64 = li(1e18);\nconst ld EPS = 1e-9, PI = 3.1415926535897932384626433832795;\n\u00a0\nconst int N = 500500;\n\u00a0\nint n, p[N];\nchar s[N];\n\u00a0\ninline bool read() {\n\u00a0 \u00a0 if (!(cin >> n)) return false;\n\u00a0 \u00a0 forn(i, n) assert(scanf(\"%d\", &p[i]) == 1);\n\u00a0 \u00a0 assert(gets(s));\n\u00a0 \u00a0 assert(gets(s));\n\u00a0 \u00a0 return true;\n}\n\u00a0\nli s1[N], s2[N];\n\u00a0\ninline void solve() {\n\u00a0 \u00a0 forn(i, n) s1[i + 1] = s1[i] + (s[i] == 'B' ? p[i] : 0);\n\u00a0 \u00a0 forn(i, n) s2[i + 1] = s2[i] + p[i];\n\u00a0 \u00a0 \n\u00a0 \u00a0 auto sum = [](li* s, int l, int r) { return s[r + 1] - s[l]; };\n\u00a0\n\u00a0 \u00a0 li ans = 0;\n\u00a0 \u00a0 forn(i, n) {\n\u00a0 \u00a0 \u00a0 \u00a0 ans = max(ans, sum(s2, 0, i) - 2 * sum(s1, 0, i));\n\u00a0 \u00a0 \u00a0 \u00a0 ans = max(ans, sum(s2, i, n - 1) - 2 * sum(s1, i, n - 1));\n\u00a0 \u00a0 }\n\u00a0 \u00a0 ans += sum(s1, 0, n - 1);\n\u00a0 \u00a0 cout << ans << endl;\n}\n\u00a0\nint main() {\n#ifdef SU1\n\u00a0 \u00a0 assert(freopen(\"input.txt\", \"rt\", stdin));\n\u00a0 \u00a0 //assert(freopen(\"output.txt\", \"wt\", stdout));\n#endif\n\u00a0 \u00a0 \n\u00a0 \u00a0 cout << setprecision(10) << fixed;\n\u00a0 \u00a0 cerr << setprecision(5) << fixed;\n\u00a0\n\u00a0 \u00a0 while (read()) {\n\u00a0 \u00a0 \u00a0 \u00a0 ld stime = gett();\n\u00a0 \u00a0 \u00a0 \u00a0 solve();\n\u00a0 \u00a0 \u00a0 \u00a0 cerr << \"Time: \" << gett() - stime << endl;\n\u00a0 \u00a0 \u00a0 \u00a0 //break;\n\u00a0 \u00a0 }\n\u00a0 \u00a0 \n\u00a0 \u00a0 return 0;\n}\n        ", "interactive": false, "noSolution": false, "noTutorial": false}