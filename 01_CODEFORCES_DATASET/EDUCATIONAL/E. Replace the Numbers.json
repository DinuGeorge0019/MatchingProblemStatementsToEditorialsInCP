{"link": "https://codeforces.com//contest/1620/problem/E", "problemId": "1233292", "shortId": "1620E", "contest_number": "1620", "name": "E. Replace the Numbers", "statement": "You have an array of integers (initially empty).You have to perform  queries. Each query is of one of two types:   \" \"\u00a0\u2014 add the element  to the end of the array;  \"  \"\u00a0\u2014 replace all occurrences of  in the array with . Find the resulting array after performing all the queries.", "input": "The first line contains a single integer  ()\u00a0\u2014 the number of queries. Next  lines contain queries (one per line). Each query is of one of two types:    \" \" ();  \"  \" ().  It's guaranteed that there is at least one query of the first type.", "output": "In a single line, print  integers\u00a0\u2014 the resulting array after performing all the queries, where  is the number of queries of the first type.", "tutorial": "Let's solve the problem from the end. Let's maintain the array \u00a0\u2014 what number will  become if we apply to it all the already considered queries of type . If the current query is of the first type, then we simply add  to the resulting array. If the current query is of the second type, then we have to change the value of . Since all occurrences of  must be replaced with , it is enough to assign .Since we process each query in , the final complexity is .There is also an alternative solution. Let's process queries in the direct order. Let's store all its positions in an array for each number. Then for the first query, it is enough to put the index in the corresponding array of positions. And for a query of the second type, we have to move all the positions of the number  into an array of positions of the number . The naive implementation is obviously too slow, but we can use the small to large method, then the complexity of the solution will be .", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int N = 500 * 1000 + 13;\n\nint main() {\n  int q;\n  scanf(\"%d\", &q);\n  vector<int> t(q), x(q), y(q);\n  for (int i = 0; i < q; ++i) {\n    scanf(\"%d%d\", &t[i], &x[i]);\n    if (t[i] == 2) scanf(\"%d\", &y[i]);\n  }\n  vector<int> p(N);\n  iota(p.begin(), p.end(), 0);\n  vector<int> ans;\n  for (int i = q - 1; i >= 0; --i) {\n    if (t[i] == 1) {\n      ans.push_back(p[x[i]]);\n    } else {\n      p[x[i]] = p[y[i]];\n    }\n  }\n  reverse(ans.begin(), ans.end());\n  for (int &x : ans) printf(\"%d \", x);\n} ", "interactive": false, "noSolution": false, "noTutorial": false}