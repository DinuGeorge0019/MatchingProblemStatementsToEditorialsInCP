{"link": "https://codeforces.com//contest/710/problem/B", "problemId": "68760", "shortId": "710B", "contest_number": "710", "name": "B. Optimal Point on a Line", "statement": "You are given  points on a line with their coordinates . Find the point  so the sum of distances to the given points is minimal.", "input": "The first line contains integer  () \u2014 the number of points on the line. The second line contains  integers  () \u2014 the coordinates of the given  points.", "output": "Print the only integer  \u2014 the position of the optimal point on the line. If there are several optimal points print the position of the leftmost one. It is guaranteed that the answer is always the integer.", "tutorial": "The function of the total distance is monotonic between any pair of adjacent points from the input, so the answer is always in some of the given points. We can use that observation to solve the problem by calculating the total distance for each point from the input and finding the optimal point.\nThe other solution uses the observation that the answer is always is the middle point (by index) in the sorted list of the given points. The last fact is also can be easily proven.\n", "solution": "const int N = 300300;\n\nint n, a[N];\n\nbool read() {\n\tif (!(cin >> n)) return false;\n\tforn(i, n) assert(scanf(\"%d\", &a[i]) == 1);\n\treturn true;\n}\n\nvoid solve() {\n\tsort(a, a + n);\n\n\tli suml = 0, sumr = accumulate(a, a + n, 0ll);\n\tli ansv = LLONG_MAX, ansp = LLONG_MIN;\n\tforn(i, n) {\n\t\tli curv = li(i) * a[i] - suml;\n\t\tcurv += sumr - li(n - i) * a[i];\n\t\tif (ansv > curv) {\n\t\t\tansv = curv;\n\t\t\tansp = a[i];\n\t\t}\n\t\tsuml += a[i];\n\t\tsumr -= a[i];\n\t}\n\tassert(sumr == 0);\n\n\tassert(ansv != LLONG_MAX);\n\tcerr << \"ansv: \" << ansv << endl;\n\tcout << ansp << endl;\n}", "interactive": false, "noSolution": false, "noTutorial": false}