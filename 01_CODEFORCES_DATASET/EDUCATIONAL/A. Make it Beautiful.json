{"link": "https://codeforces.com//contest/1783/problem/A", "problemId": "1728810", "shortId": "1783A", "contest_number": "1783", "name": "A. Make it Beautiful", "statement": "An array  is called  if it contains  element which is equal to the . If the array is not ugly, it is .For example:  the array  is ugly: the element  is equal to ;  the array  is ugly: the element  (the second one) is equal to ;  the array  is beautiful: , , , , so there is no element which is equal to the sum of all elements before it. You are given an array  such that . You have to  the elements of  in such a way that the resulting array is beautiful. Note that you are not allowed to insert new elements or erase existing ones, you can only change the order of elements of . You are allowed to keep the array  unchanged, if it is beautiful.", "input": "The first line contains one integer  () \u2014 the number of test cases. Each test case consists of two lines. The first line contains one integer  (). The second line contains  integers  ().", "output": "For each test case, print the answer as follows:   if it is impossible to reorder the elements of  in such a way that it becomes beautiful, print ;  otherwise, in the first line, print . In the second line, print  integers \u2014 any beautiful array which can be obtained from  by reordering its elements. If there are multiple such arrays, print any of them. ", "tutorial": "If we put the maximum in the array on the first position, then for every element, starting from the third one, the sum of elements before it will be greater than it (since that sum is greater than the maximum value in the array). So, the only element that can make our array ugly is the second element. We need to make sure that it is not equal to the first element.Let's put the maximum element on the first position, the minimum element on the second position, and then fill the rest of the array arbitrarily. The only case when it fails is when the maximum element is equal to the minimum element \u2014 and it's easy to see that if the maximum is equal to the minimum, then the first element of the array will be equal to the second element no matter what, and the array cannot become beautiful.So, the solution is to check if the maximum is different from the minimum, and if it is so, put them on the first two positions, and the order of remaining elements does not matter. Note that the given array is sorted, so the minimum is the first element, the maximum is the last element.", "solution": "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if a[0] == a[n - 1]:\n        print('NO')\n    else:\n        print('YES')\n        print(a[n - 1], end = ' ')\n        print(*(a[0:n-1]))", "interactive": false, "noSolution": false, "noTutorial": false}