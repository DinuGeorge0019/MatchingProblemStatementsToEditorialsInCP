{"link": "https://codeforces.com//contest/888/problem/D", "problemId": "133217", "shortId": "888D", "contest_number": "888", "name": "D. Almost Identity Permutations", "statement": "A permutation  of size  is an array such that every integer from  to  occurs exactly once in this array.Let's call a permutation an  iff there exist at least  indices  () such that .Your task is to count the number of  permutations for given numbers  and .", "input": "The first line contains two integers  and  (, ).", "output": "Print the number of  permutations for given  and .", "tutorial": "Let's iterate on  \u2014 the number of indices such that . Obviously, .How to count the number of permutations with fixed ? First of all, we need to choose the indices that have the property  \u2014 there are  ways to do this. Secondly, we need to construct a permutation  for chosen indices such that for every chosen index ; permutations with this property are called , and the number of derangements of fixed size can be calculated using exhaustive search (since ).So the answer is , where  is the number of derangements of size .", "solution": "// eddy1021\n#pragma GCC optimize(\"O3\")\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef double D;\ntypedef long double LD;\ntypedef long long LL;\ntypedef pair<int,int> PII;\ntypedef pair<LL,LL> PLL;\n#define mod9 1000000009LL\n#define mod7 1000000007LL\n#define INF  1023456789LL\n#define INF16 10000000000000000LL\n#define eps 1e-9\n#define SZ(x) (int)(x).size()\n#define ALL(x) (x).begin(), (x).end()\n#define IOS ios_base::sync_with_stdio(0); cin.tie(0)\n#ifndef ONLINE_JUDGE\n#define debug(...) printf(__VA_ARGS__)\n#else \n#define debug(...)\n#endif\ninline LL getint(){\n  LL _x=0,_tmp=1; char _tc=getchar();    \n  while( (_tc<'0'||_tc>'9')&&_tc!='-' ) _tc=getchar();\n  if( _tc == '-' ) _tc=getchar() , _tmp = -1;\n  while(_tc>='0'&&_tc<='9') _x*=10,_x+=(_tc-'0'),_tc=getchar();\n  return _x*_tmp;\n}\ninline LL add( LL _x , LL _y , LL _mod = mod7 ){\n  _x += _y;\n  return _x >= _mod ? _x - _mod : _x;\n}\ninline LL sub( LL _x , LL _y , LL _mod = mod7 ){\n  _x -= _y;\n  return _x < 0 ? _x + _mod : _x;\n}\ninline LL mul( LL _x , LL _y , LL _mod = mod7 ){\n  _x *= _y;\n  return _x >= _mod ? _x % _mod : _x;\n}\nLL mypow( LL _a , LL _x , LL _mod ){\n  if( _x == 0 ) return 1LL;\n  LL _ret = mypow( mul( _a , _a , _mod ) , _x >> 1 , _mod );\n  if( _x & 1 ) _ret = mul( _ret , _a , _mod );\n  return _ret;\n}\nLL mymul( LL _a , LL _x , LL _mod ){\n  if( _x == 0 ) return 0LL;\n  LL _ret = mymul( add( _a , _a , _mod ) , _x >> 1 , _mod );\n  if( _x & 1 ) _ret = add( _ret , _a , _mod );\n  return _ret;\n}\ninline bool equal( D _x ,  D _y ){\n  return _x > _y - eps && _x < _y + eps;\n}\nvoid sleep( double sec = 1021 ){\n  clock_t s = clock();\n  while( clock() - s < CLOCKS_PER_SEC * sec );\n}\n#define Bye exit(0)\nint __ = 1 , _cs;\n/*********default*********/\nvoid build(){\n\n}\nLL n , k;\nvoid init(){\n  n = getint();\n  k = getint();\n}\ninline LL C( LL a , LL b ){\n  LL ret = 1;\n  for( LL i = 0 ; i < b ; i ++ )\n    ret *= ( a - i );\n  for( LL i = 0 ; i < b ; i ++ )\n    ret /= ( b - i );\n  return ret;\n}\nLL cal( LL x ){\n  if( x == 1 ) return 0;\n  if( x == 0 ) return 1;\n  LL way = C( n , x );\n  if( x == 2 ) return way;\n  if( x == 3 ) return way * 2;\n  return way * 9;\n}\nvoid solve(){\n  LL ans = 0;\n  for( int i = 0 ; i <= k ; i ++ )\n    ans += cal( i );\n  cout << ans << endl;\n}\nint main(){\n  build();\n  //__ = getint();\n  while( __ -- ){\n    init();\n    solve();\n  }\n}\n", "interactive": false, "noSolution": false, "noTutorial": false}