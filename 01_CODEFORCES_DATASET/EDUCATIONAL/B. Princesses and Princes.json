{"link": "https://codeforces.com//contest/1327/problem/B", "problemId": "571325", "shortId": "1327B", "contest_number": "1327", "name": "B. Princesses and Princes", "statement": "The King of Berland Polycarp LXXXIV has  daughters. To establish his power to the neighbouring kingdoms he wants to marry his daughters to the princes of these kingdoms. As a lucky coincidence there are  other kingdoms as well.So Polycarp LXXXIV has enumerated his daughters from  to  and the kingdoms from  to . For each daughter he has compiled a list of kingdoms princes of which she wanted to marry.Polycarp LXXXIV is very busy, so he finds a couple for his daughters greedily one after another.For the first daughter he takes  and marries the daughter to their prince. For the second daughter he takes . If there are no free princes in the list then the daughter marries nobody and Polycarp LXXXIV proceeds to the next daughter. The process ends after the -th daughter.For example, let there be  daughters and kingdoms, the lists daughters have are , , , , respectively.  In that case daughter  marries the prince of kingdom , daughter  marries the prince of kingdom , daughter  marries the prince of kingdom , leaving daughter  nobody to marry to.Actually, before starting the marriage process Polycarp LXXXIV has the time to convince one of his daughters that some prince is also worth marrying to. Effectively, that means that he can add exactly one kingdom to exactly one of his daughter's list. Polycarp LXXXIV wants to increase the number of married couples.Unfortunately, what he doesn't have the time for is determining what entry to add. If there is no way to increase the total number of married couples then output that the marriages are already optimal. Otherwise, find such an entry that the total number of married couples increases if Polycarp LXXXIV adds it.If there are multiple ways to add an entry so that the total number of married couples increases then print any of them.For your and our convenience you are asked to answer  independent test cases.", "input": "The first line contains a single integer  () \u2014 the number of test cases. Then  test cases follow. The first line of each test case contains a single integer  () \u2014 the number of daughters and the number of kingdoms. Each of the next  lines contains the description of each daughter's list. The first integer  () is the number of entries in the -th daughter's list. After that  distinct integers follow  () \u2014 the indices of the kingdoms in the list  (). It's guaranteed that the total number of daughters over all test cases does not exceed . It's also guaranteed that the total number of kingdoms in lists over all test cases does not exceed .", "output": "For each test case print the answer to it. Print \"\" in the first line if Polycarp LXXXIV can add some kingdom to some of his daughter's list so that the total number of married couples increases. The second line then should contain two integers \u2014 the index of the daughter and the index of the kingdom Polycarp LXXXIV should add to that daughter's list. If there are multiple ways to add an entry so that the total number of married couples increases then print any of them. Otherwise the only line should contain one word \"\".", "tutorial": "Simulate the process without adding the new entry. For this you can just maintain an array , -th value of which is true if the -th prince is married and false otherwise.Now observe that there are two possible outcomes:   Every daughter is married \u2014 the answer is optimal.  There is a daughter who isn't married. That means that there is a free prince as well. Marry them to each other because doing that won't affect any other marriages and add a new one to the answer. Overall complexity: .", "solution": "from sys import stdin, stdout\n\nt = int(stdin.readline())\nfor _ in range(t):\n    n = int(stdin.readline())\n    used = [False for i in range(n)]\n    v = -1\n    for i in range(n):\n        l = [int(x) - 1 for x in stdin.readline().split()][1:]\n        for j in l:\n            if not used[j]:\n                used[j] = True\n                break\n        else:\n            v = i\n    if v == -1:\n        stdout.write(\"OPTIMAL\\n\")\n    else:\n        u = used.index(False)\n        stdout.write(\"IMPROVE\\n\" + str(v + 1) + \" \" + str(u + 1) + \"\\n\")", "interactive": false, "noSolution": false, "noTutorial": false}