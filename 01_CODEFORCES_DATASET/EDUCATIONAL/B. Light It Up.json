{"link": "https://codeforces.com//contest/1000/problem/B", "problemId": "193655", "shortId": "1000B", "contest_number": "1000", "name": "B. Light It Up", "statement": "Recently, you bought a brand new smart lamp with programming features. At first, you set up a schedule to the lamp. Every day it will turn power on at moment  and turn power off at moment . Moreover, the lamp allows you to set a program of switching its state (states are \"lights on\" and \"lights off\"). Unfortunately, some program is already installed into the lamp.The lamp allows only  programs. Good program can be represented as a non-empty array , where . All  must be integers. Of course, preinstalled program is a good program.The lamp follows program  in next manner: at moment  turns power and light on. Then at moment  the lamp flips its state to opposite (if it was lit, it turns off, and vice versa). The state of the lamp flips instantly: for example, if you turn the light off at moment  and then do nothing, the total time when the lamp is lit will be . Finally, at moment  the lamp is turning its power off regardless of its state.Since you are not among those people who read instructions, and you don't understand the language it's written in, you realize (after some testing) the only possible way to alter the preinstalled program. You can  element into the program , so it still should be a  program after alteration. Insertion can be done between any pair of consecutive elements of , or even at the begining or at the end of .Find such a way to alter the program that the total time when the lamp is lit is maximum possible. Maybe you should leave program untouched. If the lamp is lit from  till moment , then its lit for  units of time. Segments of time when the lamp is lit are summed up.", "input": "First line contains two space separated integers  and  (, ) \u2014 the length of program  and the moment when power turns off. Second line contains  space separated integers  () \u2014 initially installed program .", "output": "Print the only integer \u2014 maximum possible total time when the lamp is lit.", "tutorial": "At first, let's insert  and  in array , so all possible positions for inserting will always belong to . At second, let  be value to insert and . It can be proven, that it's always optimal to move  to  or to . So, for each  we need to check only  and . To check it fast enough, we need to know total time of lamp is lit for each prefix and precalculate for each , total time of lamp is lit if starting from  light is on / lights is off.Result complexity is .", "solution": "#include<bits/stdc++.h>\n\nusing namespace std;\n\nint n, M;\nvector<int> a;\n\ninline bool read() {\n\tif(!(cin >> n >> M))\n\t\treturn false;\n\ta.assign(n, 0);\n\tfor(int i = 0; i < n; i++)\n\t\tscanf(\"%d\", &a[i]);\n\treturn true;\n}\n\nvector<int> f[2];\n\ninline void solve() {\n\ta.insert(a.begin(), 0);\n\ta.push_back(M);\n\t\n\tf[0].assign(a.size(), 0);\n\tf[1].assign(a.size(), 0);\n\t\n\tfor(int i = int(a.size()) - 2; i >= 0; i--) {\n\t\tf[0][i] = f[1][i + 1];\n\t\tf[1][i] = (a[i + 1] - a[i]) + f[0][i + 1];\n\t}\n\t\n\tint ans = f[1][0];\n\tfor(int i = 0; i + 1 < int(a.size()); i++) {\n\t\tif(a[i + 1] - a[i] < 2)\n\t\t\tcontinue;\n\t\t\n\t\tint tp = (i & 1) ^ 1;\n\t\tint pSum = f[1][0] - f[tp][i];\n\t\tans = max(ans, pSum + (a[i + 1] - a[i] - 1) + f[tp][i + 1]);\n\t}\n\tcout << ans << endl;\n}\n\nint main() {\n#ifdef _DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin);\n#endif\n\tif(read())\n\t\tsolve();\n\treturn 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}