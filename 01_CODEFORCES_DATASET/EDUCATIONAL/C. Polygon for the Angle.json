{"link": "https://codeforces.com//contest/1096/problem/C", "problemId": "275410", "shortId": "1096C", "contest_number": "1096", "name": "C. Polygon for the Angle", "statement": "You are given an angle . The Jury asks You to find such  -gon (regular polygon with  vertices) that it has three vertices ,  and  (they can be non-consecutive) with  or report that there is no such -gon.  If there are several answers, print the  one. It is guarantied that if answer exists then it doesn't exceed .", "input": "The first line contains single integer  () \u2014 the number of queries.  Each of the next  lines contains one integer  () \u2014 the angle measured . ", "output": "For each query print single integer  () \u2014 minimal possible number of vertices in the regular -gon or  if there is no such .", "tutorial": "At first, let prove that all possible angles in the regular -gon equal to , where . To prove it we can build circumscribed circle around -gon. Then the circle will be divided on  equal arcs with lengths . Any possible angle in the -gon is a inscribed angle in the circle and equal to half of central angle. Any central angle, in turn, equals to sum of some consecitive  arcs. In result, any angle equal to . The maximal possible angle is reached from three consecutive vertices and equal (by properties of regular polygons) to .So, we need to find minimal integer  such that , where  is integer and . Its equivalent to find minimal integer solution of . Let , then we can divide both parts on .In result, . Since , then  must divide . Analogically,  must divide . Then, solution is next:  and .We are finding the minimal solution, so  is almost always , except cases where  \u2014 here we must take , since we have restricition on .The picture for the futher visibility:   ", "solution": "#include<bits/stdc++.h>\nusing namespace std;\n\nint ang;\n\ninline bool read() {\n\tif(!(cin >> ang))\n\t\treturn false;\n\treturn true;\n}\n\ninline void solve() {\n\tint g = __gcd(ang, 180);\n\tint k = ang / g;\n\tint n = 180 / g;\n\t\n\tif(k + 1 == n)\n\t\tk *= 2, n *= 2;\n\tcout << n << endl;\n}\n\nint main() {\n#ifdef _DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin);\n\tint tt = clock();\n#endif\n\tcout << fixed << setprecision(15);\n\t\n\tint tc; cin >> tc;\n\twhile(tc--) {\n\t\tassert(read());\n\t\tsolve();\n\t\t\n#ifdef _DEBUG\n\t\tcerr << \"TIME = \" << clock() - tt << endl;\n\t\ttt = clock();\n#endif\n\t}\n\treturn 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}