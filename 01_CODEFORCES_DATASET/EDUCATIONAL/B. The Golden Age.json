{"link": "https://codeforces.com//contest/813/problem/B", "problemId": "108589", "shortId": "813B", "contest_number": "813", "name": "B. The Golden Age", "statement": " year in Berland is such a year that its number  can be represented as , where  and  are non-negative integer numbers. For example, if  and  then the years  and  are  (, ) and year  isn't  as there is no such representation for it.Such interval of years that there are no  years in it is called .You should write a program which will find maximum length of  which starts no earlier than the year  and ends no later than the year . If all years in the interval  are  then the answer is .", "input": "The first line contains four integer numbers , ,  and  (, ).", "output": "Print the maximum length of  within the interval . If all years in the interval  are  then print .", "tutorial": "Notice that  for  has no more than  powers which give numbers no greater than .So let's store all possible sums of all powers of  and . Now the answer to the query can be obtained in linear time by checking difference between neighbouring unlucky years in sorted order.Don't forget that you should handle multiplying of such big numbers very carefully. For example, instead of writingwhile (num <= 1e18)    num = num * xorwhile (num * x <= 1e18)    num = num * xyou should writewhile (num <= 1e18 / x)    num = num * xto avoid getting overflow errors of 64-bit type.Integer division will work fine in that case because  will never exceed  if  doesn't exceed .Overall complexity: .", "solution": "x,y,l,r=list(map(int,input().split()))\nb=set()\na=0\nb.add(l-1)\nb.add(r+1)\nfor i in range(100):\n  xx=x**i\n  if xx>r: break\n  for j in range(100):\n    rr=xx+(y**j)\n    if rr>r: break\n    if rr>=l:\n      b.add(rr)\nb=sorted(list(b))\nfor i in range(1,len(b)):\n  a=max(a,b[i]-b[i-1]-1)\nprint(a)\n", "interactive": false, "noSolution": false, "noTutorial": false}