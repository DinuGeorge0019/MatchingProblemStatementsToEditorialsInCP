{"link": "https://codeforces.com//contest/1187/problem/C", "problemId": "365119", "shortId": "1187C", "contest_number": "1187", "name": "C. Vasya And Array", "statement": "Vasya has an array .You don't know this array, but he told you  facts about this array. The -th fact is a triple of numbers ,  and  () and it means:  if  then subbarray  is sorted in non-decreasing order;  if  then subbarray  is not sorted in non-decreasing order. A subarray is not sorted if there is at least one pair of consecutive elements in this subarray such that the former is greater than the latter. For example if  then he could give you three facts:  (the subarray  is sorted),  (the subarray  is not sorted), and  (the subarray  is not sorted).You don't know the array . Find  array which satisfies all the given facts.", "input": "The first line contains two integers  and  (). Each of the next  lines contains three integers ,  and  (). If  then subbarray  is sorted. Otherwise (if ) subbarray  is not sorted.", "output": "If there is no array that satisfies these facts in only line print  (in any letter case). If there is a solution, print  (in any letter case). In second line print  integers  () \u2014 the array , satisfying all the given facts. If there are multiple satisfying arrays you can print any of them.", "tutorial": "Let's consider array , such that .Then subarray  is sorted in non-decreasing order if and only if all elements  are greater or equal to zero.So if we have fact , then all elements  must be greater or equal to zero.Let's create the following array :  if there is such a fact  that , and  otherwise.After that we create the following array : , and for all other indexes .This array  satisfies all facts  such that . So all we have to do is check that all remaining facts are satisfied.", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int N = int(3e5) + 99;\n\nint n, m;\nint l[N], r[N], s[N];\nint d[N];\nint dx[N];\nint res[N];\nint nxt[N];\n\nint main() {\n\tscanf(\"%d %d\", &n, &m);\n\tfor(int i = 0; i < m; ++i){\n\t\tscanf(\"%d %d %d\", s + i, l + i, r + i);\n\t\t--l[i], --r[i];\n\t\tif(s[i] == 1)\n\t\t\t++d[l[i]], --d[r[i]];\n\t}\n\n\tmemset(dx, -1, sizeof dx);\n\tint sum = 0;\n\tfor(int i = 0; i < n - 1; ++i){\n\t\tsum += d[i];\n\t\tif(sum > 0)\t\n\t\t\tdx[i] = 0;\n\t}\t\t\n\n\tres[0] = n;\n\tfor(int i = 1; i < n; ++i)\n\t\tres[i] = res[i - 1] + dx[i - 1];\t\n\n\tnxt[n - 1] = n - 1;\n\tfor(int i = n - 2; i >= 0; --i){\n\t\tif(res[i] <= res[i + 1])\n\t\t\tnxt[i] = nxt[i + 1];\n\t\telse \n\t\t\tnxt[i] = i;\n\t}\t\t\t\n\n\tfor(int i = 0; i < m; ++i){\n\t\tif(s[i] != (nxt[l[i]] >= r[i])){\n\t\t\tputs(\"NO\");\n\t\t\treturn 0;\t\t\n\t\t}\n\t}\t\n\n\tputs(\"YES\");\n\tfor(int i = 0; i < n; ++i)\n\t\tprintf(\"%d \", res[i]);\n\tputs(\"\");\n\n\treturn 0;\n}                             \t\n\n\n", "interactive": false, "noSolution": false, "noTutorial": false}