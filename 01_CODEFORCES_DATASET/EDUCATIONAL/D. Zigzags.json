{"link": "https://codeforces.com//contest/1400/problem/D", "problemId": "709186", "shortId": "1400D", "contest_number": "1400", "name": "D. Zigzags", "statement": "You are given an array . Calculate the number of tuples  such that:   ;   and ; ", "input": "The first line contains a single integer  ()\u00a0\u2014 the number of test cases. The first line of each test case contains a single integer  ()\u00a0\u2014 the size of the array . The second line of each test case contains  integers  ()\u00a0\u2014 the array . It's guaranteed that the sum of  in one test doesn't exceed .", "output": "For each test case, print the number of described tuples.", "tutorial": "We can rethink this as counting the number of equal pairs  where . To do this we loop over  from right to left and make sure we have all  pairs where  counted in a map. Then we simply iterate over  and add up the number of occurrences of each  in the map.\nFor implementation details, note that we don't actually want to use a map and make our code slower. We can just use an array of size  and convert the pair  to the number  since the  are in the range . As a bonus, even if the  were larger than , we could just compress them down to  and repeat the solution above. Code: 91019003\n", "solution": "#include <algorithm>\n#include <array>\n#include <cassert>\n#include <iostream>\n#include <vector>\nusing namespace std;\n\ntemplate<typename T> ostream& operator<<(ostream &os, const vector<T> &v) { os << '{'; string sep; for (const auto &x : v) os << sep << x, sep = \", \"; return os << '}'; }\ntemplate<typename T, size_t size> ostream& operator<<(ostream &os, const array<T, size> &arr) { os << '{'; string sep; for (const auto &x : arr) os << sep << x, sep = \", \"; return os << '}'; }\ntemplate<typename A, typename B> ostream& operator<<(ostream &os, const pair<A, B> &p) { return os << '(' << p.first << \", \" << p.second << ')'; }\n\nvoid dbg_out() { cerr << endl; }\ntemplate<typename Head, typename... Tail> void dbg_out(Head H, Tail... T) { cerr << ' ' << H; dbg_out(T...); }\n\n#ifdef NEAL_DEBUG\n#define dbg(...) cerr << \"(\" << #__VA_ARGS__ << \"):\", dbg_out(__VA_ARGS__)\n#else\n#define dbg(...)\n#endif\n\n\nvoid run_case() {\n    int N;\n    cin >> N;\n    vector<int> A(N);\n\n    for (auto &a : A) {\n        cin >> a;\n        a--;\n    }\n\n    vector<int> freq(N * N, 0);\n    int64_t total = 0;\n\n    for (int j = N - 1; j >= 0; j--) {\n        int k = j + 1;\n\n        for (int l = k + 1; l < N; l++)\n            freq[A[k] * N + A[l]]++;\n\n        for (int i = 0; i < j; i++)\n            total += freq[A[i] * N + A[j]];\n    }\n\n    cout << total << '\\n';\n}\n\nint main() {\n    ios::sync_with_stdio(false);\n#ifndef NEAL_DEBUG\n    cin.tie(nullptr);\n#endif\n\n    int tests;\n    cin >> tests;\n\n    while (tests-- > 0)\n        run_case();\n}\n", "interactive": false, "noSolution": false, "noTutorial": false}