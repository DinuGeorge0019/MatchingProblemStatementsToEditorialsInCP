{"link": "https://codeforces.com//contest/954/problem/I", "problemId": "167346", "shortId": "954I", "contest_number": "954", "name": "I. Yet Another String Matching Problem", "statement": "Suppose you have two strings  and , and their length is equal. You may perform the following operation any number of times: choose two different characters  and , and replace every occurence of  in both strings with . Let's denote the  between strings  and  as the minimum number of operations required to make these strings equal. For example, if  is  and  is , the  between them is  \u2014 we may replace every occurence of  with , so  becomes , and then we may replace every occurence of  with , so both strings become .You are given two strings  and . For every substring of  consisting of  characters you have to determine the  between this substring and .", "input": "The first line contains the string , and the second \u2014 the string  (). Both strings consist of lowercase Latin letters from  to .", "output": "Print  integers. The -th of these integers must be equal to the  between the substring of  beginning at -th index with length  and the string .", "tutorial": "Unfortunately, it seems we failed to eliminate bitset solutions.The approach in our model solution is the following:Firstly, let's try to find some \"naive\" solution for calculating the distance between two strings. We may build an undirected graph where vertices represent letters, and edges represent that one letter must be transformed into another. Then all letters in the same component should become one letter, so the answer is the number of distinct letters minus the number of components.Then let's get back to original problem. For every substring of  we have to find which letters have to be merged to make it equal with . This can be done with the help of FFT: to find all positions in substrings of  with character  that coincide with occurences of  in , we may compute a convolution of two following arrays: set  to every position in  where occurs , and to every position in  where  occurs (all other elements should be ). After trying these convolutions for every pair of different characters, we compute the answer for every substring using DFS (or any other method).", "solution": "#include<bits/stdc++.h>\nusing namespace std;\ninline int read()\n{\n    int x=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x*f;\n}\n#define MN 262144\nconst double pi=acos(-1);\nstruct cp\n{\n\tdouble r,i;\n\tcp(double r=0,double i=0):r(r),i(i){}\n\tcp operator+(cp b){return cp(r+b.r,i+b.i);}\n\tcp operator-(cp b){return cp(r-b.r,i-b.i);}\n\tcp operator*(cp b){return cp(r*b.r-i*b.i,r*b.i+i*b.r);}\n}w[2][MN+5],x[MN+5],y[MN+5];\nint N,R[MN+5],u[MN+5][6][6],f[6];\nchar a[MN+5],b[MN+5];\nint gf(int k){return f[k]<0?k:f[k]=gf(f[k]);}\nvoid init(int n)\n{\n\tfor(N=1;N<=n;N<<=1);\n\tcp g(cos(2*pi/N),sin(2*pi/N));int i,j,k;\n\tfor(i=w[0][0].r=1;i<N;++i)w[0][i]=w[0][i-1]*g;\n\tfor(i=w[1][0].r=1;i<N;++i)w[1][i]=w[0][N-i];\n\tfor(i=j=0;i<N;R[++i]=j)for(k=N>>1;(j^=k)<k;k>>=1);\n}\nvoid fft(cp*x,int v)\n{\n\tint i,j,k;\n\tfor(i=0;i<N;++i)if(i<R[i])swap(x[i],x[R[i]]);\n\tfor(i=1;i<N;i<<=1)for(j=0;j<N;j+=i<<1)for(k=0;k<i;++k)\n\t{\n\t\tcp p=x[i+j+k]*w[v][N/(i<<1)*k];\n\t\tx[i+j+k]=x[j+k]-p;x[j+k]=x[j+k]+p;\n\t}\n\tif(v)for(i=0;i<N;++i)x[i].r/=N,x[i].i/=N;\n}\nint main()\n{\n\tint n,m,i,j,k,ans=0;\n\tscanf(\"%s%s\",a+1,b+1);\n\tn=strlen(a+1);m=strlen(b+1);init(n+n);\n\tfor(i=0;i<6;++i)for(j=0;j<6;++j)if(i!=j)\n\t{\n\t\tmemset(x,0,sizeof(x));memset(y,0,sizeof(y));\n\t\tfor(k=1;k<=n;++k)x[k]=a[k]==i+'a';\n\t\tfor(k=1;k<=m;++k)y[n-k]=b[k]==j+'a';\n\t\tfft(x,0);fft(y,0);\n\t\tfor(k=0;k<N;++k)x[k]=x[k]*y[k];\n\t\tfft(x,1);\n\t\tfor(k=0;k<=n-m;++k)u[k][i][j]=x[n+k].r>0.5;\n\t}\n\tfor(k=0;k<=n-m;++k)\n\t{\n\t\tmemset(f,-1,sizeof(f));ans=0;\n\t\tfor(i=0;i<6;++i)for(j=0;j<6;++j)if(u[k][i][j]&&gf(i)!=gf(j))f[gf(i)]=gf(j),++ans;\n\t\tprintf(\"%d \",ans);\n\t}\n\treturn 0;\n}", "interactive": false, "noSolution": false, "noTutorial": false}