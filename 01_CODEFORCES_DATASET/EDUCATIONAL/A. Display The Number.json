{"link": "https://codeforces.com//contest/1295/problem/A", "problemId": "526700", "shortId": "1295A", "contest_number": "1295", "name": "A. Display The Number", "statement": "You have a large electronic screen which can display up to  decimal digits. The digits are displayed in the same way as on different electronic alarm clocks: each place for a digit consists of  segments which can be turned on and off to compose different digits. The following picture describes how you can display all  decimal digits:As you can see, different digits may require different number of segments to be turned on. For example, if you want to display , you have to turn on  segments of the screen, and if you want to display , all  segments of some place to display a digit should be turned on.You want to display a really large integer on the screen. Unfortunately, the screen is bugged: no more than  segments can be turned on simultaneously. So now you wonder what is the greatest integer that can be displayed by turning on no more than  segments.Your program should be able to process  different test cases.", "input": "The first line contains one integer  () \u2014 the number of test cases in the input. Then the test cases follow, each of them is represented by a separate line containing one integer  () \u2014 the maximum number of segments that can be turned on in the corresponding testcase. It is guaranteed that the sum of  over all test cases in the input does not exceed .", "output": "For each test case, print the greatest integer that can be displayed by turning on no more than  segments of the screen. Note that the answer may not fit in the standard -bit or -bit integral data type.", "tutorial": "First of all, we don't need to use any digits other than  and . If we use any other digit, it consists of  or more segments, so it can be replaced by two 's and the number will become greater. For the same reason we don't need to use more than one : if we have two, we can replace them with three 's.Obviously, it is always optimal to place  before . So our number is either a sequence of 's, or a  and a sequence of 's. We should use  only if  is odd, because if  is even, it will decrease the number of digits in the result.", "solution": "t = int(input())\nfor i in range(t):\n    n = int(input())\n    if(n % 2 == 1):\n        print(7, end='')\n        n -= 3\n    while(n > 0):\n        print(1, end='')\n        n -= 2\n    print()", "interactive": false, "noSolution": false, "noTutorial": false}