{"link": "https://codeforces.com//contest/1221/problem/D", "problemId": "415610", "shortId": "1221D", "contest_number": "1221", "name": "D. Make The Fence Great Again", "statement": "You have a fence consisting of  vertical boards. The width of each board is . The height of the -th board is . You think that the fence is  if there is no pair of adjacent boards having the same height. More formally, the fence is great if and only if for all indices from  to , the condition  holds.Unfortunately, it is possible that now your fence is not great. But you can change it! You can increase the length of the -th board by , but you have to pay  rubles for it. The length of each board can be increased any number of times (possibly, zero).Calculate the minimum number of rubles you have to spend to make the fence great again!You have to answer  independent queries.", "input": "The first line contains one integer  () \u2014 the number of queries. The first line of each query contains one integers  () \u2014 the number of boards in the fence. The following  lines of each query contain the descriptions of the boards. The -th line contains two integers  and  () \u2014 the length of the -th board and the price for increasing it by , respectively. It is guaranteed that sum of all  over all queries not exceed . ", "output": "For each query print one integer \u2014 the minimum number of rubles you have to spend to make the fence great.", "tutorial": "Let's notice that in optimal answer all boards will be increased by no more than two. It is true because if it is beneficial to increase the length of some board by three or more (denote its length as ) then increasing to the length ,  or  is cheaper and one of these boards is not equal to any of its adjacent boards.Noticing this, we can write a solution based on dynamic programming. Let's  is minimum amount of money for making fence  great, moreover the last board(with index ) we increase by . Then value  can be calculated as follows:", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int N = int(3e5) + 99;\nconst long long INF64 = (long long)(1e18) + 100;\n\nint t;\nint n;\nint a[N];\nint b[N];\nlong long dp[3][N];\n\nlong long calc(int add, int pos){\n\tlong long &res = dp[add][pos];\n\tif(res != -1) return res;\n\n\tres = INF64;\n\tif(pos == n) return res = 0;\n\tfor(long long x = 0; x <= 2; ++x)\n\t\tif(pos == 0 || a[pos] + x != a[pos - 1] + add)\n\t\t\tres = min(res, calc(x, pos + 1) + x * b[pos]);\n\t\t\n\treturn res;\n}\n\nint main() {\t\n\tscanf(\"%d\", &t);\n\tfor(int tc = 0; tc < t; ++tc){\n\t\tscanf(\"%d\", &n);\n\t\tfor(int i = 0; i < n; ++i){\n\t\t\tscanf(\"%d\", a + i);\n\t\t\tscanf(\"%d\", b + i);\n\t\t}\n\n\t\tfor(int i = 0; i <= n; ++i) \n\t\t\tdp[0][i] = dp[1][i] = dp[2][i] = -1;\t\t\t\t\n\t\tprintf(\"%lld\\n\", calc(0, 0));\n\t}\n\treturn 0;\n} ", "interactive": false, "noSolution": false, "noTutorial": false}