{"link": "https://codeforces.com//contest/1380/problem/B", "problemId": "670984", "shortId": "1380B", "contest_number": "1380", "name": "B. Universal Solution", "statement": "Recently, you found a bot to play \"Rock paper scissors\" with. Unfortunately, the bot uses quite a simple algorithm to play: he has a string  of length  where each letter is either ,  or .While initializing, the bot is choosing a starting index  (), and then it can play any number of rounds. In the first round, he chooses \"Rock\", \"Scissors\" or \"Paper\" based on the value of :   if  is equal to  the bot chooses \"Rock\";  if  is equal to  the bot chooses \"Scissors\";  if  is equal to  the bot chooses \"Paper\"; In the second round, the bot's choice is based on the value of . In the third round\u00a0\u2014 on  and so on. After  the bot returns to  and continues his game.You plan to play  rounds and you've already figured out the string  but still don't know what is the starting index . But since the bot's tactic is so boring, you've decided to find  choices to each round to maximize the average number of wins.In other words, let's suggest your choices are  and if the bot starts from index  then you'll win in  rounds. Find  such that  is maximum possible.", "input": "The first line contains a single integer  ()\u00a0\u2014 the number of test cases. Next  lines contain test cases\u00a0\u2014 one per line. The first and only line of each test case contains string  (; )\u00a0\u2014 the string of the bot. It's guaranteed that the total length of all strings in one test doesn't exceed .", "output": "For each test case, print  choices  to maximize the average number of wins. Print them in the same manner as the string . If there are multiple optimal answers, print any of them.", "tutorial": "Let's look at the contribution of each choice  to the total number of wins  (we can look at \"total\" instead of \"average\", since \"average\" is equal to \"total\" divided by ). For example, let's look at the first choice : in  we compare  with , in \u00a0\u2014  with , in \u00a0\u2014  with  and so on.In the result, we compare  with all  once. So, to maximize the total sum, we need to choose  that beats the maximum number of  or, in other words, let's find the most frequent character in  and choose  that beats it.Okay, we found the optimal . But if we look at the contribution of any other  we can note that we compare any  with all  once. So we can choose all  equal to  which is equal to the choice that beats the most frequent choice in .", "solution": "fun main() {\n    val winBy = mapOf('R' to 'P', 'S' to 'R', 'P' to 'S')\n    repeat(readLine()!!.toInt()) {\n        val s = readLine()!!\n        val maxCnt = s.groupingBy { it }.eachCount().maxBy { it.value }!!.key\n        println(\"${winBy[maxCnt]}\".repeat(s.length))\n    }\n}", "interactive": false, "noSolution": false, "noTutorial": false}