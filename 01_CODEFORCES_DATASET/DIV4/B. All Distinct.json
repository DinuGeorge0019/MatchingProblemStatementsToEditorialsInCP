{"link": "https://codeforces.com//contest/1692/problem/B", "problemId": "1429116", "shortId": "1692B", "contest_number": "1692", "name": "B. All Distinct", "statement": "Sho has an array  consisting of  integers. An operation consists of choosing two distinct indices  and  and removing  and  from the array.For example, for the array , Sho can choose to remove indices  and . After this operation, the array becomes . Note that after any operation, the length of the array is reduced by two.After he made some operations, Sho has an array that has only  elements. In addition, he made operations such that the resulting array is the  possible. More formally, the array after Sho has made his operations respects these criteria:   No pairs such that () and  exist.  The length of  is maximized. Output the length of the final array.", "input": "The first line contains a single integer  ()\u00a0\u2014 the number of test cases. The first line of each test case contains a single integer  ()\u00a0\u2014 the length of the array. The second line of each test case contains  integers  ()\u00a0\u2014 the elements of the array.", "output": "For each test case, output a single integer\u00a0\u2014 the length of the final array. Remember that in the final array, all elements are different, and its length is maximum.", "tutorial": "Note that the size of the array doesn't change parity, since it always decreases by . Let's count the number of distinct elements, call it . If  is the same parity as  (the length of the array), then we can make sure all of these  distinct elements stay in the array by removing two elements at a time. Otherwise,  isn't the same parity as . Then  is the same parity as , and we can make sure  distinct elements stay in the array by removing two elements at a time. So the answer is  if  and  have the same parity, and  otherwise.For example:  has , . So  and  have the same parity, and we can get all distinct numbers  by removing , .Time complexity:  or , depending on the implementation.", "solution": "#include <bits/stdc++.h>\ntypedef long long  ll;\nusing namespace std;\n\nvoid solve()\n{\n\tint n, x;\n\tcin >> n;\n\tset<int> a;\n\tfor(int i = 0; i < n; i++)\n\t{\n\t\tcin >> x;\n\t\ta.insert(x);\n\t}\n\tif((n-a.size())%2 == 0)\n\t{\n\t\tcout << a.size() << endl;\n\t}\n\telse\n\t{\n\t\tcout << a.size()-1 << endl;\n\t}\n}\n\nint32_t main(){\n\tint t = 1;\n\tcin >> t;\n\twhile (t--) {\n\t\tsolve();\n\t}\n}", "interactive": false, "noSolution": false, "noTutorial": false}