{"link": "https://codeforces.com//contest/1352/problem/G", "problemId": "616899", "shortId": "1352G", "contest_number": "1352", "name": "G. Special Permutation", "statement": "A permutation of length  is an array , which contains every integer from  to  (inclusive) and, moreover, each number appears exactly once. For example,  is a permutation of length .For a given number  (), find a permutation  in which absolute difference (that is, the absolute value of difference) of any two neighboring (adjacent) elements is between  and , inclusive. Formally, find such permutation  that  for each  ().Print any such permutation for the given integer  or determine that it does not exist.", "input": "The first line contains an integer  () \u2014 the number of test cases in the input. Then  test cases follow. Each test case is described by a single line containing an integer  ().", "output": "Print  lines. Print a permutation that meets the given requirements. If there are several such permutations, then print any of them. If no such permutation exists, print .", "tutorial": "If  then there is no answer. You can do some handwork to be sure. Otherwise, the answer exists and there is one simple way to construct it: firstly, let's put all odd integers into the answer in decreasing order, then put , , and all other even numbers in increasing order. To test that it always works, you can run some kind of checker locally (you can check all  tests very fast, in less than one second, this may be very helpful sometimes).", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n\tint t;\n\tcin >> t;\n\twhile (t--) {\n\t\tint n;\n\t\tcin >> n;\n\t\tif (n < 4) {\n\t\t\tcout << -1 << endl;\n\t\t\tcontinue;\n\t\t}\n\t\tfor (int i = n; i >= 1; --i) {\n\t\t\tif (i & 1) cout << i << \" \";\n\t\t}\n\t\tcout << 4 << \" \" << 2 << \" \";\n\t\tfor (int i = 6; i <= n; i += 2) {\n\t\t\tcout << i << \" \";\n\t\t}\n\t\tcout << endl;\n\t}\n}", "interactive": false, "noSolution": false, "noTutorial": false}