{"link": "https://codeforces.com//contest/1676/problem/F", "problemId": "1394658", "shortId": "1676F", "contest_number": "1676", "name": "F. Longest Strike", "statement": "Given an array  of length  and an integer , you are tasked to find any two numbers  and  () such that:   For each  ,  appears in  at least  times (i.e.  or more array elements are equal to ).  The value  is maximized. If no numbers satisfy the conditions, output .For example, if  and , then:   for ,  the first condition fails because  does not appear at least  times.  for ,  the first condition holds, because  occurs at least  times in  and  occurs at least  times in .  for ,  the first condition holds, because  occurs at least  times in . A pair of  and  for which the first condition holds and  is maximal is , .", "input": "The first line of the input contains a single integer  () \u2014 the number of test cases. The description of test cases follows. The first line of each test case contains the integers  and  (, ) \u2014 the length of the array  and the minimum amount of times each number in the range  should appear respectively. Then a single line follows, containing  integers describing the array  (). It is guaranteed that the sum of  over all test cases does not exceed .", "output": "For each test case output  numbers,  and  that satisfy the conditions, or \"\" if no numbers satisfy the conditions. If multiple answers exist, you can output any.", "tutorial": "Let's call a value  if it appears at least  times. For example, if  and , then good values are .So we need to find the longest subarray of this array in which all values are consecutive. For example, the subarray  is the answer, because all values are good and the length of the array is longest.There are many ways to do this. For example, we can see when the difference between two elements is more than , and then break the array into parts based on that. For instance, . You can also iterate from left to right and keep track of the size of the current array.Time complexity: .", "solution": "#include <bits/stdc++.h>\nusing namespace std;\n \nvoid solve()\n{\n\tint n, k;\n\tcin >> n >> k;\n\tint a[n];\n\tmap<int, int> mp;\n\tfor(int i = 0; i < n; i++)\n\t{\n\t\tcin >> a[i];\n\t\tmp[a[i]]++;\n\t}\n\tvector<int> c;\n\tfor(auto x : mp)\n\t{\n\t\tif(x.second >= k)\n\t\t{\n\t\t\tc.push_back(x.first);\n\t\t}\n\t}\n\tif(c.size() == 0)\n\t{\n\t\tcout << -1 << endl;\n\t\treturn;\n\t}\n\tsort(c.begin(), c.end());\n\tint mx = 0;\n\tint lans = c[0], rans = c[0];\n\tint l = c[0];\n\tfor(int i = 1; i < c.size(); i++)\n\t{\n\t\tif(c[i]-1 == c[i-1])\n\t\t{\n\t\t\tif(c[i]-l > mx)\n\t\t\t{\n\t\t\t\tlans = l;\n\t\t\t\trans = c[i];\n\t\t\t\tmx = c[i]-l;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tl = c[i];\n\t\t}\n\t}\n\tcout << lans << \" \" << rans << endl;\n}\n\nint main(int argc, char * argv[])\n{\n\tint t;\n\tcin >> t;\n\twhile(t--)\n\t{\n\t\tsolve();\n\t}\n}\n", "interactive": false, "noSolution": false, "noTutorial": false}