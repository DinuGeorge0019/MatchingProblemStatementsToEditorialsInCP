{"link": "https://codeforces.com//contest/1352/problem/F", "problemId": "616898", "shortId": "1352F", "contest_number": "1352", "name": "F. Binary String Reconstruction", "statement": "For some binary string  (i.e. each character  is either '' or ''), all pairs of consecutive (adjacent) characters were written. In other words, all substrings of length  were written. For each pair (substring of length ), the number of '' (ones) in it was calculated.You are given three numbers:   \u2014 the number of such pairs of consecutive characters (substrings) where the number of ones equals ;   \u2014 the number of such pairs of consecutive characters (substrings) where the number of ones equals ;   \u2014 the number of such pairs of consecutive characters (substrings) where the number of ones equals . For example, for the string \"\", the following substrings would be written: \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\". Thus, , , .Your task is to restore  suitable binary string  from the given values . It is guaranteed that at least one of the numbers  is greater than . Also, it is guaranteed that a solution exists.", "input": "The first line contains an integer  () \u2014 the number of test cases in the input. Then test cases follow. Each test case consists of one line which contains three integers  (; ). It is guaranteed that the answer for given  exists.", "output": "Print  lines. Each of the lines should contain a binary string corresponding to a test case. If there are several possible solutions, print any of them.", "tutorial": "Consider case  separately and print the sting of  zeros or  ones correspondingly.Now our string has at least one pair \"\" or \"\". Let's form the pattern \"\" of length . So, all substrings with the sum  are satisfied. Now let's insert  zeros before the first zero, in this way we satisfy the substrings with the sum . And then just insert  ones before the first one, in this way we satisfy the substrings with the sum .", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n\nint main() {\n\tint t;\n\tcin >> t;\n\twhile (t--) {\n\t\tint n0, n1, n2;\n\t\tcin >> n0 >> n1 >> n2;\n\t\tif (n1 == 0) {\n\t\t\tif (n0 != 0) {\n\t\t\t\tcout << string(n0 + 1, '0') << endl;\n\t\t\t} else {\n\t\t\t\tcout << string(n2 + 1, '1') << endl;\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\t\tstring ans;\n\t\tfor (int i = 0; i < n1 + 1; ++i) {\n\t\t\tif (i & 1) ans += \"0\";\n\t\t\telse ans += \"1\";\n\t\t}\n\t\tans.insert(1, string(n0, '0'));\n\t\tans.insert(0, string(n2, '1'));\n\t\tcout << ans << endl;\n\t}\n}\n", "interactive": false, "noSolution": false, "noTutorial": false}