{"link": "https://codeforces.com//contest/1669/problem/F", "problemId": "1375143", "shortId": "1669F", "contest_number": "1669", "name": "F. Eating Candies", "statement": "There are  candies put from left to right on a table. The candies are numbered from left to right. The -th candy has weight . Alice and Bob eat candies. Alice can eat any number of candies from the left (she can't skip candies, she eats them in a row). Bob can eat any number of candies from the right (he can't skip candies, he eats them in a row). Of course, if Alice ate a candy, Bob can't eat it (and vice versa).They want to be fair. Their goal is to eat the same total weight of candies. What is the most number of candies they can eat in total?", "input": "The first line contains an integer  ()\u00a0\u2014 the number of test cases. The first line of each test case contains an integer  ()\u00a0\u2014 the number of candies on the table. The second line of each test case contains  integers  ()\u00a0\u2014 the weights of candies from left to right. It is guaranteed that the sum of  over all test cases does not exceed .", "output": "For each test case, print a single integer\u00a0\u2014 the maximum number of candies Alice and Bob can eat in total while satisfying the condition.", "tutorial": "We can solve the problem with a two pointers technique. Let  be the left pointer, initially at , and  be the right pointer, initially at . Let's store Alice and Bob's current totals as  and .Let's iterate  from the left to the right. For each , we should do the following.   Increase  by  (Alice eats the -th candy).  Move  leftwards until Bob's total is at least Alice's total, and update  every time we move.  If the two pointers have crossed, then both Alice and Bob took the same candy, which is not possible. So we should exit and output the current answer.  Otherwise, if  after this step, we should update the current answer to be the value that is equal to Alice and Bob. Both  and  move at most  times in total, so the solution runs in .", "solution": "t = int(input())\nfor test in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = 0\n    r = n - 1\n    suml = a[0]\n    sumr = a[n-1]\n    ans = 0\n    while l < r:\n        if suml == sumr:\n            ans = max(ans, l + 1 + n - r)\n\n        if suml <= sumr:\n            l+=1\n            suml+=a[l]\n\n        elif sumr < suml:\n            r-=1\n            sumr+=a[r]\n            \n    print(ans)", "interactive": false, "noSolution": false, "noTutorial": false}