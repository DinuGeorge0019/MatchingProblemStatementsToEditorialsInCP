{"link": "https://codeforces.com//contest/1760/problem/B", "problemId": "1654039", "shortId": "1760B", "contest_number": "1760", "name": "B. Atilla's Favorite Problem", "statement": "In order to write a string, Atilla needs to first learn all letters that are contained in the string.Atilla needs to write a message which can be represented as a string . He asks you what is the minimum alphabet size required so that one can write this message.The alphabet of size  () contains   Latin letters. For example an alphabet of size  contains  the characters , ,  and .", "input": "The first line contains a single integer  ()\u00a0\u2014 the number of test cases. The first line of each test case contains a single integer  ()\u00a0\u2014 the length of the string. The second line of each test case contains a string  of length , consisting of lowercase Latin letters.", "output": "For each test case, output a single integer\u00a0\u2014 the minimum alphabet size required to so that Atilla can write his message .", "tutorial": "To solve the problem we need to find the character with the highest alphabetical order in our string, since Atilla will need at least that alphabet size and won't need more. To do this iterate through the string and find the character with the highest alphabetical order. Output the maximum alphabetical order found. The solution can be done in ", "solution": "#include \"bits/stdc++.h\"\nusing namespace std;\n \nusing ll = long long;\n \n#define       forn(i,n)              for(int i=0;i<n;i++)\n#define          all(v)              v.begin(), v.end()\n#define         rall(v)              v.rbegin(),v.rend()\n \n#define            pb                push_back\n#define          sz(a)               (int)a.size()\n\nvoid solve() {\n    int n; string s; cin >> n >> s;\n    sort(all(s));\n    cout << s.back() - 'a' + 1 << \"\\n\";\n}   \n \nint32_t main() {\n    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);\n    int t = 1;\n    cin >> t;\n    while(t--) {\n        solve();\n    }\n}", "interactive": false, "noSolution": false, "noTutorial": false}