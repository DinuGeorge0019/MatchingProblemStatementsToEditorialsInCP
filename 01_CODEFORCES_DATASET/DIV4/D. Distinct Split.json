{"link": "https://codeforces.com//contest/1791/problem/D", "problemId": "1764444", "shortId": "1791D", "contest_number": "1791", "name": "D. Distinct Split", "statement": "Let's denote the  function for a string  as the number of distinct characters that the string contains. For example , , and .Given a string , split it into two non-empty strings  and  such that  is the maximum possible. In other words, find the maximum possible value of  such that  (the concatenation of string  and string  is equal to string ).", "input": "The input consists of multiple test cases. The first line contains an integer  ()\u00a0\u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains an integer  ()\u00a0\u2014 the length of the string . The second line contains the string , consisting of lowercase English letters. It is guaranteed that the sum of  over all test cases does not exceed .", "output": "For each test case, output a single integer \u00a0\u2014 the maximum possible value of  such that .", "tutorial": "Let's check all splitting points  for all (). We denote a splitting point as the last index of the first string we take (and all the remaining characters will go to the second string). We need to keep a dynamic count of the number of distinct characters in both strings  (the first string) and  (the second string). We can do this using two frequency arrays (and adding one to the distinct count of either string  or  when the frequency of a character is greater than zero. ", "solution": "#include \"bits/stdc++.h\"\nusing namespace std;\n \n#define ll long long\n\n#define          all(v)              v.begin(), v.end()\n#define         rall(v)              v.rbegin(),v.rend()\n \n#define            pb                push_back\n#define          sz(a)               (int)a.size()\n\nvoid solve() {\n    int n; string s; cin >> n >> s;\n    vector<int> cnt(26, 0), p(26, 0);\n    for(auto x: s) cnt[x - 'a']++;\n    int ans = 0;\n    for(auto x: s) {\n        --cnt[x - 'a'];\n        ++p[x - 'a'];\n        int cur = 0;\n        for(int i = 0; i < 26; ++i) {\n            cur += min(1, cnt[i]) + min(1, p[i]);\n        }\n        ans = max(ans, cur);\n    }\n    cout << ans << \"\\n\";\n}   \n \nint32_t main() {\n    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);\n    int t = 1;\n    cin >> t;\n    while(t--) {\n        solve();\n    }\n}", "interactive": false, "noSolution": false, "noTutorial": false}