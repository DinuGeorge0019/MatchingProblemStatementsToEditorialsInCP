{"link": "https://codeforces.com//contest/1669/problem/E", "problemId": "1375142", "shortId": "1669E", "contest_number": "1669", "name": "E. 2-Letter Strings", "statement": "Given  strings, each of length , consisting of lowercase Latin alphabet letters ', output the number of pairs of indices  such that  and the -th string and the -th string differ in exactly one position.In other words, count the number of pairs  () such that the -th string and the -th string have  one position  () such that .The answer may not fit into 32-bit integer type, so you should use 64-bit integers like  in C++ to avoid integer overflow.", "input": "The first line of the input contains a single integer  () \u2014 the number of test cases. The description of test cases follows. The first line of each test case contains a single integer  () \u2014 the number of strings. Then follows  lines, the -th of which containing a single string  of length , consisting of lowercase Latin letters . It is guaranteed that the sum of  over all test cases does not exceed .", "output": "For each test case, print a single integer \u2014 the number of pairs  () such that the -th string and the -th string have  one position  () such that .  Please note, that the answer for some test cases won't fit into 32-bit integer type, so you should use at least 64-bit integer type in your programming language (like  for C++).", "tutorial": "One solution is to go through all given strings, generate all strings that differ in exactly one position, and count the number of times these strings occur in the array. A possible way to count them is by using either the map/dictionary data structure or even simpler \u2014 a frequency array. Depending on the implementation, you may need to divide the answer by  because of overcounting pairs.The solution runs in  or  depending on the implementation. ", "solution": "#include <bits/stdc++.h>\nusing namespace std;\n\nint main() {\n    int t; cin >> t;\n    while(t--) {\n        int n; cin >> n;\n\n        vector<vector<int>> cnt(12, vector<int>(12, 0));\n        long long ans = 0;\n        \n        for(int i = 0;i < n; ++i) {\n            string s; cin >> s;\n            for(int j = 0;j < 2; ++j) {\n                for(char c = 'a'; c <= 'k'; ++c) {\n                    if(c == s[j]) continue;\n                    string a = s; a[j] = c;\n                    ans += cnt[a[0] - 'a'][a[1] - 'a'];\n                }\n            }\n            ++cnt[s[0] - 'a'][s[1] - 'a'];\n        }\n        cout << ans << \"\\n\";\n    }\n}", "interactive": false, "noSolution": false, "noTutorial": false}