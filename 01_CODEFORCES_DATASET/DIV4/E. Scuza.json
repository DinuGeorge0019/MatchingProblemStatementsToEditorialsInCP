{"link": "https://codeforces.com//contest/1742/problem/E", "problemId": "1584060", "shortId": "1742E", "contest_number": "1742", "name": "E. Scuza", "statement": "Timur has a stairway with  steps. The -th step is  meters higher than its predecessor. The first step is  meters higher than the ground, and the ground starts at  meters.    Timur has  questions, each denoted by an integer . For each question , you have to print the maximum possible height Timur can achieve by climbing the steps if his legs are of length . Timur can only climb the -th step if his legs are of length at least . In other words,  for each step  climbed.Note that you should answer each question independently.", "input": "The first line contains a single integer  ()\u00a0\u2014 the number of test cases. The first line of each test case contains two integers  ()\u00a0\u2014 the number of steps and the number of questions, respectively. The second line of each test case contains  integers ()\u00a0\u2014 the height of the steps. The third line of each test case contains  integers ()\u00a0\u2014 the numbers for each question. It is guaranteed that the sum of  does not exceed , and the sum of  does not exceed .", "output": "For each test case, output a single line containing  integers, the answer for each question. Please note, that the answer for some questions won't fit into 32-bit integer type, so you should use at least 64-bit integer type in your programming language (like  for C++).", "tutorial": "Let's compute the prefix sums of the array : let . Rephrasing the problem: for each question containing an integer , we need to find the largest  such that  are all at most , and then output . In other words, .Let's make the prefix maximums of the array: let . Then we need to find the largest  such that , which is doable using binary search, since the array  is non-decreasing. Once we find the index , we simply need to output .The time complexity is  per testcase.", "solution": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nvoid solve()\n{\n    int n, q;\n    cin >> n >> q;\n    vector<long long> pref;\n    pref.push_back(0);\n    vector<int> prefmax;\n    for(int i = 0; i < n; i++)\n    {\n        int x;\n        cin >> x;\n        pref.push_back(pref.back()+x);\n        if(i == 0)\n        {\n            prefmax.push_back(x);\n        }\n        else\n        {\n            prefmax.push_back(max(prefmax.back(), x));\n        }\n    }\n    for(int i = 0; i < q; i++)\n    {\n        int k;\n        cin >> k;\n        int ind = upper_bound(prefmax.begin(), prefmax.end(), k)-prefmax.begin();\n        cout << pref[ind] << \" \";\n    }\n    cout << endl;\n}\n\nint main()\n{\n    int t;\n    cin >> t;\n    while(t--)\n    {\n        solve();\n    }\n}", "interactive": false, "noSolution": false, "noTutorial": false}